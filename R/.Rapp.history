CQmodel("dicotgen2.eap", "dicotgen.shw")
print.CQmodel <-#
function(x, ...) {#
#
	catnull <- function(x, y, ...) {#
		if (!is.null(x)) #
			cat(y, ...)#
	}#
#
	cat("\n")#
	cat("ConQuest Output Summary:\n")#
	cat("========================\n")#
	catnull(x$title, x$title, "\n\n")#
	catnull(x$equation, "The item model:", x$equation, "\n")#
	catnull(x$nDim, x$nDim, ifelse(x$nDim == 1, "dimension", "dimensions"), "\n")#
	catnull(x$participants, x$participants, "participants\n")#
	catnull(x$deviance, "Deviance: ", x$deviance, " (", x$parameters, " parameters)\n\n", sep = "")#
	cat("Additional information available:\n")#
	catnull(x$SOE, "Summary of estimation: $SOE\n")#
	catnull(x$RMP, "Response model parameter estimates: $RMP\n")#
	catnull(x$reg.coef, "Regression coefficients: $reg.coef\n")#
	catnull(x$variances, "Variances: $variances\n")#
	catnull(x$cor.matrix, "Correlation matrix: $cor.matrix\n")#
	catnull(x$cov.matrix, "Covariance matrix: $cov.matrix\n")#
	catnull(x$rel.coef, "Reliabilities: $rel.coef\n")#
	catnull(x$GIN, "GIN tables (thresholds): $GIN\n")#
	catnull(x$GIN.deltas, "GIN tables (deltas): $GIN.deltas\n")#
	catnull(x$p.est, paste(x$p.est.type, " table: $p.est\n", sep = ""))#
	catnull(x$run.details, "Additional details: $run.details\n")#
	cat("\n")#
}
CQmodel("dicotgen2.eap", "dicotgen.shw")
CQmodel("dicotgen2.eap", "dicotgen.shw")$dimensions
CQmodel("dicotgen2.eap")$dimensions
personData.CQmodel <- function(thetas, ...) {#
	model <- thetas#
	if(!is.null(model$p.est)) {#
	p.est <- model$p.est#
	columns.at <- grep("^est", names(p.est), perl = TRUE)#
	thetas <- p.est[columns.at]#
	}#
	else#
		thetas <- 0#
	names(thetas) <- model$dimensions#
	print(names(thetas))#
	return(thetas)#
}
wrightMap("dicotgen2.eap", "dicotgen.shw")
personData.CQmodel <- function(thetas, ...) {#
	model <- thetas#
	if(!is.null(model$p.est)) {#
	p.est <- model$p.est#
	columns.at <- grep("^est", names(p.est), perl = TRUE)#
	thetas <- p.est[columns.at]#
	}#
	else#
		thetas <- 0#
	names(thetas) <- model$dimensions#
	return(thetas)#
}
wrightMap <- function(thetas, thresholds = NULL, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, #
	use.hist = TRUE, item.plot = "modern", main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", axis.items = "Items", #
	label.items = NULL, label.items.rows = 1, label.items.cex = 0.9, label.items.srt = 0, label.items.ticks = TRUE, show.thr.lab = TRUE, #
	show.thr.sym = TRUE, thr.lab.text = NULL, thr.lab.col = "black", thr.lab.pos = c(2, 4), thr.lab.font = 2, thr.lab.cex = 0.85, #
	thr.sym.pch = 23, thr.sym.col.fg = rgb(0, 0, 0, 0.3), thr.sym.col.bg = rgb(0, 0, 0, 0.3), thr.sym.cex = 1.2, thr.sym.lwd = 1, #
	dim.names = NULL, dim.color = NULL, dim.lab.side = 3, dim.lab.cex = 0.6, dim.lab.adj = 0.5, breaks = "FD", min.logit.pad = 0.25, #
	max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	theta.dens <- function(thetas, use.hist, breaks) {#
#
		if (use.hist == FALSE) {#
#
			densList <- apply(thetas, 2, density, na.rm = TRUE)#
#
			densExt <- function(densElem) {#
#
				xDim <- densElem["y"][[1]]#
				yDim <- densElem["x"][[1]]#
#
				xDim <- xDim/max(xDim)#
#
				densInfo <- cbind(xDim, yDim)#
				return(densInfo)#
#
			}#
#
			distInfo <- lapply(densList, densExt)#
#
		} else {#
#
			densList <- apply(thetas, 2, hist, plot = FALSE, breaks = breaks)#
			densExt <- function(densElem) {#
#
				bin.size <- abs(densElem$breaks[1] - densElem$breaks[2])#
#
				thetaHist <- data.frame(xleft = densElem$mids - (bin.size/2), ybotton = densElem$mids * 0, xright = densElem$mids + #
					(bin.size/2), ytop = densElem$counts)#
#
				return(thetaHist)#
#
			}#
#
			distInfo <- lapply(densList, densExt)#
#
		}#
#
		return(distInfo)#
#
	}#
	personPlot <- function(distInfo, use.hist, yRange, xRange, dim.lab.side, dim.lab.cex, dim.lab.adj, dims.col, p.cex.lab, p.font.lab, #
		p.lwd, p.las, p.cex.axis, p.font.axis, p.tcl) {#
#
		if (use.hist == FALSE) {#
#
			plot(distInfo, ylim = yRange, xlim = xRange, type = "l", axes = FALSE, ylab = "", xlab = "", cex.lab = p.cex.lab, #
				font.lab = p.font.lab, lwd = p.lwd, col = attr(distInfo, "dim.color"))#
#
		} else {#
			# print( distInfo)#
			#print(attr(distInfo, "dim.color"))#
plot(c(min(distInfo[, 1]), max(distInfo[, 3])), c(min(distInfo[, 2]), max(distInfo[, 4])), ylim = yRange, xlim = c(max(distInfo[, #
				4]), 0), type = "n", axes = FALSE, ylab = "", xlab = "", cex.lab = p.cex.lab, font.lab = p.font.lab, lwd = p.lwd, #
				col = attr(distInfo, "dim.color"))#
#
			rect(distInfo[, 4], distInfo[, 1], distInfo[, 2], distInfo[, 3], col = attr(distInfo, "dim.color"))#
#
		}#
#
		mtext(attr(distInfo, "dim.name"), side = dim.lab.side, line = -1, cex = dim.lab.cex, font = 1, adj = dim.lab.adj)#
#
		box(bty = "c")#
#
	}#
#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	Nbins <- function(x) {#
#
		itemRange <- range(x)#
		round((itemRange[2] - itemRange[1])/0.2, 0)#
#
		# return(seq(from = itemRange[1], to = itemRange[2], by = .1))#
		return(seq(from = itemRange[1], to = itemRange[2], length.out = 25))#
#
	}#
#
	binItems <- function(level, labelMat, cutMat) {#
#
		paste(sort(labelMat[cutMat == level]), collapse = " | ")#
#
	}#
#
	# Preparing Data#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, #
			c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, #
			c.params = c.params)#
	}#
#
	thetas <- as.matrix(thetas)#
	thr <- as.matrix(thresholds)#
#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	nI <- dim(thr)[1]#
	nL <- dim(thr)[2]#
	if (is.null(label.items)) {#
		if (!is.null(rownames(thr))) #
			label.items <- rownames(thr)#
		else label.items <- c(paste("Item", seq(1:nI)))#
	}#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
	if (is.null(min.l)) {#
#
		min.l <- min(c(min.theta, thr), na.rm = TRUE) - min.logit.pad#
#
	}#
#
	if (is.null(max.l)) {#
#
		max.l <- max(c(max.theta, thr), na.rm = TRUE) + max.logit.pad#
#
	}#
#
	yRange <- c(min.l, max.l)#
	xRange <- c(1, 0)#
#
	item.side <- round((nD * item.prop)/(1 - item.prop))#
	layout.wm <- c(seq(1:nD), rep(nD + 1, item.side))#
#
	if (is.null(dim.color)) {#
#
		if (use.hist) {#
			dim.color <- "white"#
		}#
		if (!use.hist) {#
			dim.color <- "black"#
		}#
#
	}#
	# Creating default matrices if info not provided#
	print(dimnames(thetas))#
	if (is.null(dim.names)) {#
		if (!is.null(rownames(thetas))) {#
			dim.names <- rownames(thetas)#
			}#
		else dim.names <- c(paste("Dim", seq(1:nD), sep = ""))#
	}#
	if (is.null(thr.lab.text)) {#
		if (!is.null(colnames(thresholds))) #
			thr.lab.text <- as.data.frame(matrix(rep(colnames(thresholds), each = nrow(thresholds)), nrow = nrow(thresholds)))#
		else thr.lab.text = col(thr)#
	}#
	if (ncol(thetas) > 1 & length(dim.color) == 1) {#
#
		dim.color <- rep(dim.color, ncol(thetas))#
#
	}#
#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
#
	par(oma = op$oma + c(0, 5, 0, 5))#
#
	layout(matrix(layout.wm, nrow = 1), widths = c(rep((1 - item.prop)/nD, nD), rep(item.prop/item.side, item.side)), heights = 0.8)#
#
	## Generating Person Side#
	par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	par(mgp = c(op$mar[1] - 2.4, 1, 0))#
#
	distInfo <- theta.dens(thetas, use.hist, breaks)#
#
	for (i in 1:nD) {#
#
		attr(distInfo[[i]], "dim.name") <- dim.names[i]#
		attr(distInfo[[i]], "dim.color") <- dim.color[i]#
#
	}#
#
	lapply(distInfo, FUN = personPlot, use.hist = use.hist, yRange = yRange, xRange = xRange, dim.lab.cex = dim.lab.cex, dim.lab.side = dim.lab.side, #
		dim.lab.adj = dim.lab.adj, p.cex.lab = 1.3, p.font.lab = 3, p.lwd = 2, p.las = 1, p.cex.axis = 1.1, p.font.axis = 2, p.tcl = -0.5)#
#
	## Generating Item Side#
	if (item.plot == "modern") {#
#
		plot(seq(1:nI), rep(0, nI), type = "n", axes = FALSE, xlab = axis.items, ylab = "", ylim = yRange, xlim = c(0.5, nI + #
			0.5), cex.lab = 1.3, font.lab = 3)#
#
		box(bty = "o")#
#
		usr <- par("usr")#
#
		axis(4, las = 1, cex.axis = 1.2, font.axis = 2)#
#
		par(mgp = c(0, 0.2, 0))#
		if (show.thr.sym == TRUE) {#
#
			points(row(thr), thr, ylim = yRange, type = "p", cex = thr.sym.cex, lwd = thr.sym.lwd, pch = as.matrix(thr.sym.pch), #
				col = as.matrix(thr.sym.col.fg), bg = as.matrix(thr.sym.col.bg))#
#
		}#
		if (show.thr.lab == TRUE) {#
#
			if (show.thr.sym == TRUE) {#
				pos <- matrix(rep(rep_len(thr.lab.pos, ncol(thr)), nI), byrow = TRUE, ncol = ncol(thr))#
				pos <- t(sapply(1:nrow(thr), function(x) pos[x, rank(thr[x, ])]))#
				text(row(thr), thr, labels = as.matrix(thr.lab.text), col = as.matrix(thr.lab.col), pos = pos, cex = thr.lab.cex, #
					font = thr.lab.font)#
			} else {#
#
				text(row(thr), thr, labels = as.matrix(thr.lab.text), col = as.matrix(thr.lab.col), cex = thr.lab.cex, font = thr.lab.font)#
#
			}#
#
		}#
#
	}#
#
	if (item.plot == "classic") {#
#
		plot(seq(1:nI), rep(0, nI), type = "n", axes = FALSE, xlab = axis.items, ylab = "", ylim = yRange, xlim = c(0.5, nI + #
			0.5), cex.lab = 1.3, font.lab = 3)#
#
		box(bty = "o")#
#
		usr <- par("usr")#
#
		axis(4, las = 1, cex.axis = 1.2, font.axis = 2)#
#
		par(mgp = c(0, 0.2, 0))#
#
		item.hist <- hist(thresholds, plot = FALSE, breaks = Nbins(yRange))#
#
		itemBinLocations <- item.hist$mids#
#
		bin.size <- abs(item.hist$breaks[1] - item.hist$breaks[2])#
#
		item.hist <- data.frame(xleft = item.hist$mids - (bin.size/2), ybotton = item.hist$mids * 0, xright = item.hist$mids + #
			(bin.size/2), ytop = item.hist$counts)#
#
		item.labels <- matrix(rep(formatC(1:nI, digits = 1, format = "d", flag = "0"), nL), ncol = nL)#
		item.labels <- t(apply(item.labels, 1, paste, c(1:nL), sep = "."))#
#
		binnedItems <- matrix(cut(thresholds, breaks = c(item.hist[, 1], tail(item.hist[, 3], 1)), labels = c(1:length(item.hist[, #
			1] + 1))), ncol = nL)#
#
		binnedList <- unlist(lapply(1:length(itemBinLocations), binItems, item.labels, binnedItems))#
#
		text(cbind(0, itemBinLocations), labels = binnedList, pos = 4, offset = 1 * 20/nI)#
#
	}#
#
	if (item.plot == "hist") {#
#
		item.hist <- hist(thresholds, plot = FALSE, breaks = Nbins(yRange))#
#
		itemBinLocations <- item.hist$mids#
#
		bin.size <- abs(item.hist$breaks[1] - item.hist$breaks[2])#
#
		item.hist <- data.frame(xleft = item.hist$mids - (bin.size/2), ybotton = item.hist$mids * 0, xright = item.hist$mids + #
			(bin.size/2), ytop = item.hist$counts)#
#
		plot(c(min(item.hist[, 1]), max(item.hist[, 3])), c(min(item.hist[, 2]), max(item.hist[, 4])), ylim = yRange, xlim = c(0, #
			max(item.hist[, 4])), type = "n", axes = FALSE, ylab = "", xlab = "")#
#
		box(bty = "o")#
#
		usr <- par("usr")#
#
		axis(4, las = 1, cex.axis = 0.8, font.axis = 2)#
#
		par(mgp = c(0, 0.2, 0))#
#
		item.labels <- matrix(rep(formatC(1:nI, digits = 1, format = "d", flag = "0"), nL), ncol = nL)#
		item.labels <- t(apply(item.labels, 1, paste, c(1:nL), sep = "."))#
#
		binnedItems <- matrix(cut(thresholds, breaks = c(item.hist[, 1], tail(item.hist[, 3], 1)), labels = c(1:length(item.hist[, #
			1] + 1))), ncol = nL)#
#
		binnedList <- unlist(lapply(1:length(itemBinLocations), binItems, item.labels, binnedItems))#
#
		rect(item.hist[, 4], item.hist[, 1], item.hist[, 2], item.hist[, 3])#
#
	}#
#
	par(mgp = c(3, 1, 0))#
#
	if (item.plot == "modern") {#
#
		if (label.items.rows == 1) {#
#
			if (label.items.srt != 0) {#
				text.adj = c(1.1, 1.1)#
			} else {#
				text.adj = c(0.5, 2)#
			}#
#
			text(seq(1:nrow(thr)), y = par("usr")[3], labels = label.items, srt = label.items.srt, adj = text.adj, xpd = TRUE, #
				cex = label.items.cex)#
			if (label.items.ticks == TRUE) {#
#
				axis(1, at = 1:nI, labels = FALSE, line = NA, tcl = -0.35)#
#
			}#
#
		}#
#
		if (label.items.rows == 2) {#
			text(seq(from = 1, to = nrow(thr), by = 2), y = par("usr")[3], labels = label.items[seq(from = 1, to = nrow(thr), #
				by = 2)], adj = c(0.5, 1.9), xpd = TRUE, cex = label.items.cex)#
			text(seq(from = 2, to = nrow(thr), by = 2), y = par("usr")[3], labels = label.items[seq(from = 2, to = nrow(thr), #
				by = 2)], adj = c(0.5, 3.1), xpd = TRUE, cex = label.items.cex)#
			if (label.items.ticks == TRUE) {#
#
				axis(1, at = seq(from = 1, to = nI, by = 2), labels = FALSE, line = NA, tcl = -0.35)#
				axis(1, at = seq(from = 2, to = nI, by = 2), labels = FALSE, line = NA, tcl = -0.9)#
#
			}#
#
		}#
#
		if (label.items.rows == 3) {#
			text(seq(from = 1, to = nrow(thr), by = 3), y = par("usr")[3], labels = label.items[seq(from = 1, to = nrow(thr), #
				by = 3)], adj = c(0.5, 1.9), xpd = TRUE, cex = label.items.cex)#
			text(seq(from = 2, to = nrow(thr), by = 3), y = par("usr")[3], labels = label.items[seq(from = 2, to = nrow(thr), #
				by = 3)], adj = c(0.5, 3.1), xpd = TRUE, cex = label.items.cex)#
			text(seq(from = 3, to = nrow(thr), by = 3), y = par("usr")[3], labels = label.items[seq(from = 3, to = nrow(thr), #
				by = 3)], adj = c(0.5, 4.3), xpd = TRUE, cex = label.items.cex)#
			if (label.items.ticks == TRUE) {#
#
				axis(1, at = seq(from = 1, to = nI, by = 3), labels = FALSE, line = NA, tcl = -0.35)#
				axis(1, at = seq(from = 2, to = nI, by = 3), labels = FALSE, line = NA, tcl = -0.9)#
				axis(1, at = seq(from = 3, to = nI, by = 3), labels = FALSE, line = NA, tcl = -1.4)#
#
			}#
#
		}#
#
	}#
#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
#
}
wrightMap("dicotgen2.eap", "dicotgen.shw")
wrightMap <- function(thetas, thresholds = NULL, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, #
	use.hist = TRUE, item.plot = "modern", main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", axis.items = "Items", #
	label.items = NULL, label.items.rows = 1, label.items.cex = 0.9, label.items.srt = 0, label.items.ticks = TRUE, show.thr.lab = TRUE, #
	show.thr.sym = TRUE, thr.lab.text = NULL, thr.lab.col = "black", thr.lab.pos = c(2, 4), thr.lab.font = 2, thr.lab.cex = 0.85, #
	thr.sym.pch = 23, thr.sym.col.fg = rgb(0, 0, 0, 0.3), thr.sym.col.bg = rgb(0, 0, 0, 0.3), thr.sym.cex = 1.2, thr.sym.lwd = 1, #
	dim.names = NULL, dim.color = NULL, dim.lab.side = 3, dim.lab.cex = 0.6, dim.lab.adj = 0.5, breaks = "FD", min.logit.pad = 0.25, #
	max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	theta.dens <- function(thetas, use.hist, breaks) {#
#
		if (use.hist == FALSE) {#
#
			densList <- apply(thetas, 2, density, na.rm = TRUE)#
#
			densExt <- function(densElem) {#
#
				xDim <- densElem["y"][[1]]#
				yDim <- densElem["x"][[1]]#
#
				xDim <- xDim/max(xDim)#
#
				densInfo <- cbind(xDim, yDim)#
				return(densInfo)#
#
			}#
#
			distInfo <- lapply(densList, densExt)#
#
		} else {#
#
			densList <- apply(thetas, 2, hist, plot = FALSE, breaks = breaks)#
			densExt <- function(densElem) {#
#
				bin.size <- abs(densElem$breaks[1] - densElem$breaks[2])#
#
				thetaHist <- data.frame(xleft = densElem$mids - (bin.size/2), ybotton = densElem$mids * 0, xright = densElem$mids + #
					(bin.size/2), ytop = densElem$counts)#
#
				return(thetaHist)#
#
			}#
#
			distInfo <- lapply(densList, densExt)#
#
		}#
#
		return(distInfo)#
#
	}#
	personPlot <- function(distInfo, use.hist, yRange, xRange, dim.lab.side, dim.lab.cex, dim.lab.adj, dims.col, p.cex.lab, p.font.lab, #
		p.lwd, p.las, p.cex.axis, p.font.axis, p.tcl) {#
#
		if (use.hist == FALSE) {#
#
			plot(distInfo, ylim = yRange, xlim = xRange, type = "l", axes = FALSE, ylab = "", xlab = "", cex.lab = p.cex.lab, #
				font.lab = p.font.lab, lwd = p.lwd, col = attr(distInfo, "dim.color"))#
#
		} else {#
			# print( distInfo)#
			#print(attr(distInfo, "dim.color"))#
plot(c(min(distInfo[, 1]), max(distInfo[, 3])), c(min(distInfo[, 2]), max(distInfo[, 4])), ylim = yRange, xlim = c(max(distInfo[, #
				4]), 0), type = "n", axes = FALSE, ylab = "", xlab = "", cex.lab = p.cex.lab, font.lab = p.font.lab, lwd = p.lwd, #
				col = attr(distInfo, "dim.color"))#
#
			rect(distInfo[, 4], distInfo[, 1], distInfo[, 2], distInfo[, 3], col = attr(distInfo, "dim.color"))#
#
		}#
#
		mtext(attr(distInfo, "dim.name"), side = dim.lab.side, line = -1, cex = dim.lab.cex, font = 1, adj = dim.lab.adj)#
#
		box(bty = "c")#
#
	}#
#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	Nbins <- function(x) {#
#
		itemRange <- range(x)#
		round((itemRange[2] - itemRange[1])/0.2, 0)#
#
		# return(seq(from = itemRange[1], to = itemRange[2], by = .1))#
		return(seq(from = itemRange[1], to = itemRange[2], length.out = 25))#
#
	}#
#
	binItems <- function(level, labelMat, cutMat) {#
#
		paste(sort(labelMat[cutMat == level]), collapse = " | ")#
#
	}#
#
	# Preparing Data#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, #
			c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, #
			c.params = c.params)#
	}#
#
	thetas <- as.matrix(thetas)#
	thr <- as.matrix(thresholds)#
#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	nI <- dim(thr)[1]#
	nL <- dim(thr)[2]#
	if (is.null(label.items)) {#
		if (!is.null(rownames(thr))) #
			label.items <- rownames(thr)#
		else label.items <- c(paste("Item", seq(1:nI)))#
	}#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
	if (is.null(min.l)) {#
#
		min.l <- min(c(min.theta, thr), na.rm = TRUE) - min.logit.pad#
#
	}#
#
	if (is.null(max.l)) {#
#
		max.l <- max(c(max.theta, thr), na.rm = TRUE) + max.logit.pad#
#
	}#
#
	yRange <- c(min.l, max.l)#
	xRange <- c(1, 0)#
#
	item.side <- round((nD * item.prop)/(1 - item.prop))#
	layout.wm <- c(seq(1:nD), rep(nD + 1, item.side))#
#
	if (is.null(dim.color)) {#
#
		if (use.hist) {#
			dim.color <- "white"#
		}#
		if (!use.hist) {#
			dim.color <- "black"#
		}#
#
	}#
	# Creating default matrices if info not provided#
	if (is.null(dim.names)) {#
		if (!is.null(names(thetas))) {#
			dim.names <- names(thetas)#
			}#
		else dim.names <- c(paste("Dim", seq(1:nD), sep = ""))#
	}#
	if (is.null(thr.lab.text)) {#
		if (!is.null(colnames(thresholds))) #
			thr.lab.text <- as.data.frame(matrix(rep(colnames(thresholds), each = nrow(thresholds)), nrow = nrow(thresholds)))#
		else thr.lab.text = col(thr)#
	}#
	if (ncol(thetas) > 1 & length(dim.color) == 1) {#
#
		dim.color <- rep(dim.color, ncol(thetas))#
#
	}#
#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
#
	par(oma = op$oma + c(0, 5, 0, 5))#
#
	layout(matrix(layout.wm, nrow = 1), widths = c(rep((1 - item.prop)/nD, nD), rep(item.prop/item.side, item.side)), heights = 0.8)#
#
	## Generating Person Side#
	par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	par(mgp = c(op$mar[1] - 2.4, 1, 0))#
#
	distInfo <- theta.dens(thetas, use.hist, breaks)#
#
	for (i in 1:nD) {#
#
		attr(distInfo[[i]], "dim.name") <- dim.names[i]#
		attr(distInfo[[i]], "dim.color") <- dim.color[i]#
#
	}#
#
	lapply(distInfo, FUN = personPlot, use.hist = use.hist, yRange = yRange, xRange = xRange, dim.lab.cex = dim.lab.cex, dim.lab.side = dim.lab.side, #
		dim.lab.adj = dim.lab.adj, p.cex.lab = 1.3, p.font.lab = 3, p.lwd = 2, p.las = 1, p.cex.axis = 1.1, p.font.axis = 2, p.tcl = -0.5)#
#
	## Generating Item Side#
	if (item.plot == "modern") {#
#
		plot(seq(1:nI), rep(0, nI), type = "n", axes = FALSE, xlab = axis.items, ylab = "", ylim = yRange, xlim = c(0.5, nI + #
			0.5), cex.lab = 1.3, font.lab = 3)#
#
		box(bty = "o")#
#
		usr <- par("usr")#
#
		axis(4, las = 1, cex.axis = 1.2, font.axis = 2)#
#
		par(mgp = c(0, 0.2, 0))#
		if (show.thr.sym == TRUE) {#
#
			points(row(thr), thr, ylim = yRange, type = "p", cex = thr.sym.cex, lwd = thr.sym.lwd, pch = as.matrix(thr.sym.pch), #
				col = as.matrix(thr.sym.col.fg), bg = as.matrix(thr.sym.col.bg))#
#
		}#
		if (show.thr.lab == TRUE) {#
#
			if (show.thr.sym == TRUE) {#
				pos <- matrix(rep(rep_len(thr.lab.pos, ncol(thr)), nI), byrow = TRUE, ncol = ncol(thr))#
				pos <- t(sapply(1:nrow(thr), function(x) pos[x, rank(thr[x, ])]))#
				text(row(thr), thr, labels = as.matrix(thr.lab.text), col = as.matrix(thr.lab.col), pos = pos, cex = thr.lab.cex, #
					font = thr.lab.font)#
			} else {#
#
				text(row(thr), thr, labels = as.matrix(thr.lab.text), col = as.matrix(thr.lab.col), cex = thr.lab.cex, font = thr.lab.font)#
#
			}#
#
		}#
#
	}#
#
	if (item.plot == "classic") {#
#
		plot(seq(1:nI), rep(0, nI), type = "n", axes = FALSE, xlab = axis.items, ylab = "", ylim = yRange, xlim = c(0.5, nI + #
			0.5), cex.lab = 1.3, font.lab = 3)#
#
		box(bty = "o")#
#
		usr <- par("usr")#
#
		axis(4, las = 1, cex.axis = 1.2, font.axis = 2)#
#
		par(mgp = c(0, 0.2, 0))#
#
		item.hist <- hist(thresholds, plot = FALSE, breaks = Nbins(yRange))#
#
		itemBinLocations <- item.hist$mids#
#
		bin.size <- abs(item.hist$breaks[1] - item.hist$breaks[2])#
#
		item.hist <- data.frame(xleft = item.hist$mids - (bin.size/2), ybotton = item.hist$mids * 0, xright = item.hist$mids + #
			(bin.size/2), ytop = item.hist$counts)#
#
		item.labels <- matrix(rep(formatC(1:nI, digits = 1, format = "d", flag = "0"), nL), ncol = nL)#
		item.labels <- t(apply(item.labels, 1, paste, c(1:nL), sep = "."))#
#
		binnedItems <- matrix(cut(thresholds, breaks = c(item.hist[, 1], tail(item.hist[, 3], 1)), labels = c(1:length(item.hist[, #
			1] + 1))), ncol = nL)#
#
		binnedList <- unlist(lapply(1:length(itemBinLocations), binItems, item.labels, binnedItems))#
#
		text(cbind(0, itemBinLocations), labels = binnedList, pos = 4, offset = 1 * 20/nI)#
#
	}#
#
	if (item.plot == "hist") {#
#
		item.hist <- hist(thresholds, plot = FALSE, breaks = Nbins(yRange))#
#
		itemBinLocations <- item.hist$mids#
#
		bin.size <- abs(item.hist$breaks[1] - item.hist$breaks[2])#
#
		item.hist <- data.frame(xleft = item.hist$mids - (bin.size/2), ybotton = item.hist$mids * 0, xright = item.hist$mids + #
			(bin.size/2), ytop = item.hist$counts)#
#
		plot(c(min(item.hist[, 1]), max(item.hist[, 3])), c(min(item.hist[, 2]), max(item.hist[, 4])), ylim = yRange, xlim = c(0, #
			max(item.hist[, 4])), type = "n", axes = FALSE, ylab = "", xlab = "")#
#
		box(bty = "o")#
#
		usr <- par("usr")#
#
		axis(4, las = 1, cex.axis = 0.8, font.axis = 2)#
#
		par(mgp = c(0, 0.2, 0))#
#
		item.labels <- matrix(rep(formatC(1:nI, digits = 1, format = "d", flag = "0"), nL), ncol = nL)#
		item.labels <- t(apply(item.labels, 1, paste, c(1:nL), sep = "."))#
#
		binnedItems <- matrix(cut(thresholds, breaks = c(item.hist[, 1], tail(item.hist[, 3], 1)), labels = c(1:length(item.hist[, #
			1] + 1))), ncol = nL)#
#
		binnedList <- unlist(lapply(1:length(itemBinLocations), binItems, item.labels, binnedItems))#
#
		rect(item.hist[, 4], item.hist[, 1], item.hist[, 2], item.hist[, 3])#
#
	}#
#
	par(mgp = c(3, 1, 0))#
#
	if (item.plot == "modern") {#
#
		if (label.items.rows == 1) {#
#
			if (label.items.srt != 0) {#
				text.adj = c(1.1, 1.1)#
			} else {#
				text.adj = c(0.5, 2)#
			}#
#
			text(seq(1:nrow(thr)), y = par("usr")[3], labels = label.items, srt = label.items.srt, adj = text.adj, xpd = TRUE, #
				cex = label.items.cex)#
			if (label.items.ticks == TRUE) {#
#
				axis(1, at = 1:nI, labels = FALSE, line = NA, tcl = -0.35)#
#
			}#
#
		}#
#
		if (label.items.rows == 2) {#
			text(seq(from = 1, to = nrow(thr), by = 2), y = par("usr")[3], labels = label.items[seq(from = 1, to = nrow(thr), #
				by = 2)], adj = c(0.5, 1.9), xpd = TRUE, cex = label.items.cex)#
			text(seq(from = 2, to = nrow(thr), by = 2), y = par("usr")[3], labels = label.items[seq(from = 2, to = nrow(thr), #
				by = 2)], adj = c(0.5, 3.1), xpd = TRUE, cex = label.items.cex)#
			if (label.items.ticks == TRUE) {#
#
				axis(1, at = seq(from = 1, to = nI, by = 2), labels = FALSE, line = NA, tcl = -0.35)#
				axis(1, at = seq(from = 2, to = nI, by = 2), labels = FALSE, line = NA, tcl = -0.9)#
#
			}#
#
		}#
#
		if (label.items.rows == 3) {#
			text(seq(from = 1, to = nrow(thr), by = 3), y = par("usr")[3], labels = label.items[seq(from = 1, to = nrow(thr), #
				by = 3)], adj = c(0.5, 1.9), xpd = TRUE, cex = label.items.cex)#
			text(seq(from = 2, to = nrow(thr), by = 3), y = par("usr")[3], labels = label.items[seq(from = 2, to = nrow(thr), #
				by = 3)], adj = c(0.5, 3.1), xpd = TRUE, cex = label.items.cex)#
			text(seq(from = 3, to = nrow(thr), by = 3), y = par("usr")[3], labels = label.items[seq(from = 3, to = nrow(thr), #
				by = 3)], adj = c(0.5, 4.3), xpd = TRUE, cex = label.items.cex)#
			if (label.items.ticks == TRUE) {#
#
				axis(1, at = seq(from = 1, to = nI, by = 3), labels = FALSE, line = NA, tcl = -0.35)#
				axis(1, at = seq(from = 2, to = nI, by = 3), labels = FALSE, line = NA, tcl = -0.9)#
				axis(1, at = seq(from = 3, to = nI, by = 3), labels = FALSE, line = NA, tcl = -1.4)#
#
			}#
#
		}#
#
	}#
#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
#
}
wrightMap("dicotgen2.eap", "dicotgen.shw")
wrightMap <- function(thetas, thresholds = NULL, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, #
	  main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents",      #
    min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	# Preparing Data#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, #
			c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, #
			c.params = c.params)#
	}#
#
	thetas <- as.matrix(thetas)#
	thr <- as.matrix(thresholds)#
#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
	if (is.null(min.l)) {#
#
		min.l <- min(c(min.theta, thr), na.rm = TRUE) - min.logit.pad#
#
	}#
#
	if (is.null(max.l)) {#
#
		max.l <- max(c(max.theta, thr), na.rm = TRUE) + max.logit.pad#
#
	}#
#
	yRange <- c(min.l, max.l)#
	xRange <- c(1, 0)#
#
	item.side <- round((nD * item.prop)/(1 - item.prop))#
	layout.wm <- c(seq(1:nD), rep(nD + 1, item.side))#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
#
	par(oma = op$oma + c(0, 5, 0, 5))#
#
	layout(matrix(layout.wm, nrow = 1), widths = c(rep((1 - item.prop)/nD, nD), rep(item.prop/item.side, item.side)), heights = 0.8)#
	par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	par(mgp = c(op$mar[1] - 2.4, 1, 0))#
#
	personPlot(thetas, yRange, xRange,...)#
	itemPlot(thresholds,yRange,...)#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
#
}
itemPlot <- function(thr, yRange, item.plot = "modern", axis.items = "Items",label.items = NULL, show.thr.sym = TRUE, thr.lab.text = NULL, thr.sym.cex = 1.2,thr.sym.lwd = 1,thr.sym.pch = 23,thr.sym.col.fg = rgb(0, 0, 0, 0.3), thr.sym.col.bg = rgb(0, 0, 0, 0.3),show.thr.lab = TRUE,thr.lab.pos = c(2, 4),thr.lab.col = "black",thr.lab.cex = 0.85,thr.lab.font = 2,label.items.rows = 1,label.items.srt = 0,label.items.cex = 0.9,label.items.ticks = TRUE, ...) {#
	Nbins <- function(x) {#
#
		itemRange <- range(x)#
		round((itemRange[2] - itemRange[1])/0.2, 0)#
#
		# return(seq(from = itemRange[1], to = itemRange[2], by = .1))#
		return(seq(from = itemRange[1], to = itemRange[2], length.out = 25))#
#
	}#
#
	binItems <- function(level, labelMat, cutMat) {#
#
		paste(sort(labelMat[cutMat == level]), collapse = " | ")#
#
	}#
	nI <- dim(thr)[1]#
	nL <- dim(thr)[2]#
	if (is.null(label.items)) {#
		if (!is.null(rownames(thr))) #
			label.items <- rownames(thr)#
		else label.items <- c(paste("Item", seq(1:nI)))#
	}#
	if (is.null(thr.lab.text)) {#
		if (!is.null(colnames(thr))) #
			thr.lab.text <- as.data.frame(matrix(rep(colnames(thr), each = nrow(thr)), nrow = nrow(thr)))#
		else thr.lab.text = col(thr)#
	}#
	if (item.plot == "modern") {#
#
		plot(seq(1:nI), rep(0, nI), type = "n", axes = FALSE, xlab = axis.items, ylab = "", ylim = yRange, xlim = c(0.5, nI + #
			0.5), cex.lab = 1.3, font.lab = 3)#
#
		box(bty = "o")#
#
		usr <- par("usr")#
#
		axis(4, las = 1, cex.axis = 1.2, font.axis = 2)#
#
		par(mgp = c(0, 0.2, 0))#
#
		if (show.thr.sym == TRUE) {#
#
			points(row(thr), thr, ylim = yRange, type = "p", cex = thr.sym.cex, lwd = thr.sym.lwd, pch = as.matrix(thr.sym.pch), #
				col = as.matrix(thr.sym.col.fg), bg = as.matrix(thr.sym.col.bg))#
#
		}#
		if (show.thr.lab == TRUE) {#
			if (show.thr.sym == TRUE) {#
				pos <- matrix(rep(rep_len(thr.lab.pos, ncol(thr)), nI), byrow = TRUE, ncol = ncol(thr))#
				pos <- t(sapply(1:nrow(thr), function(x) pos[x, rank(thr[x, ])]))#
				text(row(thr), thr, labels = as.matrix(thr.lab.text), col = as.matrix(thr.lab.col), pos = pos, cex = thr.lab.cex, #
					font = thr.lab.font)#
			} else {#
#
				text(row(thr), thr, labels = as.matrix(thr.lab.text), col = as.matrix(thr.lab.col), cex = thr.lab.cex, font = thr.lab.font)#
#
			}#
#
		}#
#
	}#
#
	if (item.plot == "classic") {#
#
		plot(seq(1:nI), rep(0, nI), type = "n", axes = FALSE, xlab = axis.items, ylab = "", ylim = yRange, xlim = c(0.5, nI + #
			0.5), cex.lab = 1.3, font.lab = 3)#
#
		box(bty = "o")#
#
		usr <- par("usr")#
#
		axis(4, las = 1, cex.axis = 1.2, font.axis = 2)#
#
		par(mgp = c(0, 0.2, 0))#
#
		item.hist <- hist(thresholds, plot = FALSE, breaks = Nbins(yRange))#
#
		itemBinLocations <- item.hist$mids#
#
		bin.size <- abs(item.hist$breaks[1] - item.hist$breaks[2])#
#
		item.hist <- data.frame(xleft = item.hist$mids - (bin.size/2), ybotton = item.hist$mids * 0, xright = item.hist$mids + #
			(bin.size/2), ytop = item.hist$counts)#
#
		item.labels <- matrix(rep(formatC(1:nI, digits = 1, format = "d", flag = "0"), nL), ncol = nL)#
		item.labels <- t(apply(item.labels, 1, paste, c(1:nL), sep = "."))#
#
		binnedItems <- matrix(cut(thresholds, breaks = c(item.hist[, 1], tail(item.hist[, 3], 1)), labels = c(1:length(item.hist[, #
			1] + 1))), ncol = nL)#
#
		binnedList <- unlist(lapply(1:length(itemBinLocations), binItems, item.labels, binnedItems))#
#
		text(cbind(0, itemBinLocations), labels = binnedList, pos = 4, offset = 1 * 20/nI)#
#
	}#
#
	if (item.plot == "hist") {#
#
		item.hist <- hist(thresholds, plot = FALSE, breaks = Nbins(yRange))#
#
		itemBinLocations <- item.hist$mids#
#
		bin.size <- abs(item.hist$breaks[1] - item.hist$breaks[2])#
#
		item.hist <- data.frame(xleft = item.hist$mids - (bin.size/2), ybotton = item.hist$mids * 0, xright = item.hist$mids + #
			(bin.size/2), ytop = item.hist$counts)#
#
		plot(c(min(item.hist[, 1]), max(item.hist[, 3])), c(min(item.hist[, 2]), max(item.hist[, 4])), ylim = yRange, xlim = c(0, #
			max(item.hist[, 4])), type = "n", axes = FALSE, ylab = "", xlab = "")#
#
		box(bty = "o")#
#
		usr <- par("usr")#
#
		axis(4, las = 1, cex.axis = 0.8, font.axis = 2)#
#
		par(mgp = c(0, 0.2, 0))#
#
		item.labels <- matrix(rep(formatC(1:nI, digits = 1, format = "d", flag = "0"), nL), ncol = nL)#
		item.labels <- t(apply(item.labels, 1, paste, c(1:nL), sep = "."))#
#
		binnedItems <- matrix(cut(thresholds, breaks = c(item.hist[, 1], tail(item.hist[, 3], 1)), labels = c(1:length(item.hist[, #
			1] + 1))), ncol = nL)#
#
		binnedList <- unlist(lapply(1:length(itemBinLocations), binItems, item.labels, binnedItems))#
#
		rect(item.hist[, 4], item.hist[, 1], item.hist[, 2], item.hist[, 3])#
#
	}#
#
	par(mgp = c(3, 1, 0))#
#
	if (item.plot == "modern") {#
		if (label.items.rows == 1) {#
			if (label.items.srt != 0) {#
				text.adj = c(1.1, 1.1)#
			} else {#
				text.adj = c(0.5, 2)#
			}#
			text(seq(1:nrow(thr)), y = par("usr")[3], labels = label.items, srt = label.items.srt, adj = text.adj, xpd = TRUE, #
				cex = label.items.cex)#
#
			if (label.items.ticks == TRUE) {#
#
				axis(1, at = 1:nI, labels = FALSE, line = NA, tcl = -0.35)#
#
			}#
#
		}#
#
		if (label.items.rows == 2) {#
			text(seq(from = 1, to = nrow(thr), by = 2), y = par("usr")[3], labels = label.items[seq(from = 1, to = nrow(thr), #
				by = 2)], adj = c(0.5, 1.9), xpd = TRUE, cex = label.items.cex)#
			text(seq(from = 2, to = nrow(thr), by = 2), y = par("usr")[3], labels = label.items[seq(from = 2, to = nrow(thr), #
				by = 2)], adj = c(0.5, 3.1), xpd = TRUE, cex = label.items.cex)#
			if (label.items.ticks == TRUE) {#
#
				axis(1, at = seq(from = 1, to = nI, by = 2), labels = FALSE, line = NA, tcl = -0.35)#
				axis(1, at = seq(from = 2, to = nI, by = 2), labels = FALSE, line = NA, tcl = -0.9)#
#
			}#
#
		}#
#
		if (label.items.rows == 3) {#
			text(seq(from = 1, to = nrow(thr), by = 3), y = par("usr")[3], labels = label.items[seq(from = 1, to = nrow(thr), #
				by = 3)], adj = c(0.5, 1.9), xpd = TRUE, cex = label.items.cex)#
			text(seq(from = 2, to = nrow(thr), by = 3), y = par("usr")[3], labels = label.items[seq(from = 2, to = nrow(thr), #
				by = 3)], adj = c(0.5, 3.1), xpd = TRUE, cex = label.items.cex)#
			text(seq(from = 3, to = nrow(thr), by = 3), y = par("usr")[3], labels = label.items[seq(from = 3, to = nrow(thr), #
				by = 3)], adj = c(0.5, 4.3), xpd = TRUE, cex = label.items.cex)#
			if (label.items.ticks == TRUE) {#
#
				axis(1, at = seq(from = 1, to = nI, by = 3), labels = FALSE, line = NA, tcl = -0.35)#
				axis(1, at = seq(from = 2, to = nI, by = 3), labels = FALSE, line = NA, tcl = -0.9)#
				axis(1, at = seq(from = 3, to = nI, by = 3), labels = FALSE, line = NA, tcl = -1.4)#
#
			}#
#
		}#
#
	}#
#
}
personPlot <- function(thetas, yRange, xRange, use.hist = TRUE, breaks = "FD", dim.color = NULL, dim.names = NULL, dim.lab.cex = 0.6,dim.lab.side = 3,dim.lab.adj = 0.5) {#
#
	theta.dens <- function(thetas, use.hist, breaks) {#
#
		if (use.hist == FALSE) {#
#
			densList <- apply(thetas, 2, density, na.rm = TRUE)#
#
			densExt <- function(densElem) {#
#
				xDim <- densElem["y"][[1]]#
				yDim <- densElem["x"][[1]]#
#
				xDim <- xDim/max(xDim)#
#
				densInfo <- cbind(xDim, yDim)#
				return(densInfo)#
#
			}#
#
			distInfo <- lapply(densList, densExt)#
#
		} else {#
#
			densList <- apply(thetas, 2, hist, plot = FALSE, breaks = breaks)#
			densExt <- function(densElem) {#
#
				bin.size <- abs(densElem$breaks[1] - densElem$breaks[2])#
#
				thetaHist <- data.frame(xleft = densElem$mids - (bin.size/2), ybotton = densElem$mids * 0, xright = densElem$mids + #
					(bin.size/2), ytop = densElem$counts)#
#
				return(thetaHist)#
#
			}#
#
			distInfo <- lapply(densList, densExt)#
#
		}#
#
		return(distInfo)#
#
	}#
#
	person.plot <- function(distInfo, use.hist, yRange, xRange, dim.lab.side, dim.lab.cex, dim.lab.adj, dims.col, p.cex.lab, p.font.lab, #
		p.lwd, p.las, p.cex.axis, p.font.axis, p.tcl) {#
#
		if (use.hist == FALSE) {#
#
			plot(distInfo, ylim = yRange, xlim = xRange, type = "l", axes = FALSE, ylab = "", xlab = "", cex.lab = p.cex.lab, font.lab = p.font.lab, #
				lwd = p.lwd, col = attr(distInfo, "dim.color"))#
#
		} else {#
			# print( distInfo)#
			#print(attr(distInfo, "dim.color"))#
plot(c(min(distInfo[, 1]), max(distInfo[, 3])), c(min(distInfo[, 2]), max(distInfo[, 4])), ylim = yRange, xlim = c(max(distInfo[, #
				4]), 0), type = "n", axes = FALSE, ylab = "", xlab = "", cex.lab = p.cex.lab, font.lab = p.font.lab, lwd = p.lwd, #
				col = attr(distInfo, "dim.color"))#
#
			rect(distInfo[, 4], distInfo[, 1], distInfo[, 2], distInfo[, 3], col = attr(distInfo, "dim.color"))#
#
		}#
#
		mtext(attr(distInfo, "dim.name"), side = dim.lab.side, line = -1, cex = dim.lab.cex, font = 1, adj = dim.lab.adj)#
#
		box(bty = "c")#
#
	}#
	nD <- ncol(thetas)#
#
	if (is.null(dim.color)) {#
#
		if (use.hist) {#
			dim.color <- "white"#
		}#
		if (!use.hist) {#
			dim.color <- "black"#
		}#
#
	}#
	if (ncol(thetas) > 1 & length(dim.color) == 1) {#
#
		dim.color <- rep(dim.color, ncol(thetas))#
#
	}#
#
	if (is.null(dim.names)) {#
		if (!is.null(names(thetas))) {#
			dim.names <- names(thetas)#
		} else dim.names <- c(paste("Dim", seq(1:nD), sep = ""))#
	}#
	distInfo <- theta.dens(thetas, use.hist, breaks)#
#
	for (i in 1:nD) {#
#
		attr(distInfo[[i]], "dim.name") <- dim.names[i]#
		attr(distInfo[[i]], "dim.color") <- dim.color[i]#
#
	}#
	lapply(distInfo, FUN = person.plot, use.hist = use.hist, yRange = yRange, xRange = xRange, dim.lab.cex = dim.lab.cex, dim.lab.side = dim.lab.side, dim.lab.adj = dim.lab.adj, p.cex.lab = 1.3, p.font.lab = 3, p.lwd = 2, p.las = 1, p.cex.axis = 1.1, p.font.axis = 2, p.tcl = -0.5)#
}
wrightMap("dicotgen2.eap", "dicotgen.shw")
WM.test("wrightMap")
wrightMap("dicotgen2.eap", "dicotgen.shw", type = "deltas", new.quartz = TRUE)
personPlot <- function(thetas, yRange, xRange, use.hist = TRUE, breaks = "FD", dim.color = NULL, dim.names = NULL, dim.lab.cex = 0.6,dim.lab.side = 3,dim.lab.adj = 0.5,...) {#
#
	theta.dens <- function(thetas, use.hist, breaks) {#
#
		if (use.hist == FALSE) {#
#
			densList <- apply(thetas, 2, density, na.rm = TRUE)#
#
			densExt <- function(densElem) {#
#
				xDim <- densElem["y"][[1]]#
				yDim <- densElem["x"][[1]]#
#
				xDim <- xDim/max(xDim)#
#
				densInfo <- cbind(xDim, yDim)#
				return(densInfo)#
#
			}#
#
			distInfo <- lapply(densList, densExt)#
#
		} else {#
#
			densList <- apply(thetas, 2, hist, plot = FALSE, breaks = breaks)#
			densExt <- function(densElem) {#
#
				bin.size <- abs(densElem$breaks[1] - densElem$breaks[2])#
#
				thetaHist <- data.frame(xleft = densElem$mids - (bin.size/2), ybotton = densElem$mids * 0, xright = densElem$mids + #
					(bin.size/2), ytop = densElem$counts)#
#
				return(thetaHist)#
#
			}#
#
			distInfo <- lapply(densList, densExt)#
#
		}#
#
		return(distInfo)#
#
	}#
#
	person.plot <- function(distInfo, use.hist, yRange, xRange, dim.lab.side, dim.lab.cex, dim.lab.adj, dims.col, p.cex.lab, p.font.lab, #
		p.lwd, p.las, p.cex.axis, p.font.axis, p.tcl) {#
#
		if (use.hist == FALSE) {#
#
			plot(distInfo, ylim = yRange, xlim = xRange, type = "l", axes = FALSE, ylab = "", xlab = "", cex.lab = p.cex.lab, font.lab = p.font.lab, #
				lwd = p.lwd, col = attr(distInfo, "dim.color"))#
#
		} else {#
			# print( distInfo)#
			#print(attr(distInfo, "dim.color"))#
plot(c(min(distInfo[, 1]), max(distInfo[, 3])), c(min(distInfo[, 2]), max(distInfo[, 4])), ylim = yRange, xlim = c(max(distInfo[, #
				4]), 0), type = "n", axes = FALSE, ylab = "", xlab = "", cex.lab = p.cex.lab, font.lab = p.font.lab, lwd = p.lwd, #
				col = attr(distInfo, "dim.color"))#
#
			rect(distInfo[, 4], distInfo[, 1], distInfo[, 2], distInfo[, 3], col = attr(distInfo, "dim.color"))#
#
		}#
#
		mtext(attr(distInfo, "dim.name"), side = dim.lab.side, line = -1, cex = dim.lab.cex, font = 1, adj = dim.lab.adj)#
#
		box(bty = "c")#
#
	}#
	nD <- ncol(thetas)#
#
	if (is.null(dim.color)) {#
#
		if (use.hist) {#
			dim.color <- "white"#
		}#
		if (!use.hist) {#
			dim.color <- "black"#
		}#
#
	}#
	if (ncol(thetas) > 1 & length(dim.color) == 1) {#
#
		dim.color <- rep(dim.color, ncol(thetas))#
#
	}#
#
	if (is.null(dim.names)) {#
		if (!is.null(names(thetas))) {#
			dim.names <- names(thetas)#
		} else dim.names <- c(paste("Dim", seq(1:nD), sep = ""))#
	}#
	distInfo <- theta.dens(thetas, use.hist, breaks)#
#
	for (i in 1:nD) {#
#
		attr(distInfo[[i]], "dim.name") <- dim.names[i]#
		attr(distInfo[[i]], "dim.color") <- dim.color[i]#
#
	}#
	lapply(distInfo, FUN = person.plot, use.hist = use.hist, yRange = yRange, xRange = xRange, dim.lab.cex = dim.lab.cex, dim.lab.side = dim.lab.side, dim.lab.adj = dim.lab.adj, p.cex.lab = 1.3, p.font.lab = 3, p.lwd = 2, p.las = 1, p.cex.axis = 1.1, p.font.axis = 2, p.tcl = -0.5)#
}
wrightMap("dicotgen2.eap", "dicotgen.shw", type = "deltas", new.quartz = TRUE)
WM.test("wrightMap")
wrightMap("dim2b.eap", "UE CS_V_P LLCS_shw.shw", label.items = 1:140, #
    label.items.row = 3, new.quartz = TRUE)
wrightMap <- function(thetas, thresholds = NULL, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, #
	  main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents",      #
    min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	# Preparing Data#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, #
			c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, #
			c.params = c.params)#
	}#
#
	thetas <- as.matrix(thetas)#
	thr <- as.matrix(thresholds)#
#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
	if (is.null(min.l)) {#
#
		min.l <- min(c(min.theta, thr), na.rm = TRUE) - min.logit.pad#
#
	}#
#
	if (is.null(max.l)) {#
#
		max.l <- max(c(max.theta, thr), na.rm = TRUE) + max.logit.pad#
#
	}#
#
	yRange <- c(min.l, max.l)#
	xRange <- c(1, 0)#
#
	item.side <- round((nD * item.prop)/(1 - item.prop))#
	layout.wm <- c(seq(1:nD), rep(nD + 1, item.side))#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
#
	par(oma = op$oma + c(0, 5, 0, 5))#
#
	layout(matrix(layout.wm, nrow = 1), widths = c(rep((1 - item.prop)/nD, nD), rep(item.prop/item.side, item.side)), heights = 0.8)#
	par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	par(mgp = c(op$mar[1] - 2.4, 1, 0))#
#
	personPlot(thetas, yRange, xRange,...)#
	itemPlot(thr,yRange,...)#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
#
}
wrightMap("dim2b.eap", "UE CS_V_P LLCS_shw.shw", label.items = 1:140, #
    label.items.row = 3, new.quartz = TRUE)
WM.test("wrightMap")
wrightMap("dim2b.eap", "UE CS_V_P LLCS_shw.shw", label.items = 1:140, #
    label.items.row = 3, new.quartz = TRUE)
wrightMap("dim2b.eap", "UE CS_V_P LLCS_shw.shw", label.items = 1:140, #
    label.items.row = 3, new.quartz = TRUE,item.plot = "hist")
setwd("/Users/Rebecca/Berkeley/David package/wrightmap/R/")
setwd("/Users/Rebecca/Berkeley/David package/wrightmap/R/")#
#
source("wrightMap.R")#
source("CQmodel.R")#
source("print.CQmodel.R")#
#
source("itemData.R")#
source("itemData.default.R")#
source("itemData.character.R")#
source("itemData.CQmodel.R")#
#
source("personData.R")#
source("personData.default.R")#
source("personData.character.R")#
source("personData.CQmodel.R")#
#
source("make.thresholds.R")#
source("make.thresholds.default.R")#
source("make.thresholds.character.R")#
source("make.thresholds.CQmodel.R")#
#
source("make.deltas.R")#
source("make.deltas.default.R")#
source("make.deltas.character.R")#
source("make.deltas.CQmodel.R")#
#
source("itemModern.R")#
source("itemClassic.R")#
source("itemHist.R")#
#
source("personHist.R")#
source("personDens.R")
setwd("/Users/Rebecca/Berkeley/David package/wrightmap/R/")#
#
source("wrightMap.R")#
source("CQmodel.R")#
source("print.CQmodel.R")#
#
source("itemData.R")#
source("itemData.default.R")#
source("itemData.character.R")#
source("itemData.CQmodel.R")#
#
source("personData.R")#
source("personData.default.R")#
source("personData.character.R")#
source("personData.CQmodel.R")#
#
source("make.thresholds.R")#
source("make.thresholds.default.R")#
source("make.thresholds.character.R")#
source("make.thresholds.CQmodel.R")#
#
source("make.deltas.R")#
source("make.deltas.default.R")#
source("make.deltas.character.R")#
source("make.deltas.CQmodel.R")#
#
source("itemModern.R")#
source("itemClassic.R")#
source("itemHist.R")#
#
source("personHist.R")#
source("personDens.R")
rasch.sim.thetas <- rnorm(1000)#
rasch.sim.thresholds <- runif(10, -3, 3)#
wrightMap( rasch.sim.thetas, rasch.sim.thresholds)
source("wrightMap.R")
rasch.sim.thetas <- rnorm(1000)#
rasch.sim.thresholds <- runif(10, -3, 3)#
wrightMap( rasch.sim.thetas, rasch.sim.thresholds)
item.side
try <- function(x) {do.call(x)}
try1 <- function(x) {do.call(x)}
setwd("/Users/Rebecca/Berkeley/David package/wrightmap/R/")#
#
source("wrightMap.R")#
source("CQmodel.R")#
source("print.CQmodel.R")#
#
source("itemData.R")#
source("itemData.default.R")#
source("itemData.character.R")#
source("itemData.CQmodel.R")#
#
source("personData.R")#
source("personData.default.R")#
source("personData.character.R")#
source("personData.CQmodel.R")#
#
source("make.thresholds.R")#
source("make.thresholds.default.R")#
source("make.thresholds.character.R")#
source("make.thresholds.CQmodel.R")#
#
source("make.deltas.R")#
source("make.deltas.default.R")#
source("make.deltas.character.R")#
source("make.deltas.CQmodel.R")#
#
source("itemModern.R")#
source("itemClassic.R")#
source("itemHist.R")#
#
source("personHist.R")#
source("personDens.R")
try1 <- function(x) {do.call(x)}
try1 <- function(x,n) {do.call(x,list(n))}
try1(runif,5)
try1 <- function(x = runif,n) {do.call(x,list(n))}
try1(n= 5)
rasch.sim.thetas <- rnorm(1000)#
rasch.sim.thresholds <- runif(10, -3, 3)#
wrightMap( rasch.sim.thetas, rasch.sim.thresholds)
source("wrightMap.R")
rasch.sim.thetas <- rnorm(1000)#
rasch.sim.thresholds <- runif(10, -3, 3)#
wrightMap( rasch.sim.thetas, rasch.sim.thresholds)
rasch.sim.thetas <- rnorm(1000)#
rasch.sim.thresholds <- runif(10, -3, 3)#
wrightMap( rasch.sim.thetas, rasch.sim.thresholds)
rasch.sim.thetas <- rnorm(1000)#
rasch.sim.thresholds <- runif(10, -3, 3)#
wrightMap( rasch.sim.thetas, rasch.sim.thresholds,item.side = itemClassic)
rasch.sim.thetas <- rnorm(1000)#
rasch.sim.thresholds <- runif(10, -3, 3)#
wrightMap( rasch.sim.thetas, rasch.sim.thresholds,item.side = itemHist)
rasch.sim.thetas <- rnorm(1000)#
rasch.sim.thresholds <- runif(10, -3, 3)#
wrightMap( rasch.sim.thetas, rasch.sim.thresholds,item.side = itemHist,person.side = personDens)
rasch.sim.thetas <- rnorm(1000)#
rasch.sim.thresholds <- runif(10, -3, 3)#
wrightMap( rasch.sim.thetas, rasch.sim.thresholds,item.side = itemHist,person.side = "personDens")
setwd("/Users/Rebecca/Berkeley/David package/wrightmap/R/")#
#
source("wrightMap.R")#
source("CQmodel.R")#
source("print.CQmodel.R")#
#
source("itemData.R")#
source("itemData.default.R")#
source("itemData.character.R")#
source("itemData.CQmodel.R")#
#
source("personData.R")#
source("personData.default.R")#
source("personData.character.R")#
source("personData.CQmodel.R")#
#
source("make.thresholds.R")#
source("make.thresholds.default.R")#
source("make.thresholds.character.R")#
source("make.thresholds.CQmodel.R")#
#
source("make.deltas.R")#
source("make.deltas.default.R")#
source("make.deltas.character.R")#
source("make.deltas.CQmodel.R")#
#
source("itemModern.R")#
source("itemClassic.R")#
source("itemHist.R")#
#
source("personHist.R")#
source("personDens.R")
itemModern( rasch.sim.thresholds)
itemModern(as.matrix(rasch.sim.thresholds))
itemModern(as.matrix(rasch.sim.thresholds))
setwd("/Users/Rebecca/Berkeley/David package/wrightmap/R/")#
#
source("wrightMap.R")#
source("CQmodel.R")#
source("print.CQmodel.R")#
#
source("itemData.R")#
source("itemData.default.R")#
source("itemData.character.R")#
source("itemData.CQmodel.R")#
#
source("personData.R")#
source("personData.default.R")#
source("personData.character.R")#
source("personData.CQmodel.R")#
#
source("make.thresholds.R")#
source("make.thresholds.default.R")#
source("make.thresholds.character.R")#
source("make.thresholds.CQmodel.R")#
#
source("make.deltas.R")#
source("make.deltas.default.R")#
source("make.deltas.character.R")#
source("make.deltas.CQmodel.R")#
#
source("itemModern.R")#
source("itemClassic.R")#
source("itemHist.R")#
#
source("personHist.R")#
source("personDens.R")
itemModern( rasch.sim.thresholds)
itemClassic( rasch.sim.thresholds)
itemClassic <- function(thr, yRange = NULL, axis.items = "Items") {#
	Nbins <- function(x) {#
#
		itemRange <- range(x)#
		round((itemRange[2] - itemRange[1])/0.2, 0)#
#
		# return(seq(from = itemRange[1], to = itemRange[2], by = .1))#
		return(seq(from = itemRange[1], to = itemRange[2], length.out = 25))#
#
	}#
#
	binItems <- function(level, labelMat, cutMat) {#
#
		paste(sort(labelMat[cutMat == level]), collapse = " | ")#
#
	}#
	thr <- as.matrix(thr)#
	nI <- dim(thr)[1]#
	nL <- dim(thr)[2]#
	if(is.null(yRange))#
		yRange <- c(min(thr),max(thr))#
#
	plot(seq(1:nI), rep(0, nI), type = "n", axes = FALSE, xlab = axis.items, ylab = "", ylim = yRange, xlim = c(0.5, nI + #
		0.5), cex.lab = 1.3, font.lab = 3)#
#
	box(bty = "o")#
#
	usr <- par("usr")#
#
	axis(4, las = 1, cex.axis = 1.2, font.axis = 2)#
#
	par(mgp = c(0, 0.2, 0))#
	item.hist <- hist(thr, plot = FALSE, breaks = Nbins(yRange))#
#
	itemBinLocations <- item.hist$mids#
	bin.size <- abs(item.hist$breaks[1] - item.hist$breaks[2])#
	item.hist <- data.frame(xleft = item.hist$mids - (bin.size/2), ybottom = item.hist$mids * 0, xright = item.hist$mids + #
		(bin.size/2), ytop = item.hist$counts)#
#
	item.labels <- matrix(rep(formatC(1:nI, digits = 1, format = "d", flag = "0"), nL), ncol = nL)#
	item.labels <- t(apply(item.labels, 1, paste, c(1:nL), sep = "."))#
#
	binnedItems <- matrix(cut(thr, breaks = c(item.hist[, 1], tail(item.hist[, 3], 1)), labels = c(1:length(item.hist[, #
		1] + 1))), ncol = nL)#
#
	binnedList <- unlist(lapply(1:length(itemBinLocations), binItems, item.labels, binnedItems))#
#
	text(cbind(0, itemBinLocations), labels = binnedList, pos = 4, offset = 1 * 20/nI)#
#
}
itemClassic( rasch.sim.thresholds)
itemHist( rasch.sim.thresholds)
personHist(rasch.sim.thetas)
source("personHist.R")#
source("personDens.R")
personHist(rasch.sim.thetas)
source("personHist.R")
personHist(rasch.sim.thetas)
personDens(rasch.sim.thetas)
source("personDens.R")
personDens(rasch.sim.thetas)
runif(n = 5,n = 4)
#install_github("david-ti/WrightMap",ref="dev")#
#install_github("david-ti/WrightMap",ref="kidmapGUI")#
#setwd("/Users/Rebecca/Dropbox/WrightMap/Test files")#
#setwd("/Users/Rebecca/Berkeley/David package/wrightmap/inst/extdata")#
#
testme <- function(example,tags,verbose) {#
	ex.call <- example$call#
	ex.tags <- example$tags#
	if(all(tags %in% ex.tags)) {#
	res <- tryCatch(eval(ex.call),error = function(e) FALSE)#
	if(class(res) == "logical" || verbose)#
		print(ex.call)#
		}#
}#
#
WM.test <- function(tags = "base",verbose = FALSE,...) {#
	examples <- list(#
	list(call = call("CQmodel","dicotgen2.eap","dicotgen.shw"),tags = c("base","CQmodel","dif","CQ2","1dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","dim2b.shw"),tags = c("base","CQmodel","dif","CQ2","2dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","SRCal11-S.eap","SRCal11-S.shw"),tags = c("base","CQmodel","step","CQ2","1dim","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","UE CS_V_P LLCS_shw.shw"),tags = c("base","CQmodel","courtney","imported","noGIN"))#
	,list(call = call("CQmodel","CQ3examples/ex4a.mle","CQ3examples/ex4a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","testlet2.eap","testlet2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim2b.eap","CQ3examples/dim2b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M09s.eap","M09s.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","LangFull.eap","LangFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","MathFull.eap","MathFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","DaD.eap","DaD.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","InI.eap","InI.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CT2.eap","CT2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","cdmw.eap","cdmw.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","6dim.mle","6dim.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim3b.eap","CQ3examples/dim3b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex1.mle","CQ3examples/ex1.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex3a.wle","CQ3examples/ex3a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2.eap","CQ3examples/ex2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2a.eap","CQ3examples/ex2a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2b.eap","CQ3examples/ex2b.shw"),tags = c("base","CQmodel")) #
	,list(call = call("CQmodel","CQ3examples/ex2c.eap","CQ3examples/ex2c.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M12_MD_3A.eap","M12_MD_3A.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3B.eap","M12_MD_3B.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_2.eap","M12_MD_2.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12int_UD_3.eap","M12int_UD_3.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","CTime_EX.whole.eap","CTime_EX.whole.shw"), tags = c("base","CQmodel","jinho","GIN"))#
	,list(call = do.call(call,"wrightMap",list("dicotgen2.eap","dicotgen.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","sample"))#
	,list(call = do.call(call,"wrightMap",list("dim2b.eap","dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("SRCal11-S.eap","SRCal11-S.shw", show.thr.lab = FALSE,...)),tags = c("base","wrightMap","sample","eqn"))#
	,list(call = do.call(call,"wrightMap",list("dim2b.eap","UE CS_V_P LLCS_shw.shw",label.items = c(1:140),label.items.row=3,...)),tags = c("base","wrightMap","sample"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",min.logit.pad = -28,...)),tags = c("base","wrightMap","sample","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",item.table="rater",interactions = "rater*topic",step.table = "topic",...)),tags = c("base","wrightMap","sample","eqn","CQex"))#
	,list(call = do.call(call,"wrightMap",list("testlet2.eap","testlet2.shw",item.prop=.5, label.items.row = 2,...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dim2b.eap","CQ3examples/dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("M09s.eap","M09s.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("LangFull.eap","LangFull.shw", thr.lab.text = 1:82, label.items.row = 2,label.items=c(1:82),...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("MathFull.eap","MathFull.shw", thr.lab.text = 1:78, label.items.row = 3,label.items=c(1:78),...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("DaD.eap","DaD.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("InI.eap","InI.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("CT2.eap","CT2.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("cdmw.eap","cdmw.shw",label.items.row=2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("6dim.mle","6dim.shw", label.items.row = 3,label.items=c(1:96),...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dim3b.eap","CQ3examples/dim3b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex1.mle","CQ3examples/ex1.shw",...)),tags = c("base","wrightMap","sample","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex3a.wle","CQ3examples/ex3a.shw",...)),tags = c("base","wrightMap","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/M10FC.eap","CQ3examples/M10FC.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2.eap","CQ3examples/ex2.shw",...)),tags = c("base","wrightMap","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2a.eap","CQ3examples/ex2a.shw",#
	,thr.lab.text = matrix(c(#
							2,3,NA,#
							1,2,3,#
							1,2,3,#
							1,3,NA,#
							1,2,3,#
							1,2,NA,#
							1,2,3,#
							1,2,3),byrow = TRUE,ncol = 3),...)),tags = c("base","wrightMap","sample","mixedpoly","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2b.eap","CQ3examples/ex2b.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","CQex")) #
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2c.eap","CQ3examples/ex2c.shw",label.items.row=2,...),tags = c("base","wrightMap","CQex"))#
	,list(call = do.call(call,"wrightMap",list("M12_MD_3A.eap","M12_MD_3A.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("M12_MD_3B.eap","M12_MD_3B.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("M12_MD_3C.eap","M12_MD_3C.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah"))#
	,list(call = do.call(call,"wrightMap",list("M12_MD_2.eap","M12_MD_2.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("M12int_UD_3.eap","M12int_UD_3.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah","sample"))#
	,list(call = do.call(call,"wrightMap",list("CTime_EX.whole.eap","CTime_EX.whole.shw",label.items.srt=90,...)), tags = c("base","wrightMap","jinho"))#
	)#
	#print('FAILED:')#
	lapply(examples,testme,tags,verbose)#
	print("end of run")#
#
}
#install_github("david-ti/WrightMap",ref="dev")#
#install_github("david-ti/WrightMap",ref="kidmapGUI")#
#setwd("/Users/Rebecca/Dropbox/WrightMap/Test files")#
#setwd("/Users/Rebecca/Berkeley/David package/wrightmap/inst/extdata")#
#
testme <- function(example,tags,verbose) {#
	ex.call <- example$call#
	ex.tags <- example$tags#
	if(all(tags %in% ex.tags)) {#
	res <- tryCatch(eval(ex.call),error = function(e) FALSE)#
	if(class(res) == "logical" || verbose)#
		print(ex.call)#
		}#
}#
#
WM.test <- function(tags = "base",verbose = FALSE,...) {#
	examples <- list(#
	list(call = call("CQmodel","dicotgen2.eap","dicotgen.shw"),tags = c("base","CQmodel","dif","CQ2","1dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","dim2b.shw"),tags = c("base","CQmodel","dif","CQ2","2dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","SRCal11-S.eap","SRCal11-S.shw"),tags = c("base","CQmodel","step","CQ2","1dim","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","UE CS_V_P LLCS_shw.shw"),tags = c("base","CQmodel","courtney","imported","noGIN"))#
	,list(call = call("CQmodel","CQ3examples/ex4a.mle","CQ3examples/ex4a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","testlet2.eap","testlet2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim2b.eap","CQ3examples/dim2b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M09s.eap","M09s.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","LangFull.eap","LangFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","MathFull.eap","MathFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","DaD.eap","DaD.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","InI.eap","InI.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CT2.eap","CT2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","cdmw.eap","cdmw.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","6dim.mle","6dim.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim3b.eap","CQ3examples/dim3b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex1.mle","CQ3examples/ex1.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex3a.wle","CQ3examples/ex3a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2.eap","CQ3examples/ex2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2a.eap","CQ3examples/ex2a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2b.eap","CQ3examples/ex2b.shw"),tags = c("base","CQmodel")) #
	,list(call = call("CQmodel","CQ3examples/ex2c.eap","CQ3examples/ex2c.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M12_MD_3A.eap","M12_MD_3A.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3B.eap","M12_MD_3B.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_2.eap","M12_MD_2.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12int_UD_3.eap","M12int_UD_3.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","CTime_EX.whole.eap","CTime_EX.whole.shw"), tags = c("base","CQmodel","jinho","GIN"))#
	,list(call = do.call(call,"wrightMap",list("dicotgen2.eap","dicotgen.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","sample"))#
	,list(call = do.call(call,"wrightMap",list("dim2b.eap","dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("SRCal11-S.eap","SRCal11-S.shw", show.thr.lab = FALSE,...)),tags = c("base","wrightMap","sample","eqn"))#
	,list(call = do.call(call,"wrightMap",list("dim2b.eap","UE CS_V_P LLCS_shw.shw",label.items = c(1:140),label.items.row=3,...)),tags = c("base","wrightMap","sample"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",min.logit.pad = -28,...)),tags = c("base","wrightMap","sample","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",item.table="rater",interactions = "rater*topic",step.table = "topic",...)),tags = c("base","wrightMap","sample","eqn","CQex"))#
	,list(call = do.call(call,"wrightMap",list("testlet2.eap","testlet2.shw",item.prop=.5, label.items.row = 2,...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dim2b.eap","CQ3examples/dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("M09s.eap","M09s.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("LangFull.eap","LangFull.shw", thr.lab.text = 1:82, label.items.row = 2,label.items=c(1:82),...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("MathFull.eap","MathFull.shw", thr.lab.text = 1:78, label.items.row = 3,label.items=c(1:78),...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("DaD.eap","DaD.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("InI.eap","InI.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("CT2.eap","CT2.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("cdmw.eap","cdmw.shw",label.items.row=2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("6dim.mle","6dim.shw", label.items.row = 3,label.items=c(1:96),...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dim3b.eap","CQ3examples/dim3b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex1.mle","CQ3examples/ex1.shw",...)),tags = c("base","wrightMap","sample","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex3a.wle","CQ3examples/ex3a.shw",...)),tags = c("base","wrightMap","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/M10FC.eap","CQ3examples/M10FC.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2.eap","CQ3examples/ex2.shw",...)),tags = c("base","wrightMap","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2a.eap","CQ3examples/ex2a.shw",#
	,thr.lab.text = matrix(c(#
							2,3,NA,#
							1,2,3,#
							1,2,3,#
							1,3,NA,#
							1,2,3,#
							1,2,NA,#
							1,2,3,#
							1,2,3),byrow = TRUE,ncol = 3),...)),tags = c("base","wrightMap","sample","mixedpoly","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2b.eap","CQ3examples/ex2b.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","CQex")) #
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2c.eap","CQ3examples/ex2c.shw",label.items.row=2,...),tags = c("base","wrightMap","CQex"))#
	,list(call = do.call(call,"wrightMap",list("M12_MD_3A.eap","M12_MD_3A.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("M12_MD_3B.eap","M12_MD_3B.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("M12_MD_3C.eap","M12_MD_3C.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah"))#
	,list(call = do.call(call,"wrightMap",list("M12_MD_2.eap","M12_MD_2.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("M12int_UD_3.eap","M12int_UD_3.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah","sample"))#
	,list(call = do.call(call,"wrightMap",list("CTime_EX.whole.eap","CTime_EX.whole.shw",label.items.srt=90,...)), tags = c("base","wrightMap","jinho"))#
	)#
	lapply(examples,testme,tags,verbose)#
	print("end of run")#
#
}
#install_github("david-ti/WrightMap",ref="dev")#
#install_github("david-ti/WrightMap",ref="kidmapGUI")#
#setwd("/Users/Rebecca/Dropbox/WrightMap/Test files")#
#setwd("/Users/Rebecca/Berkeley/David package/wrightmap/inst/extdata")#
#
testme <- function(example,tags,verbose) {#
	ex.call <- example$call#
	ex.tags <- example$tags#
	if(all(tags %in% ex.tags)) {#
	res <- tryCatch(eval(ex.call),error = function(e) FALSE)#
	if(class(res) == "logical" || verbose)#
		print(ex.call)#
		}#
}#
#
WM.test <- function(tags = "base",verbose = FALSE,...) {#
	examples <- list(#
	list(call = call("CQmodel","dicotgen2.eap","dicotgen.shw"),tags = c("base","CQmodel","dif","CQ2","1dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","dim2b.shw"),tags = c("base","CQmodel","dif","CQ2","2dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","SRCal11-S.eap","SRCal11-S.shw"),tags = c("base","CQmodel","step","CQ2","1dim","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","UE CS_V_P LLCS_shw.shw"),tags = c("base","CQmodel","courtney","imported","noGIN"))#
	,list(call = call("CQmodel","CQ3examples/ex4a.mle","CQ3examples/ex4a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","testlet2.eap","testlet2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim2b.eap","CQ3examples/dim2b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M09s.eap","M09s.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","LangFull.eap","LangFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","MathFull.eap","MathFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","DaD.eap","DaD.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","InI.eap","InI.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CT2.eap","CT2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","cdmw.eap","cdmw.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","6dim.mle","6dim.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim3b.eap","CQ3examples/dim3b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex1.mle","CQ3examples/ex1.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex3a.wle","CQ3examples/ex3a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2.eap","CQ3examples/ex2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2a.eap","CQ3examples/ex2a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2b.eap","CQ3examples/ex2b.shw"),tags = c("base","CQmodel")) #
	,list(call = call("CQmodel","CQ3examples/ex2c.eap","CQ3examples/ex2c.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M12_MD_3A.eap","M12_MD_3A.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3B.eap","M12_MD_3B.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_2.eap","M12_MD_2.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12int_UD_3.eap","M12int_UD_3.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","CTime_EX.whole.eap","CTime_EX.whole.shw"), tags = c("base","CQmodel","jinho","GIN"))#
	# ,list(call = do.call(call,"wrightMap",list("dicotgen2.eap","dicotgen.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","sample"))#
	# ,list(call = do.call(call,"wrightMap",list("dim2b.eap","dim2b.shw",...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("SRCal11-S.eap","SRCal11-S.shw", show.thr.lab = FALSE,...)),tags = c("base","wrightMap","sample","eqn"))#
	# ,list(call = do.call(call,"wrightMap",list("dim2b.eap","UE CS_V_P LLCS_shw.shw",label.items = c(1:140),label.items.row=3,...)),tags = c("base","wrightMap","sample"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",min.logit.pad = -28,...)),tags = c("base","wrightMap","sample","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",item.table="rater",interactions = "rater*topic",step.table = "topic",...)),tags = c("base","wrightMap","sample","eqn","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("testlet2.eap","testlet2.shw",item.prop=.5, label.items.row = 2,...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw",...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/dim2b.eap","CQ3examples/dim2b.shw",...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("M09s.eap","M09s.shw",...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("LangFull.eap","LangFull.shw", thr.lab.text = 1:82, label.items.row = 2,label.items=c(1:82),...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("MathFull.eap","MathFull.shw", thr.lab.text = 1:78, label.items.row = 3,label.items=c(1:78),...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("DaD.eap","DaD.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("InI.eap","InI.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("CT2.eap","CT2.shw",...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("cdmw.eap","cdmw.shw",label.items.row=2,...)),tags = c("base","wrightMap","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("6dim.mle","6dim.shw", label.items.row = 3,label.items=c(1:96),...)),tags = c("base","wrightMap","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/dim3b.eap","CQ3examples/dim3b.shw",...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex1.mle","CQ3examples/ex1.shw",...)),tags = c("base","wrightMap","sample","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex3a.wle","CQ3examples/ex3a.shw",...)),tags = c("base","wrightMap","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/M10FC.eap","CQ3examples/M10FC.shw",...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2.eap","CQ3examples/ex2.shw",...)),tags = c("base","wrightMap","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2a.eap","CQ3examples/ex2a.shw",#
	# ,thr.lab.text = matrix(c(#
							# 2,3,NA,#
							# 1,2,3,#
							# 1,2,3,#
							# 1,3,NA,#
							# 1,2,3,#
							# 1,2,NA,#
							# 1,2,3,#
							# 1,2,3),byrow = TRUE,ncol = 3),...)),tags = c("base","wrightMap","sample","mixedpoly","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2b.eap","CQ3examples/ex2b.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","CQex")) #
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2c.eap","CQ3examples/ex2c.shw",label.items.row=2,...),tags = c("base","wrightMap","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3A.eap","M12_MD_3A.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3B.eap","M12_MD_3B.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3C.eap","M12_MD_3C.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_2.eap","M12_MD_2.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12int_UD_3.eap","M12int_UD_3.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah","sample"))#
	# ,list(call = do.call(call,"wrightMap",list("CTime_EX.whole.eap","CTime_EX.whole.shw",label.items.srt=90,...)), tags = c("base","wrightMap","jinho"))#
	# )#
	lapply(examples,testme,tags,verbose)#
	print("end of run")#
#
}
#install_github("david-ti/WrightMap",ref="dev")#
#install_github("david-ti/WrightMap",ref="kidmapGUI")#
#setwd("/Users/Rebecca/Dropbox/WrightMap/Test files")#
#setwd("/Users/Rebecca/Berkeley/David package/wrightmap/inst/extdata")#
#
testme <- function(example,tags,verbose) {#
	ex.call <- example$call#
	ex.tags <- example$tags#
	if(all(tags %in% ex.tags)) {#
	res <- tryCatch(eval(ex.call),error = function(e) FALSE)#
	if(class(res) == "logical" || verbose)#
		print(ex.call)#
		}#
}#
#
WM.test <- function(tags = "base",verbose = FALSE,...) {#
	examples <- list(#
	list(call = call("CQmodel","dicotgen2.eap","dicotgen.shw"),tags = c("base","CQmodel","dif","CQ2","1dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","dim2b.shw"),tags = c("base","CQmodel","dif","CQ2","2dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","SRCal11-S.eap","SRCal11-S.shw"),tags = c("base","CQmodel","step","CQ2","1dim","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","UE CS_V_P LLCS_shw.shw"),tags = c("base","CQmodel","courtney","imported","noGIN"))#
	,list(call = call("CQmodel","CQ3examples/ex4a.mle","CQ3examples/ex4a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","testlet2.eap","testlet2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim2b.eap","CQ3examples/dim2b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M09s.eap","M09s.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","LangFull.eap","LangFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","MathFull.eap","MathFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","DaD.eap","DaD.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","InI.eap","InI.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CT2.eap","CT2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","cdmw.eap","cdmw.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","6dim.mle","6dim.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim3b.eap","CQ3examples/dim3b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex1.mle","CQ3examples/ex1.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex3a.wle","CQ3examples/ex3a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2.eap","CQ3examples/ex2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2a.eap","CQ3examples/ex2a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2b.eap","CQ3examples/ex2b.shw"),tags = c("base","CQmodel")) #
	,list(call = call("CQmodel","CQ3examples/ex2c.eap","CQ3examples/ex2c.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M12_MD_3A.eap","M12_MD_3A.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3B.eap","M12_MD_3B.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_2.eap","M12_MD_2.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12int_UD_3.eap","M12int_UD_3.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","CTime_EX.whole.eap","CTime_EX.whole.shw"), tags = c("base","CQmodel","jinho","GIN"))#
	# ,list(call = do.call(call,"wrightMap",list("dicotgen2.eap","dicotgen.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","sample"))#
	# ,list(call = do.call(call,"wrightMap",list("dim2b.eap","dim2b.shw",...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("SRCal11-S.eap","SRCal11-S.shw", show.thr.lab = FALSE,...)),tags = c("base","wrightMap","sample","eqn"))#
	# ,list(call = do.call(call,"wrightMap",list("dim2b.eap","UE CS_V_P LLCS_shw.shw",label.items = c(1:140),label.items.row=3,...)),tags = c("base","wrightMap","sample"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",min.logit.pad = -28,...)),tags = c("base","wrightMap","sample","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",item.table="rater",interactions = "rater*topic",step.table = "topic",...)),tags = c("base","wrightMap","sample","eqn","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("testlet2.eap","testlet2.shw",item.prop=.5, label.items.row = 2,...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw",...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/dim2b.eap","CQ3examples/dim2b.shw",...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("M09s.eap","M09s.shw",...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("LangFull.eap","LangFull.shw", thr.lab.text = 1:82, label.items.row = 2,label.items=c(1:82),...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("MathFull.eap","MathFull.shw", thr.lab.text = 1:78, label.items.row = 3,label.items=c(1:78),...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("DaD.eap","DaD.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("InI.eap","InI.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("CT2.eap","CT2.shw",...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("cdmw.eap","cdmw.shw",label.items.row=2,...)),tags = c("base","wrightMap","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("6dim.mle","6dim.shw", label.items.row = 3,label.items=c(1:96),...)),tags = c("base","wrightMap","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/dim3b.eap","CQ3examples/dim3b.shw",...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex1.mle","CQ3examples/ex1.shw",...)),tags = c("base","wrightMap","sample","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex3a.wle","CQ3examples/ex3a.shw",...)),tags = c("base","wrightMap","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/M10FC.eap","CQ3examples/M10FC.shw",...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2.eap","CQ3examples/ex2.shw",...)),tags = c("base","wrightMap","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2a.eap","CQ3examples/ex2a.shw",#
	# ,thr.lab.text = matrix(c(#
							# 2,3,NA,#
							# 1,2,3,#
							# 1,2,3,#
							# 1,3,NA,#
							# 1,2,3,#
							# 1,2,NA,#
							# 1,2,3,#
							# 1,2,3),byrow = TRUE,ncol = 3),...)),tags = c("base","wrightMap","sample","mixedpoly","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2b.eap","CQ3examples/ex2b.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","CQex")) #
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2c.eap","CQ3examples/ex2c.shw",label.items.row=2,...),tags = c("base","wrightMap","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3A.eap","M12_MD_3A.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3B.eap","M12_MD_3B.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3C.eap","M12_MD_3C.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_2.eap","M12_MD_2.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12int_UD_3.eap","M12int_UD_3.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah","sample"))#
	# ,list(call = do.call(call,"wrightMap",list("CTime_EX.whole.eap","CTime_EX.whole.shw",label.items.srt=90,...)), tags = c("base","wrightMap","jinho"))#
	# )#
	#lapply(examples,testme,tags,verbose)#
	print("end of run")#
#
}
#install_github("david-ti/WrightMap",ref="dev")#
#install_github("david-ti/WrightMap",ref="kidmapGUI")#
#setwd("/Users/Rebecca/Dropbox/WrightMap/Test files")#
#setwd("/Users/Rebecca/Berkeley/David package/wrightmap/inst/extdata")#
#
testme <- function(example,tags,verbose) {#
	ex.call <- example$call#
	ex.tags <- example$tags#
	if(all(tags %in% ex.tags)) {#
	res <- tryCatch(eval(ex.call),error = function(e) FALSE)#
	if(class(res) == "logical" || verbose)#
		print(ex.call)#
		}#
}#
#
WM.test <- function(tags = "base",verbose = FALSE,...) {#
	examples <- list(#
	list(call = call("CQmodel","dicotgen2.eap","dicotgen.shw"),tags = c("base","CQmodel","dif","CQ2","1dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","dim2b.shw"),tags = c("base","CQmodel","dif","CQ2","2dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","SRCal11-S.eap","SRCal11-S.shw"),tags = c("base","CQmodel","step","CQ2","1dim","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","UE CS_V_P LLCS_shw.shw"),tags = c("base","CQmodel","courtney","imported","noGIN"))#
	,list(call = call("CQmodel","CQ3examples/ex4a.mle","CQ3examples/ex4a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","testlet2.eap","testlet2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim2b.eap","CQ3examples/dim2b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M09s.eap","M09s.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","LangFull.eap","LangFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","MathFull.eap","MathFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","DaD.eap","DaD.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","InI.eap","InI.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CT2.eap","CT2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","cdmw.eap","cdmw.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","6dim.mle","6dim.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim3b.eap","CQ3examples/dim3b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex1.mle","CQ3examples/ex1.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex3a.wle","CQ3examples/ex3a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2.eap","CQ3examples/ex2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2a.eap","CQ3examples/ex2a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2b.eap","CQ3examples/ex2b.shw"),tags = c("base","CQmodel")) #
	,list(call = call("CQmodel","CQ3examples/ex2c.eap","CQ3examples/ex2c.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M12_MD_3A.eap","M12_MD_3A.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3B.eap","M12_MD_3B.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_2.eap","M12_MD_2.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12int_UD_3.eap","M12int_UD_3.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","CTime_EX.whole.eap","CTime_EX.whole.shw"), tags = c("base","CQmodel","jinho","GIN"))#
	# ,list(call = do.call(call,"wrightMap",list("dicotgen2.eap","dicotgen.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","sample"))#
	# ,list(call = do.call(call,"wrightMap",list("dim2b.eap","dim2b.shw",...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("SRCal11-S.eap","SRCal11-S.shw", show.thr.lab = FALSE,...)),tags = c("base","wrightMap","sample","eqn"))#
	# ,list(call = do.call(call,"wrightMap",list("dim2b.eap","UE CS_V_P LLCS_shw.shw",label.items = c(1:140),label.items.row=3,...)),tags = c("base","wrightMap","sample"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",min.logit.pad = -28,...)),tags = c("base","wrightMap","sample","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",item.table="rater",interactions = "rater*topic",step.table = "topic",...)),tags = c("base","wrightMap","sample","eqn","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("testlet2.eap","testlet2.shw",item.prop=.5, label.items.row = 2,...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw",...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/dim2b.eap","CQ3examples/dim2b.shw",...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("M09s.eap","M09s.shw",...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("LangFull.eap","LangFull.shw", thr.lab.text = 1:82, label.items.row = 2,label.items=c(1:82),...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("MathFull.eap","MathFull.shw", thr.lab.text = 1:78, label.items.row = 3,label.items=c(1:78),...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("DaD.eap","DaD.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("InI.eap","InI.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("CT2.eap","CT2.shw",...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("cdmw.eap","cdmw.shw",label.items.row=2,...)),tags = c("base","wrightMap","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("6dim.mle","6dim.shw", label.items.row = 3,label.items=c(1:96),...)),tags = c("base","wrightMap","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/dim3b.eap","CQ3examples/dim3b.shw",...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex1.mle","CQ3examples/ex1.shw",...)),tags = c("base","wrightMap","sample","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex3a.wle","CQ3examples/ex3a.shw",...)),tags = c("base","wrightMap","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/M10FC.eap","CQ3examples/M10FC.shw",...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2.eap","CQ3examples/ex2.shw",...)),tags = c("base","wrightMap","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2a.eap","CQ3examples/ex2a.shw",#
	# ,thr.lab.text = matrix(c(#
							# 2,3,NA,#
							# 1,2,3,#
							# 1,2,3,#
							# 1,3,NA,#
							# 1,2,3,#
							# 1,2,NA,#
							# 1,2,3,#
							# 1,2,3),byrow = TRUE,ncol = 3),...)),tags = c("base","wrightMap","sample","mixedpoly","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2b.eap","CQ3examples/ex2b.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","CQex")) #
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2c.eap","CQ3examples/ex2c.shw",label.items.row=2,...),tags = c("base","wrightMap","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3A.eap","M12_MD_3A.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3B.eap","M12_MD_3B.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3C.eap","M12_MD_3C.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_2.eap","M12_MD_2.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12int_UD_3.eap","M12int_UD_3.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah","sample"))#
	# ,list(call = do.call(call,"wrightMap",list("CTime_EX.whole.eap","CTime_EX.whole.shw",label.items.srt=90,...)), tags = c("base","wrightMap","jinho"))#
	)#
	lapply(examples,testme,tags,verbose)#
	print("end of run")#
#
}
#install_github("david-ti/WrightMap",ref="dev")#
#install_github("david-ti/WrightMap",ref="kidmapGUI")#
#setwd("/Users/Rebecca/Dropbox/WrightMap/Test files")#
#setwd("/Users/Rebecca/Berkeley/David package/wrightmap/inst/extdata")#
#
testme <- function(example,tags,verbose) {#
	ex.call <- example$call#
	ex.tags <- example$tags#
	if(all(tags %in% ex.tags)) {#
	res <- tryCatch(eval(ex.call),error = function(e) FALSE)#
	if(class(res) == "logical" || verbose)#
		print(ex.call)#
		}#
}#
#
WM.test <- function(tags = "base",verbose = FALSE,...) {#
	examples <- list(#
	list(call = call("CQmodel","dicotgen2.eap","dicotgen.shw"),tags = c("base","CQmodel","dif","CQ2","1dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","dim2b.shw"),tags = c("base","CQmodel","dif","CQ2","2dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","SRCal11-S.eap","SRCal11-S.shw"),tags = c("base","CQmodel","step","CQ2","1dim","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","UE CS_V_P LLCS_shw.shw"),tags = c("base","CQmodel","courtney","imported","noGIN"))#
	,list(call = call("CQmodel","CQ3examples/ex4a.mle","CQ3examples/ex4a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","testlet2.eap","testlet2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim2b.eap","CQ3examples/dim2b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M09s.eap","M09s.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","LangFull.eap","LangFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","MathFull.eap","MathFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","DaD.eap","DaD.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","InI.eap","InI.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CT2.eap","CT2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","cdmw.eap","cdmw.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","6dim.mle","6dim.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim3b.eap","CQ3examples/dim3b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex1.mle","CQ3examples/ex1.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex3a.wle","CQ3examples/ex3a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2.eap","CQ3examples/ex2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2a.eap","CQ3examples/ex2a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2b.eap","CQ3examples/ex2b.shw"),tags = c("base","CQmodel")) #
	,list(call = call("CQmodel","CQ3examples/ex2c.eap","CQ3examples/ex2c.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M12_MD_3A.eap","M12_MD_3A.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3B.eap","M12_MD_3B.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_2.eap","M12_MD_2.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12int_UD_3.eap","M12int_UD_3.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","CTime_EX.whole.eap","CTime_EX.whole.shw"), tags = c("base","CQmodel","jinho","GIN"))#
	,list(call = do.call(call,"wrightMap",list("dicotgen2.eap","dicotgen.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","sample"))#
	,list(call = do.call(call,"wrightMap",list("dim2b.eap","dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("SRCal11-S.eap","SRCal11-S.shw", show.thr.lab = FALSE,...)),tags = c("base","wrightMap","sample","eqn"))#
	,list(call = do.call(call,"wrightMap",list("dim2b.eap","UE CS_V_P LLCS_shw.shw",label.items = c(1:140),label.items.row=3,...)),tags = c("base","wrightMap","sample"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",min.logit.pad = -28,...)),tags = c("base","wrightMap","sample","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",item.table="rater",interactions = "rater*topic",step.table = "topic",...)),tags = c("base","wrightMap","sample","eqn","CQex"))#
	,list(call = do.call(call,"wrightMap",list("testlet2.eap","testlet2.shw",item.prop=.5, label.items.row = 2,...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dim2b.eap","CQ3examples/dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("M09s.eap","M09s.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("LangFull.eap","LangFull.shw", thr.lab.text = 1:82, label.items.row = 2,label.items=c(1:82),...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("MathFull.eap","MathFull.shw", thr.lab.text = 1:78, label.items.row = 3,label.items=c(1:78),...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("DaD.eap","DaD.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("InI.eap","InI.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("CT2.eap","CT2.shw",...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("cdmw.eap","cdmw.shw",label.items.row=2,...)),tags = c("base","wrightMap","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("6dim.mle","6dim.shw", label.items.row = 3,label.items=c(1:96),...)),tags = c("base","wrightMap","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/dim3b.eap","CQ3examples/dim3b.shw",...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex1.mle","CQ3examples/ex1.shw",...)),tags = c("base","wrightMap","sample","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex3a.wle","CQ3examples/ex3a.shw",...)),tags = c("base","wrightMap","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/M10FC.eap","CQ3examples/M10FC.shw",...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2.eap","CQ3examples/ex2.shw",...)),tags = c("base","wrightMap","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2a.eap","CQ3examples/ex2a.shw",#
	# ,thr.lab.text = matrix(c(#
							# 2,3,NA,#
							# 1,2,3,#
							# 1,2,3,#
							# 1,3,NA,#
							# 1,2,3,#
							# 1,2,NA,#
							# 1,2,3,#
							# 1,2,3),byrow = TRUE,ncol = 3),...)),tags = c("base","wrightMap","sample","mixedpoly","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2b.eap","CQ3examples/ex2b.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","CQex")) #
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2c.eap","CQ3examples/ex2c.shw",label.items.row=2,...),tags = c("base","wrightMap","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3A.eap","M12_MD_3A.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3B.eap","M12_MD_3B.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3C.eap","M12_MD_3C.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_2.eap","M12_MD_2.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12int_UD_3.eap","M12int_UD_3.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah","sample"))#
	# ,list(call = do.call(call,"wrightMap",list("CTime_EX.whole.eap","CTime_EX.whole.shw",label.items.srt=90,...)), tags = c("base","wrightMap","jinho"))#
	)#
	lapply(examples,testme,tags,verbose)#
	print("end of run")#
#
}
#install_github("david-ti/WrightMap",ref="dev")#
#install_github("david-ti/WrightMap",ref="kidmapGUI")#
#setwd("/Users/Rebecca/Dropbox/WrightMap/Test files")#
#setwd("/Users/Rebecca/Berkeley/David package/wrightmap/inst/extdata")#
#
testme <- function(example,tags,verbose) {#
	ex.call <- example$call#
	ex.tags <- example$tags#
	if(all(tags %in% ex.tags)) {#
	res <- tryCatch(eval(ex.call),error = function(e) FALSE)#
	if(class(res) == "logical" || verbose)#
		print(ex.call)#
		}#
}#
#
WM.test <- function(tags = "base",verbose = FALSE,...) {#
	examples <- list(#
	list(call = call("CQmodel","dicotgen2.eap","dicotgen.shw"),tags = c("base","CQmodel","dif","CQ2","1dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","dim2b.shw"),tags = c("base","CQmodel","dif","CQ2","2dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","SRCal11-S.eap","SRCal11-S.shw"),tags = c("base","CQmodel","step","CQ2","1dim","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","UE CS_V_P LLCS_shw.shw"),tags = c("base","CQmodel","courtney","imported","noGIN"))#
	,list(call = call("CQmodel","CQ3examples/ex4a.mle","CQ3examples/ex4a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","testlet2.eap","testlet2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim2b.eap","CQ3examples/dim2b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M09s.eap","M09s.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","LangFull.eap","LangFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","MathFull.eap","MathFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","DaD.eap","DaD.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","InI.eap","InI.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CT2.eap","CT2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","cdmw.eap","cdmw.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","6dim.mle","6dim.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim3b.eap","CQ3examples/dim3b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex1.mle","CQ3examples/ex1.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex3a.wle","CQ3examples/ex3a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2.eap","CQ3examples/ex2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2a.eap","CQ3examples/ex2a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2b.eap","CQ3examples/ex2b.shw"),tags = c("base","CQmodel")) #
	,list(call = call("CQmodel","CQ3examples/ex2c.eap","CQ3examples/ex2c.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M12_MD_3A.eap","M12_MD_3A.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3B.eap","M12_MD_3B.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_2.eap","M12_MD_2.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12int_UD_3.eap","M12int_UD_3.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","CTime_EX.whole.eap","CTime_EX.whole.shw"), tags = c("base","CQmodel","jinho","GIN"))#
	,list(call = do.call(call,"wrightMap",list("dicotgen2.eap","dicotgen.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","sample"))#
	,list(call = do.call(call,"wrightMap",list("dim2b.eap","dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("SRCal11-S.eap","SRCal11-S.shw", show.thr.lab = FALSE,...)),tags = c("base","wrightMap","sample","eqn"))#
	,list(call = do.call(call,"wrightMap",list("dim2b.eap","UE CS_V_P LLCS_shw.shw",label.items = c(1:140),label.items.row=3,...)),tags = c("base","wrightMap","sample"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",min.logit.pad = -28,...)),tags = c("base","wrightMap","sample","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",item.table="rater",interactions = "rater*topic",step.table = "topic",...)),tags = c("base","wrightMap","sample","eqn","CQex"))#
	,list(call = do.call(call,"wrightMap",list("testlet2.eap","testlet2.shw",item.prop=.5, label.items.row = 2,...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dim2b.eap","CQ3examples/dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("M09s.eap","M09s.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("LangFull.eap","LangFull.shw", thr.lab.text = 1:82, label.items.row = 2,label.items=c(1:82),...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("MathFull.eap","MathFull.shw", thr.lab.text = 1:78, label.items.row = 3,label.items=c(1:78),...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("DaD.eap","DaD.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("InI.eap","InI.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("CT2.eap","CT2.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("cdmw.eap","cdmw.shw",label.items.row=2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("6dim.mle","6dim.shw", label.items.row = 3,label.items=c(1:96),...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dim3b.eap","CQ3examples/dim3b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex1.mle","CQ3examples/ex1.shw",...)),tags = c("base","wrightMap","sample","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex3a.wle","CQ3examples/ex3a.shw",...)),tags = c("base","wrightMap","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/M10FC.eap","CQ3examples/M10FC.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2.eap","CQ3examples/ex2.shw",...)),tags = c("base","wrightMap","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2a.eap","CQ3examples/ex2a.shw",#
	# ,thr.lab.text = matrix(c(#
							# 2,3,NA,#
							# 1,2,3,#
							# 1,2,3,#
							# 1,3,NA,#
							# 1,2,3,#
							# 1,2,NA,#
							# 1,2,3,#
							# 1,2,3),byrow = TRUE,ncol = 3),...)),tags = c("base","wrightMap","sample","mixedpoly","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2b.eap","CQ3examples/ex2b.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","CQex")) #
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2c.eap","CQ3examples/ex2c.shw",label.items.row=2,...),tags = c("base","wrightMap","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3A.eap","M12_MD_3A.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3B.eap","M12_MD_3B.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3C.eap","M12_MD_3C.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_2.eap","M12_MD_2.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12int_UD_3.eap","M12int_UD_3.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah","sample"))#
	# ,list(call = do.call(call,"wrightMap",list("CTime_EX.whole.eap","CTime_EX.whole.shw",label.items.srt=90,...)), tags = c("base","wrightMap","jinho"))#
	)#
	lapply(examples,testme,tags,verbose)#
	print("end of run")#
#
}
#install_github("david-ti/WrightMap",ref="dev")#
#install_github("david-ti/WrightMap",ref="kidmapGUI")#
#setwd("/Users/Rebecca/Dropbox/WrightMap/Test files")#
#setwd("/Users/Rebecca/Berkeley/David package/wrightmap/inst/extdata")#
#
testme <- function(example,tags,verbose) {#
	ex.call <- example$call#
	ex.tags <- example$tags#
	if(all(tags %in% ex.tags)) {#
	res <- tryCatch(eval(ex.call),error = function(e) FALSE)#
	if(class(res) == "logical" || verbose)#
		print(ex.call)#
		}#
}#
#
WM.test <- function(tags = "base",verbose = FALSE,...) {#
	examples <- list(#
	list(call = call("CQmodel","dicotgen2.eap","dicotgen.shw"),tags = c("base","CQmodel","dif","CQ2","1dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","dim2b.shw"),tags = c("base","CQmodel","dif","CQ2","2dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","SRCal11-S.eap","SRCal11-S.shw"),tags = c("base","CQmodel","step","CQ2","1dim","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","UE CS_V_P LLCS_shw.shw"),tags = c("base","CQmodel","courtney","imported","noGIN"))#
	,list(call = call("CQmodel","CQ3examples/ex4a.mle","CQ3examples/ex4a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","testlet2.eap","testlet2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim2b.eap","CQ3examples/dim2b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M09s.eap","M09s.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","LangFull.eap","LangFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","MathFull.eap","MathFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","DaD.eap","DaD.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","InI.eap","InI.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CT2.eap","CT2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","cdmw.eap","cdmw.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","6dim.mle","6dim.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim3b.eap","CQ3examples/dim3b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex1.mle","CQ3examples/ex1.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex3a.wle","CQ3examples/ex3a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2.eap","CQ3examples/ex2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2a.eap","CQ3examples/ex2a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2b.eap","CQ3examples/ex2b.shw"),tags = c("base","CQmodel")) #
	,list(call = call("CQmodel","CQ3examples/ex2c.eap","CQ3examples/ex2c.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M12_MD_3A.eap","M12_MD_3A.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3B.eap","M12_MD_3B.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_2.eap","M12_MD_2.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12int_UD_3.eap","M12int_UD_3.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","CTime_EX.whole.eap","CTime_EX.whole.shw"), tags = c("base","CQmodel","jinho","GIN"))#
	,list(call = do.call(call,"wrightMap",list("dicotgen2.eap","dicotgen.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","sample"))#
	,list(call = do.call(call,"wrightMap",list("dim2b.eap","dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("SRCal11-S.eap","SRCal11-S.shw", show.thr.lab = FALSE,...)),tags = c("base","wrightMap","sample","eqn"))#
	,list(call = do.call(call,"wrightMap",list("dim2b.eap","UE CS_V_P LLCS_shw.shw",label.items = c(1:140),label.items.row=3,...)),tags = c("base","wrightMap","sample"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",min.logit.pad = -28,...)),tags = c("base","wrightMap","sample","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",item.table="rater",interactions = "rater*topic",step.table = "topic",...)),tags = c("base","wrightMap","sample","eqn","CQex"))#
	,list(call = do.call(call,"wrightMap",list("testlet2.eap","testlet2.shw",item.prop=.5, label.items.row = 2,...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dim2b.eap","CQ3examples/dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("M09s.eap","M09s.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("LangFull.eap","LangFull.shw", thr.lab.text = 1:82, label.items.row = 2,label.items=c(1:82),...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("MathFull.eap","MathFull.shw", thr.lab.text = 1:78, label.items.row = 3,label.items=c(1:78),...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("DaD.eap","DaD.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("InI.eap","InI.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("CT2.eap","CT2.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("cdmw.eap","cdmw.shw",label.items.row=2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("6dim.mle","6dim.shw", label.items.row = 3,label.items=c(1:96),...)),tags = c("base","wrightMap","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/dim3b.eap","CQ3examples/dim3b.shw",...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex1.mle","CQ3examples/ex1.shw",...)),tags = c("base","wrightMap","sample","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex3a.wle","CQ3examples/ex3a.shw",...)),tags = c("base","wrightMap","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/M10FC.eap","CQ3examples/M10FC.shw",...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2.eap","CQ3examples/ex2.shw",...)),tags = c("base","wrightMap","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2a.eap","CQ3examples/ex2a.shw",#
	# ,thr.lab.text = matrix(c(#
							# 2,3,NA,#
							# 1,2,3,#
							# 1,2,3,#
							# 1,3,NA,#
							# 1,2,3,#
							# 1,2,NA,#
							# 1,2,3,#
							# 1,2,3),byrow = TRUE,ncol = 3),...)),tags = c("base","wrightMap","sample","mixedpoly","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2b.eap","CQ3examples/ex2b.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","CQex")) #
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2c.eap","CQ3examples/ex2c.shw",label.items.row=2,...),tags = c("base","wrightMap","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3A.eap","M12_MD_3A.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3B.eap","M12_MD_3B.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3C.eap","M12_MD_3C.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_2.eap","M12_MD_2.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12int_UD_3.eap","M12int_UD_3.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah","sample"))#
	# ,list(call = do.call(call,"wrightMap",list("CTime_EX.whole.eap","CTime_EX.whole.shw",label.items.srt=90,...)), tags = c("base","wrightMap","jinho"))#
	)#
	lapply(examples,testme,tags,verbose)#
	print("end of run")#
#
}
#install_github("david-ti/WrightMap",ref="dev")#
#install_github("david-ti/WrightMap",ref="kidmapGUI")#
#setwd("/Users/Rebecca/Dropbox/WrightMap/Test files")#
#setwd("/Users/Rebecca/Berkeley/David package/wrightmap/inst/extdata")#
#
testme <- function(example,tags,verbose) {#
	ex.call <- example$call#
	ex.tags <- example$tags#
	if(all(tags %in% ex.tags)) {#
	res <- tryCatch(eval(ex.call),error = function(e) FALSE)#
	if(class(res) == "logical" || verbose)#
		print(ex.call)#
		}#
}#
#
WM.test <- function(tags = "base",verbose = FALSE,...) {#
	examples <- list(#
	list(call = call("CQmodel","dicotgen2.eap","dicotgen.shw"),tags = c("base","CQmodel","dif","CQ2","1dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","dim2b.shw"),tags = c("base","CQmodel","dif","CQ2","2dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","SRCal11-S.eap","SRCal11-S.shw"),tags = c("base","CQmodel","step","CQ2","1dim","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","UE CS_V_P LLCS_shw.shw"),tags = c("base","CQmodel","courtney","imported","noGIN"))#
	,list(call = call("CQmodel","CQ3examples/ex4a.mle","CQ3examples/ex4a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","testlet2.eap","testlet2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim2b.eap","CQ3examples/dim2b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M09s.eap","M09s.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","LangFull.eap","LangFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","MathFull.eap","MathFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","DaD.eap","DaD.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","InI.eap","InI.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CT2.eap","CT2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","cdmw.eap","cdmw.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","6dim.mle","6dim.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim3b.eap","CQ3examples/dim3b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex1.mle","CQ3examples/ex1.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex3a.wle","CQ3examples/ex3a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2.eap","CQ3examples/ex2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2a.eap","CQ3examples/ex2a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2b.eap","CQ3examples/ex2b.shw"),tags = c("base","CQmodel")) #
	,list(call = call("CQmodel","CQ3examples/ex2c.eap","CQ3examples/ex2c.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M12_MD_3A.eap","M12_MD_3A.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3B.eap","M12_MD_3B.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_2.eap","M12_MD_2.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12int_UD_3.eap","M12int_UD_3.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","CTime_EX.whole.eap","CTime_EX.whole.shw"), tags = c("base","CQmodel","jinho","GIN"))#
	,list(call = do.call(call,"wrightMap",list("dicotgen2.eap","dicotgen.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","sample"))#
	,list(call = do.call(call,"wrightMap",list("dim2b.eap","dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("SRCal11-S.eap","SRCal11-S.shw", show.thr.lab = FALSE,...)),tags = c("base","wrightMap","sample","eqn"))#
	,list(call = do.call(call,"wrightMap",list("dim2b.eap","UE CS_V_P LLCS_shw.shw",label.items = c(1:140),label.items.row=3,...)),tags = c("base","wrightMap","sample"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",min.logit.pad = -28,...)),tags = c("base","wrightMap","sample","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",item.table="rater",interactions = "rater*topic",step.table = "topic",...)),tags = c("base","wrightMap","sample","eqn","CQex"))#
	,list(call = do.call(call,"wrightMap",list("testlet2.eap","testlet2.shw",item.prop=.5, label.items.row = 2,...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dim2b.eap","CQ3examples/dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("M09s.eap","M09s.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("LangFull.eap","LangFull.shw", thr.lab.text = 1:82, label.items.row = 2,label.items=c(1:82),...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("MathFull.eap","MathFull.shw", thr.lab.text = 1:78, label.items.row = 3,label.items=c(1:78),...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("DaD.eap","DaD.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("InI.eap","InI.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("CT2.eap","CT2.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("cdmw.eap","cdmw.shw",label.items.row=2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("6dim.mle","6dim.shw", label.items.row = 3,label.items=c(1:96),...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dim3b.eap","CQ3examples/dim3b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex1.mle","CQ3examples/ex1.shw",...)),tags = c("base","wrightMap","sample","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex3a.wle","CQ3examples/ex3a.shw",...)),tags = c("base","wrightMap","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/M10FC.eap","CQ3examples/M10FC.shw",...)),tags = c("base","wrightMap"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2.eap","CQ3examples/ex2.shw",...)),tags = c("base","wrightMap","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2a.eap","CQ3examples/ex2a.shw",#
	# ,thr.lab.text = matrix(c(#
							# 2,3,NA,#
							# 1,2,3,#
							# 1,2,3,#
							# 1,3,NA,#
							# 1,2,3,#
							# 1,2,NA,#
							# 1,2,3,#
							# 1,2,3),byrow = TRUE,ncol = 3),...)),tags = c("base","wrightMap","sample","mixedpoly","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2b.eap","CQ3examples/ex2b.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","CQex")) #
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2c.eap","CQ3examples/ex2c.shw",label.items.row=2,...),tags = c("base","wrightMap","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3A.eap","M12_MD_3A.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3B.eap","M12_MD_3B.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3C.eap","M12_MD_3C.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_2.eap","M12_MD_2.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12int_UD_3.eap","M12int_UD_3.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah","sample"))#
	# ,list(call = do.call(call,"wrightMap",list("CTime_EX.whole.eap","CTime_EX.whole.shw",label.items.srt=90,...)), tags = c("base","wrightMap","jinho"))#
	)#
	lapply(examples,testme,tags,verbose)#
	print("end of run")#
#
}
#install_github("david-ti/WrightMap",ref="dev")#
#install_github("david-ti/WrightMap",ref="kidmapGUI")#
#setwd("/Users/Rebecca/Dropbox/WrightMap/Test files")#
#setwd("/Users/Rebecca/Berkeley/David package/wrightmap/inst/extdata")#
#
testme <- function(example,tags,verbose) {#
	ex.call <- example$call#
	ex.tags <- example$tags#
	if(all(tags %in% ex.tags)) {#
	res <- tryCatch(eval(ex.call),error = function(e) FALSE)#
	if(class(res) == "logical" || verbose)#
		print(ex.call)#
		}#
}#
#
WM.test <- function(tags = "base",verbose = FALSE,...) {#
	examples <- list(#
	list(call = call("CQmodel","dicotgen2.eap","dicotgen.shw"),tags = c("base","CQmodel","dif","CQ2","1dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","dim2b.shw"),tags = c("base","CQmodel","dif","CQ2","2dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","SRCal11-S.eap","SRCal11-S.shw"),tags = c("base","CQmodel","step","CQ2","1dim","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","UE CS_V_P LLCS_shw.shw"),tags = c("base","CQmodel","courtney","imported","noGIN"))#
	,list(call = call("CQmodel","CQ3examples/ex4a.mle","CQ3examples/ex4a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","testlet2.eap","testlet2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim2b.eap","CQ3examples/dim2b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M09s.eap","M09s.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","LangFull.eap","LangFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","MathFull.eap","MathFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","DaD.eap","DaD.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","InI.eap","InI.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CT2.eap","CT2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","cdmw.eap","cdmw.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","6dim.mle","6dim.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim3b.eap","CQ3examples/dim3b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex1.mle","CQ3examples/ex1.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex3a.wle","CQ3examples/ex3a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2.eap","CQ3examples/ex2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2a.eap","CQ3examples/ex2a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2b.eap","CQ3examples/ex2b.shw"),tags = c("base","CQmodel")) #
	,list(call = call("CQmodel","CQ3examples/ex2c.eap","CQ3examples/ex2c.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M12_MD_3A.eap","M12_MD_3A.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3B.eap","M12_MD_3B.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_2.eap","M12_MD_2.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12int_UD_3.eap","M12int_UD_3.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","CTime_EX.whole.eap","CTime_EX.whole.shw"), tags = c("base","CQmodel","jinho","GIN"))#
	,list(call = do.call(call,"wrightMap",list("dicotgen2.eap","dicotgen.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","sample"))#
	,list(call = do.call(call,"wrightMap",list("dim2b.eap","dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("SRCal11-S.eap","SRCal11-S.shw", show.thr.lab = FALSE,...)),tags = c("base","wrightMap","sample","eqn"))#
	,list(call = do.call(call,"wrightMap",list("dim2b.eap","UE CS_V_P LLCS_shw.shw",label.items = c(1:140),label.items.row=3,...)),tags = c("base","wrightMap","sample"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",min.logit.pad = -28,...)),tags = c("base","wrightMap","sample","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",item.table="rater",interactions = "rater*topic",step.table = "topic",...)),tags = c("base","wrightMap","sample","eqn","CQex"))#
	,list(call = do.call(call,"wrightMap",list("testlet2.eap","testlet2.shw",item.prop=.5, label.items.row = 2,...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dim2b.eap","CQ3examples/dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("M09s.eap","M09s.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("LangFull.eap","LangFull.shw", thr.lab.text = 1:82, label.items.row = 2,label.items=c(1:82),...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("MathFull.eap","MathFull.shw", thr.lab.text = 1:78, label.items.row = 3,label.items=c(1:78),...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("DaD.eap","DaD.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("InI.eap","InI.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("CT2.eap","CT2.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("cdmw.eap","cdmw.shw",label.items.row=2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("6dim.mle","6dim.shw", label.items.row = 3,label.items=c(1:96),...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dim3b.eap","CQ3examples/dim3b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex1.mle","CQ3examples/ex1.shw",...)),tags = c("base","wrightMap","sample","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex3a.wle","CQ3examples/ex3a.shw",...)),tags = c("base","wrightMap","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/M10FC.eap","CQ3examples/M10FC.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2.eap","CQ3examples/ex2.shw",...)),tags = c("base","wrightMap","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2a.eap","CQ3examples/ex2a.shw",#
	# ,thr.lab.text = matrix(c(#
							# 2,3,NA,#
							# 1,2,3,#
							# 1,2,3,#
							# 1,3,NA,#
							# 1,2,3,#
							# 1,2,NA,#
							# 1,2,3,#
							# 1,2,3),byrow = TRUE,ncol = 3),...)),tags = c("base","wrightMap","sample","mixedpoly","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2b.eap","CQ3examples/ex2b.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","CQex")) #
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2c.eap","CQ3examples/ex2c.shw",label.items.row=2,...),tags = c("base","wrightMap","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3A.eap","M12_MD_3A.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3B.eap","M12_MD_3B.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3C.eap","M12_MD_3C.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_2.eap","M12_MD_2.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12int_UD_3.eap","M12int_UD_3.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah","sample"))#
	# ,list(call = do.call(call,"wrightMap",list("CTime_EX.whole.eap","CTime_EX.whole.shw",label.items.srt=90,...)), tags = c("base","wrightMap","jinho"))#
	)#
	lapply(examples,testme,tags,verbose)#
	print("end of run")#
#
}
#install_github("david-ti/WrightMap",ref="dev")#
#install_github("david-ti/WrightMap",ref="kidmapGUI")#
#setwd("/Users/Rebecca/Dropbox/WrightMap/Test files")#
#setwd("/Users/Rebecca/Berkeley/David package/wrightmap/inst/extdata")#
#
testme <- function(example,tags,verbose) {#
	ex.call <- example$call#
	ex.tags <- example$tags#
	if(all(tags %in% ex.tags)) {#
	res <- tryCatch(eval(ex.call),error = function(e) FALSE)#
	if(class(res) == "logical" || verbose)#
		print(ex.call)#
		}#
}#
#
WM.test <- function(tags = "base",verbose = FALSE,...) {#
	examples <- list(#
	list(call = call("CQmodel","dicotgen2.eap","dicotgen.shw"),tags = c("base","CQmodel","dif","CQ2","1dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","dim2b.shw"),tags = c("base","CQmodel","dif","CQ2","2dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","SRCal11-S.eap","SRCal11-S.shw"),tags = c("base","CQmodel","step","CQ2","1dim","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","UE CS_V_P LLCS_shw.shw"),tags = c("base","CQmodel","courtney","imported","noGIN"))#
	,list(call = call("CQmodel","CQ3examples/ex4a.mle","CQ3examples/ex4a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","testlet2.eap","testlet2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim2b.eap","CQ3examples/dim2b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M09s.eap","M09s.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","LangFull.eap","LangFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","MathFull.eap","MathFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","DaD.eap","DaD.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","InI.eap","InI.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CT2.eap","CT2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","cdmw.eap","cdmw.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","6dim.mle","6dim.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim3b.eap","CQ3examples/dim3b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex1.mle","CQ3examples/ex1.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex3a.wle","CQ3examples/ex3a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2.eap","CQ3examples/ex2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2a.eap","CQ3examples/ex2a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2b.eap","CQ3examples/ex2b.shw"),tags = c("base","CQmodel")) #
	,list(call = call("CQmodel","CQ3examples/ex2c.eap","CQ3examples/ex2c.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M12_MD_3A.eap","M12_MD_3A.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3B.eap","M12_MD_3B.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_2.eap","M12_MD_2.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12int_UD_3.eap","M12int_UD_3.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","CTime_EX.whole.eap","CTime_EX.whole.shw"), tags = c("base","CQmodel","jinho","GIN"))#
	,list(call = do.call(call,"wrightMap",list("dicotgen2.eap","dicotgen.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","sample"))#
	,list(call = do.call(call,"wrightMap",list("dim2b.eap","dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("SRCal11-S.eap","SRCal11-S.shw", show.thr.lab = FALSE,...)),tags = c("base","wrightMap","sample","eqn"))#
	,list(call = do.call(call,"wrightMap",list("dim2b.eap","UE CS_V_P LLCS_shw.shw",label.items = c(1:140),label.items.row=3,...)),tags = c("base","wrightMap","sample"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",min.logit.pad = -28,...)),tags = c("base","wrightMap","sample","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",item.table="rater",interactions = "rater*topic",step.table = "topic",...)),tags = c("base","wrightMap","sample","eqn","CQex"))#
	,list(call = do.call(call,"wrightMap",list("testlet2.eap","testlet2.shw",item.prop=.5, label.items.row = 2,...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dim2b.eap","CQ3examples/dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("M09s.eap","M09s.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("LangFull.eap","LangFull.shw", thr.lab.text = 1:82, label.items.row = 2,label.items=c(1:82),...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("MathFull.eap","MathFull.shw", thr.lab.text = 1:78, label.items.row = 3,label.items=c(1:78),...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("DaD.eap","DaD.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("InI.eap","InI.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("CT2.eap","CT2.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("cdmw.eap","cdmw.shw",label.items.row=2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("6dim.mle","6dim.shw", label.items.row = 3,label.items=c(1:96),...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dim3b.eap","CQ3examples/dim3b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex1.mle","CQ3examples/ex1.shw",...)),tags = c("base","wrightMap","sample","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex3a.wle","CQ3examples/ex3a.shw",...)),tags = c("base","wrightMap","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/M10FC.eap","CQ3examples/M10FC.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2.eap","CQ3examples/ex2.shw",...)),tags = c("base","wrightMap","CQex"))#
	#,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2a.eap","CQ3examples/ex2a.shw",#
	# ,thr.lab.text = matrix(c(#
							# 2,3,NA,#
							# 1,2,3,#
							# 1,2,3,#
							# 1,3,NA,#
							# 1,2,3,#
							# 1,2,NA,#
							# 1,2,3,#
							# 1,2,3),byrow = TRUE,ncol = 3),...)),tags = c("base","wrightMap","sample","mixedpoly","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2b.eap","CQ3examples/ex2b.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","CQex")) #
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2c.eap","CQ3examples/ex2c.shw",label.items.row=2,...),tags = c("base","wrightMap","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3A.eap","M12_MD_3A.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3B.eap","M12_MD_3B.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3C.eap","M12_MD_3C.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_2.eap","M12_MD_2.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12int_UD_3.eap","M12int_UD_3.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah","sample"))#
	# ,list(call = do.call(call,"wrightMap",list("CTime_EX.whole.eap","CTime_EX.whole.shw",label.items.srt=90,...)), tags = c("base","wrightMap","jinho"))#
	)#
	lapply(examples,testme,tags,verbose)#
	print("end of run")#
#
}
#install_github("david-ti/WrightMap",ref="dev")#
#install_github("david-ti/WrightMap",ref="kidmapGUI")#
#setwd("/Users/Rebecca/Dropbox/WrightMap/Test files")#
#setwd("/Users/Rebecca/Berkeley/David package/wrightmap/inst/extdata")#
#
testme <- function(example,tags,verbose) {#
	ex.call <- example$call#
	ex.tags <- example$tags#
	if(all(tags %in% ex.tags)) {#
	res <- tryCatch(eval(ex.call),error = function(e) FALSE)#
	if(class(res) == "logical" || verbose)#
		print(ex.call)#
		}#
}#
#
WM.test <- function(tags = "base",verbose = FALSE,...) {#
	examples <- list(#
	list(call = call("CQmodel","dicotgen2.eap","dicotgen.shw"),tags = c("base","CQmodel","dif","CQ2","1dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","dim2b.shw"),tags = c("base","CQmodel","dif","CQ2","2dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","SRCal11-S.eap","SRCal11-S.shw"),tags = c("base","CQmodel","step","CQ2","1dim","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","UE CS_V_P LLCS_shw.shw"),tags = c("base","CQmodel","courtney","imported","noGIN"))#
	,list(call = call("CQmodel","CQ3examples/ex4a.mle","CQ3examples/ex4a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","testlet2.eap","testlet2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim2b.eap","CQ3examples/dim2b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M09s.eap","M09s.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","LangFull.eap","LangFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","MathFull.eap","MathFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","DaD.eap","DaD.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","InI.eap","InI.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CT2.eap","CT2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","cdmw.eap","cdmw.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","6dim.mle","6dim.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim3b.eap","CQ3examples/dim3b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex1.mle","CQ3examples/ex1.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex3a.wle","CQ3examples/ex3a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2.eap","CQ3examples/ex2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2a.eap","CQ3examples/ex2a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2b.eap","CQ3examples/ex2b.shw"),tags = c("base","CQmodel")) #
	,list(call = call("CQmodel","CQ3examples/ex2c.eap","CQ3examples/ex2c.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M12_MD_3A.eap","M12_MD_3A.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3B.eap","M12_MD_3B.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_2.eap","M12_MD_2.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12int_UD_3.eap","M12int_UD_3.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","CTime_EX.whole.eap","CTime_EX.whole.shw"), tags = c("base","CQmodel","jinho","GIN"))#
	,list(call = do.call(call,"wrightMap",list("dicotgen2.eap","dicotgen.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","sample"))#
	,list(call = do.call(call,"wrightMap",list("dim2b.eap","dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("SRCal11-S.eap","SRCal11-S.shw", show.thr.lab = FALSE,...)),tags = c("base","wrightMap","sample","eqn"))#
	,list(call = do.call(call,"wrightMap",list("dim2b.eap","UE CS_V_P LLCS_shw.shw",label.items = c(1:140),label.items.row=3,...)),tags = c("base","wrightMap","sample"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",min.logit.pad = -28,...)),tags = c("base","wrightMap","sample","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",item.table="rater",interactions = "rater*topic",step.table = "topic",...)),tags = c("base","wrightMap","sample","eqn","CQex"))#
	,list(call = do.call(call,"wrightMap",list("testlet2.eap","testlet2.shw",item.prop=.5, label.items.row = 2,...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dim2b.eap","CQ3examples/dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("M09s.eap","M09s.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("LangFull.eap","LangFull.shw", thr.lab.text = 1:82, label.items.row = 2,label.items=c(1:82),...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("MathFull.eap","MathFull.shw", thr.lab.text = 1:78, label.items.row = 3,label.items=c(1:78),...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("DaD.eap","DaD.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("InI.eap","InI.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("CT2.eap","CT2.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("cdmw.eap","cdmw.shw",label.items.row=2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("6dim.mle","6dim.shw", label.items.row = 3,label.items=c(1:96),...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dim3b.eap","CQ3examples/dim3b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex1.mle","CQ3examples/ex1.shw",...)),tags = c("base","wrightMap","sample","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex3a.wle","CQ3examples/ex3a.shw",...)),tags = c("base","wrightMap","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/M10FC.eap","CQ3examples/M10FC.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2.eap","CQ3examples/ex2.shw",...)),tags = c("base","wrightMap","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2a.eap","CQ3examples/ex2a.shw",#
	,thr.lab.text = matrix(c(#
							# 2,3,NA,#
							# 1,2,3,#
							# 1,2,3,#
							# 1,3,NA,#
							# 1,2,3,#
							# 1,2,NA,#
							# 1,2,3,#
							# 1,2,3),byrow = TRUE,ncol = 3),...)),tags = c("base","wrightMap","sample","mixedpoly","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2b.eap","CQ3examples/ex2b.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","CQex")) #
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2c.eap","CQ3examples/ex2c.shw",label.items.row=2,...),tags = c("base","wrightMap","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3A.eap","M12_MD_3A.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3B.eap","M12_MD_3B.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3C.eap","M12_MD_3C.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_2.eap","M12_MD_2.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12int_UD_3.eap","M12int_UD_3.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah","sample"))#
	# ,list(call = do.call(call,"wrightMap",list("CTime_EX.whole.eap","CTime_EX.whole.shw",label.items.srt=90,...)), tags = c("base","wrightMap","jinho"))#
	)#
	lapply(examples,testme,tags,verbose)#
	print("end of run")#
#
}
#install_github("david-ti/WrightMap",ref="dev")#
#install_github("david-ti/WrightMap",ref="kidmapGUI")#
#setwd("/Users/Rebecca/Dropbox/WrightMap/Test files")#
#setwd("/Users/Rebecca/Berkeley/David package/wrightmap/inst/extdata")#
#
testme <- function(example,tags,verbose) {#
	ex.call <- example$call#
	ex.tags <- example$tags#
	if(all(tags %in% ex.tags)) {#
	res <- tryCatch(eval(ex.call),error = function(e) FALSE)#
	if(class(res) == "logical" || verbose)#
		print(ex.call)#
		}#
}#
#
WM.test <- function(tags = "base",verbose = FALSE,...) {#
	examples <- list(#
	list(call = call("CQmodel","dicotgen2.eap","dicotgen.shw"),tags = c("base","CQmodel","dif","CQ2","1dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","dim2b.shw"),tags = c("base","CQmodel","dif","CQ2","2dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","SRCal11-S.eap","SRCal11-S.shw"),tags = c("base","CQmodel","step","CQ2","1dim","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","UE CS_V_P LLCS_shw.shw"),tags = c("base","CQmodel","courtney","imported","noGIN"))#
	,list(call = call("CQmodel","CQ3examples/ex4a.mle","CQ3examples/ex4a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","testlet2.eap","testlet2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim2b.eap","CQ3examples/dim2b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M09s.eap","M09s.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","LangFull.eap","LangFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","MathFull.eap","MathFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","DaD.eap","DaD.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","InI.eap","InI.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CT2.eap","CT2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","cdmw.eap","cdmw.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","6dim.mle","6dim.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim3b.eap","CQ3examples/dim3b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex1.mle","CQ3examples/ex1.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex3a.wle","CQ3examples/ex3a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2.eap","CQ3examples/ex2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2a.eap","CQ3examples/ex2a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2b.eap","CQ3examples/ex2b.shw"),tags = c("base","CQmodel")) #
	,list(call = call("CQmodel","CQ3examples/ex2c.eap","CQ3examples/ex2c.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M12_MD_3A.eap","M12_MD_3A.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3B.eap","M12_MD_3B.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_2.eap","M12_MD_2.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12int_UD_3.eap","M12int_UD_3.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","CTime_EX.whole.eap","CTime_EX.whole.shw"), tags = c("base","CQmodel","jinho","GIN"))#
	,list(call = do.call(call,"wrightMap",list("dicotgen2.eap","dicotgen.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","sample"))#
	,list(call = do.call(call,"wrightMap",list("dim2b.eap","dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("SRCal11-S.eap","SRCal11-S.shw", show.thr.lab = FALSE,...)),tags = c("base","wrightMap","sample","eqn"))#
	,list(call = do.call(call,"wrightMap",list("dim2b.eap","UE CS_V_P LLCS_shw.shw",label.items = c(1:140),label.items.row=3,...)),tags = c("base","wrightMap","sample"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",min.logit.pad = -28,...)),tags = c("base","wrightMap","sample","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",item.table="rater",interactions = "rater*topic",step.table = "topic",...)),tags = c("base","wrightMap","sample","eqn","CQex"))#
	,list(call = do.call(call,"wrightMap",list("testlet2.eap","testlet2.shw",item.prop=.5, label.items.row = 2,...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dim2b.eap","CQ3examples/dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("M09s.eap","M09s.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("LangFull.eap","LangFull.shw", thr.lab.text = 1:82, label.items.row = 2,label.items=c(1:82),...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("MathFull.eap","MathFull.shw", thr.lab.text = 1:78, label.items.row = 3,label.items=c(1:78),...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("DaD.eap","DaD.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("InI.eap","InI.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("CT2.eap","CT2.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("cdmw.eap","cdmw.shw",label.items.row=2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("6dim.mle","6dim.shw", label.items.row = 3,label.items=c(1:96),...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dim3b.eap","CQ3examples/dim3b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex1.mle","CQ3examples/ex1.shw",...)),tags = c("base","wrightMap","sample","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex3a.wle","CQ3examples/ex3a.shw",...)),tags = c("base","wrightMap","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/M10FC.eap","CQ3examples/M10FC.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2.eap","CQ3examples/ex2.shw",...)),tags = c("base","wrightMap","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2a.eap","CQ3examples/ex2a.shw",#
	,thr.lab.text = matrix(c(#
							2,3,NA,#
							1,2,3,#
							1,2,3,#
							1,3,NA,#
							1,2,3,#
							1,2,NA,#
							1,2,3,#
							1,2,3),byrow = TRUE,ncol = 3),...)),tags = c("base","wrightMap","sample","mixedpoly","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2b.eap","CQ3examples/ex2b.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","CQex")) #
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2c.eap","CQ3examples/ex2c.shw",label.items.row=2,...),tags = c("base","wrightMap","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3A.eap","M12_MD_3A.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3B.eap","M12_MD_3B.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3C.eap","M12_MD_3C.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_2.eap","M12_MD_2.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12int_UD_3.eap","M12int_UD_3.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah","sample"))#
	# ,list(call = do.call(call,"wrightMap",list("CTime_EX.whole.eap","CTime_EX.whole.shw",label.items.srt=90,...)), tags = c("base","wrightMap","jinho"))#
	)#
	lapply(examples,testme,tags,verbose)#
	print("end of run")#
#
}
#install_github("david-ti/WrightMap",ref="dev")#
#install_github("david-ti/WrightMap",ref="kidmapGUI")#
#setwd("/Users/Rebecca/Dropbox/WrightMap/Test files")#
#setwd("/Users/Rebecca/Berkeley/David package/wrightmap/inst/extdata")#
#
testme <- function(example,tags,verbose) {#
	ex.call <- example$call#
	ex.tags <- example$tags#
	if(all(tags %in% ex.tags)) {#
	res <- tryCatch(eval(ex.call),error = function(e) FALSE)#
	if(class(res) == "logical" || verbose)#
		print(ex.call)#
		}#
}#
#
WM.test <- function(tags = "base",verbose = FALSE,...) {#
	examples <- list(#
	list(call = call("CQmodel","dicotgen2.eap","dicotgen.shw"),tags = c("base","CQmodel","dif","CQ2","1dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","dim2b.shw"),tags = c("base","CQmodel","dif","CQ2","2dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","SRCal11-S.eap","SRCal11-S.shw"),tags = c("base","CQmodel","step","CQ2","1dim","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","UE CS_V_P LLCS_shw.shw"),tags = c("base","CQmodel","courtney","imported","noGIN"))#
	,list(call = call("CQmodel","CQ3examples/ex4a.mle","CQ3examples/ex4a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","testlet2.eap","testlet2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim2b.eap","CQ3examples/dim2b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M09s.eap","M09s.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","LangFull.eap","LangFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","MathFull.eap","MathFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","DaD.eap","DaD.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","InI.eap","InI.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CT2.eap","CT2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","cdmw.eap","cdmw.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","6dim.mle","6dim.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim3b.eap","CQ3examples/dim3b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex1.mle","CQ3examples/ex1.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex3a.wle","CQ3examples/ex3a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2.eap","CQ3examples/ex2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2a.eap","CQ3examples/ex2a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2b.eap","CQ3examples/ex2b.shw"),tags = c("base","CQmodel")) #
	,list(call = call("CQmodel","CQ3examples/ex2c.eap","CQ3examples/ex2c.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M12_MD_3A.eap","M12_MD_3A.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3B.eap","M12_MD_3B.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_2.eap","M12_MD_2.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12int_UD_3.eap","M12int_UD_3.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","CTime_EX.whole.eap","CTime_EX.whole.shw"), tags = c("base","CQmodel","jinho","GIN"))#
	,list(call = do.call(call,"wrightMap",list("dicotgen2.eap","dicotgen.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","sample"))#
	,list(call = do.call(call,"wrightMap",list("dim2b.eap","dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("SRCal11-S.eap","SRCal11-S.shw", show.thr.lab = FALSE,...)),tags = c("base","wrightMap","sample","eqn"))#
	,list(call = do.call(call,"wrightMap",list("dim2b.eap","UE CS_V_P LLCS_shw.shw",label.items = c(1:140),label.items.row=3,...)),tags = c("base","wrightMap","sample"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",min.logit.pad = -28,...)),tags = c("base","wrightMap","sample","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",item.table="rater",interactions = "rater*topic",step.table = "topic",...)),tags = c("base","wrightMap","sample","eqn","CQex"))#
	,list(call = do.call(call,"wrightMap",list("testlet2.eap","testlet2.shw",item.prop=.5, label.items.row = 2,...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dim2b.eap","CQ3examples/dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("M09s.eap","M09s.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("LangFull.eap","LangFull.shw", thr.lab.text = 1:82, label.items.row = 2,label.items=c(1:82),...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("MathFull.eap","MathFull.shw", thr.lab.text = 1:78, label.items.row = 3,label.items=c(1:78),...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("DaD.eap","DaD.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("InI.eap","InI.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("CT2.eap","CT2.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("cdmw.eap","cdmw.shw",label.items.row=2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("6dim.mle","6dim.shw", label.items.row = 3,label.items=c(1:96),...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dim3b.eap","CQ3examples/dim3b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex1.mle","CQ3examples/ex1.shw",...)),tags = c("base","wrightMap","sample","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex3a.wle","CQ3examples/ex3a.shw",...)),tags = c("base","wrightMap","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/M10FC.eap","CQ3examples/M10FC.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2.eap","CQ3examples/ex2.shw",...)),tags = c("base","wrightMap","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2a.eap","CQ3examples/ex2a.shw",#
	,thr.lab.text = matrix(c(#
							2,3,NA,#
							1,2,3,#
							1,2,3,#
							1,3,NA,#
							1,2,3,#
							1,2,NA,#
							1,2,3,#
							1,2,3),byrow = TRUE,ncol = 3),...)),tags = c("base","wrightMap","sample","mixedpoly","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2b.eap","CQ3examples/ex2b.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","CQex")) #
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2c.eap","CQ3examples/ex2c.shw",label.items.row=2,...),tags = c("base","wrightMap","CQex"))#
	,list(call = do.call(call,"wrightMap",list("M12_MD_3A.eap","M12_MD_3A.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("M12_MD_3B.eap","M12_MD_3B.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("M12_MD_3C.eap","M12_MD_3C.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_2.eap","M12_MD_2.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12int_UD_3.eap","M12int_UD_3.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah","sample"))#
	# ,list(call = do.call(call,"wrightMap",list("CTime_EX.whole.eap","CTime_EX.whole.shw",label.items.srt=90,...)), tags = c("base","wrightMap","jinho"))#
	)#
	lapply(examples,testme,tags,verbose)#
	print("end of run")#
#
}
#install_github("david-ti/WrightMap",ref="dev")#
#install_github("david-ti/WrightMap",ref="kidmapGUI")#
#setwd("/Users/Rebecca/Dropbox/WrightMap/Test files")#
#setwd("/Users/Rebecca/Berkeley/David package/wrightmap/inst/extdata")#
#
testme <- function(example,tags,verbose) {#
	ex.call <- example$call#
	ex.tags <- example$tags#
	if(all(tags %in% ex.tags)) {#
	res <- tryCatch(eval(ex.call),error = function(e) FALSE)#
	if(class(res) == "logical" || verbose)#
		print(ex.call)#
		}#
}#
#
WM.test <- function(tags = "base",verbose = FALSE,...) {#
	examples <- list(#
	list(call = call("CQmodel","dicotgen2.eap","dicotgen.shw"),tags = c("base","CQmodel","dif","CQ2","1dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","dim2b.shw"),tags = c("base","CQmodel","dif","CQ2","2dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","SRCal11-S.eap","SRCal11-S.shw"),tags = c("base","CQmodel","step","CQ2","1dim","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","UE CS_V_P LLCS_shw.shw"),tags = c("base","CQmodel","courtney","imported","noGIN"))#
	,list(call = call("CQmodel","CQ3examples/ex4a.mle","CQ3examples/ex4a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","testlet2.eap","testlet2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim2b.eap","CQ3examples/dim2b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M09s.eap","M09s.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","LangFull.eap","LangFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","MathFull.eap","MathFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","DaD.eap","DaD.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","InI.eap","InI.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CT2.eap","CT2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","cdmw.eap","cdmw.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","6dim.mle","6dim.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim3b.eap","CQ3examples/dim3b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex1.mle","CQ3examples/ex1.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex3a.wle","CQ3examples/ex3a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2.eap","CQ3examples/ex2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2a.eap","CQ3examples/ex2a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2b.eap","CQ3examples/ex2b.shw"),tags = c("base","CQmodel")) #
	,list(call = call("CQmodel","CQ3examples/ex2c.eap","CQ3examples/ex2c.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M12_MD_3A.eap","M12_MD_3A.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3B.eap","M12_MD_3B.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_2.eap","M12_MD_2.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12int_UD_3.eap","M12int_UD_3.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","CTime_EX.whole.eap","CTime_EX.whole.shw"), tags = c("base","CQmodel","jinho","GIN"))#
	,list(call = do.call(call,"wrightMap",list("dicotgen2.eap","dicotgen.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","sample"))#
	,list(call = do.call(call,"wrightMap",list("dim2b.eap","dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("SRCal11-S.eap","SRCal11-S.shw", show.thr.lab = FALSE,...)),tags = c("base","wrightMap","sample","eqn"))#
	,list(call = do.call(call,"wrightMap",list("dim2b.eap","UE CS_V_P LLCS_shw.shw",label.items = c(1:140),label.items.row=3,...)),tags = c("base","wrightMap","sample"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",min.logit.pad = -28,...)),tags = c("base","wrightMap","sample","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",item.table="rater",interactions = "rater*topic",step.table = "topic",...)),tags = c("base","wrightMap","sample","eqn","CQex"))#
	,list(call = do.call(call,"wrightMap",list("testlet2.eap","testlet2.shw",item.prop=.5, label.items.row = 2,...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dim2b.eap","CQ3examples/dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("M09s.eap","M09s.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("LangFull.eap","LangFull.shw", thr.lab.text = 1:82, label.items.row = 2,label.items=c(1:82),...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("MathFull.eap","MathFull.shw", thr.lab.text = 1:78, label.items.row = 3,label.items=c(1:78),...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("DaD.eap","DaD.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("InI.eap","InI.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("CT2.eap","CT2.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("cdmw.eap","cdmw.shw",label.items.row=2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("6dim.mle","6dim.shw", label.items.row = 3,label.items=c(1:96),...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dim3b.eap","CQ3examples/dim3b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex1.mle","CQ3examples/ex1.shw",...)),tags = c("base","wrightMap","sample","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex3a.wle","CQ3examples/ex3a.shw",...)),tags = c("base","wrightMap","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/M10FC.eap","CQ3examples/M10FC.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2.eap","CQ3examples/ex2.shw",...)),tags = c("base","wrightMap","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2a.eap","CQ3examples/ex2a.shw",#
	,thr.lab.text = matrix(c(#
							2,3,NA,#
							1,2,3,#
							1,2,3,#
							1,3,NA,#
							1,2,3,#
							1,2,NA,#
							1,2,3,#
							1,2,3),byrow = TRUE,ncol = 3),...)),tags = c("base","wrightMap","sample","mixedpoly","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2b.eap","CQ3examples/ex2b.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","CQex")) #
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2c.eap","CQ3examples/ex2c.shw",label.items.row=2,...),tags = c("base","wrightMap","CQex"))#
	,list(call = do.call(call,"wrightMap",list("M12_MD_3A.eap","M12_MD_3A.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3B.eap","M12_MD_3B.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3C.eap","M12_MD_3C.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_2.eap","M12_MD_2.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12int_UD_3.eap","M12int_UD_3.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah","sample"))#
	# ,list(call = do.call(call,"wrightMap",list("CTime_EX.whole.eap","CTime_EX.whole.shw",label.items.srt=90,...)), tags = c("base","wrightMap","jinho"))#
	)#
	lapply(examples,testme,tags,verbose)#
	print("end of run")#
#
}
#install_github("david-ti/WrightMap",ref="dev")#
#install_github("david-ti/WrightMap",ref="kidmapGUI")#
#setwd("/Users/Rebecca/Dropbox/WrightMap/Test files")#
#setwd("/Users/Rebecca/Berkeley/David package/wrightmap/inst/extdata")#
#
testme <- function(example,tags,verbose) {#
	ex.call <- example$call#
	ex.tags <- example$tags#
	if(all(tags %in% ex.tags)) {#
	res <- tryCatch(eval(ex.call),error = function(e) FALSE)#
	if(class(res) == "logical" || verbose)#
		print(ex.call)#
		}#
}#
#
WM.test <- function(tags = "base",verbose = FALSE,...) {#
	examples <- list(#
	list(call = call("CQmodel","dicotgen2.eap","dicotgen.shw"),tags = c("base","CQmodel","dif","CQ2","1dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","dim2b.shw"),tags = c("base","CQmodel","dif","CQ2","2dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","SRCal11-S.eap","SRCal11-S.shw"),tags = c("base","CQmodel","step","CQ2","1dim","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","UE CS_V_P LLCS_shw.shw"),tags = c("base","CQmodel","courtney","imported","noGIN"))#
	,list(call = call("CQmodel","CQ3examples/ex4a.mle","CQ3examples/ex4a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","testlet2.eap","testlet2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim2b.eap","CQ3examples/dim2b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M09s.eap","M09s.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","LangFull.eap","LangFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","MathFull.eap","MathFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","DaD.eap","DaD.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","InI.eap","InI.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CT2.eap","CT2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","cdmw.eap","cdmw.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","6dim.mle","6dim.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim3b.eap","CQ3examples/dim3b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex1.mle","CQ3examples/ex1.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex3a.wle","CQ3examples/ex3a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2.eap","CQ3examples/ex2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2a.eap","CQ3examples/ex2a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2b.eap","CQ3examples/ex2b.shw"),tags = c("base","CQmodel")) #
	,list(call = call("CQmodel","CQ3examples/ex2c.eap","CQ3examples/ex2c.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M12_MD_3A.eap","M12_MD_3A.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3B.eap","M12_MD_3B.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_2.eap","M12_MD_2.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12int_UD_3.eap","M12int_UD_3.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","CTime_EX.whole.eap","CTime_EX.whole.shw"), tags = c("base","CQmodel","jinho","GIN"))#
	,list(call = do.call(call,"wrightMap",list("dicotgen2.eap","dicotgen.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","sample"))#
	,list(call = do.call(call,"wrightMap",list("dim2b.eap","dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("SRCal11-S.eap","SRCal11-S.shw", show.thr.lab = FALSE,...)),tags = c("base","wrightMap","sample","eqn"))#
	,list(call = do.call(call,"wrightMap",list("dim2b.eap","UE CS_V_P LLCS_shw.shw",label.items = c(1:140),label.items.row=3,...)),tags = c("base","wrightMap","sample"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",min.logit.pad = -28,...)),tags = c("base","wrightMap","sample","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",item.table="rater",interactions = "rater*topic",step.table = "topic",...)),tags = c("base","wrightMap","sample","eqn","CQex"))#
	,list(call = do.call(call,"wrightMap",list("testlet2.eap","testlet2.shw",item.prop=.5, label.items.row = 2,...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dim2b.eap","CQ3examples/dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("M09s.eap","M09s.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("LangFull.eap","LangFull.shw", thr.lab.text = 1:82, label.items.row = 2,label.items=c(1:82),...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("MathFull.eap","MathFull.shw", thr.lab.text = 1:78, label.items.row = 3,label.items=c(1:78),...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("DaD.eap","DaD.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("InI.eap","InI.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("CT2.eap","CT2.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("cdmw.eap","cdmw.shw",label.items.row=2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("6dim.mle","6dim.shw", label.items.row = 3,label.items=c(1:96),...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dim3b.eap","CQ3examples/dim3b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex1.mle","CQ3examples/ex1.shw",...)),tags = c("base","wrightMap","sample","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex3a.wle","CQ3examples/ex3a.shw",...)),tags = c("base","wrightMap","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/M10FC.eap","CQ3examples/M10FC.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2.eap","CQ3examples/ex2.shw",...)),tags = c("base","wrightMap","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2a.eap","CQ3examples/ex2a.shw",#
	,thr.lab.text = matrix(c(#
							2,3,NA,#
							1,2,3,#
							1,2,3,#
							1,3,NA,#
							1,2,3,#
							1,2,NA,#
							1,2,3,#
							1,2,3),byrow = TRUE,ncol = 3),...)),tags = c("base","wrightMap","sample","mixedpoly","CQex"))#
	 ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2b.eap","CQ3examples/ex2b.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","CQex")) #
	# ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2c.eap","CQ3examples/ex2c.shw",label.items.row=2,...),tags = c("base","wrightMap","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3A.eap","M12_MD_3A.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3B.eap","M12_MD_3B.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3C.eap","M12_MD_3C.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_2.eap","M12_MD_2.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12int_UD_3.eap","M12int_UD_3.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah","sample"))#
	# ,list(call = do.call(call,"wrightMap",list("CTime_EX.whole.eap","CTime_EX.whole.shw",label.items.srt=90,...)), tags = c("base","wrightMap","jinho"))#
	)#
	lapply(examples,testme,tags,verbose)#
	print("end of run")#
#
}
#install_github("david-ti/WrightMap",ref="dev")#
#install_github("david-ti/WrightMap",ref="kidmapGUI")#
#setwd("/Users/Rebecca/Dropbox/WrightMap/Test files")#
#setwd("/Users/Rebecca/Berkeley/David package/wrightmap/inst/extdata")#
#
testme <- function(example,tags,verbose) {#
	ex.call <- example$call#
	ex.tags <- example$tags#
	if(all(tags %in% ex.tags)) {#
	res <- tryCatch(eval(ex.call),error = function(e) FALSE)#
	if(class(res) == "logical" || verbose)#
		print(ex.call)#
		}#
}#
#
WM.test <- function(tags = "base",verbose = FALSE,...) {#
	examples <- list(#
	list(call = call("CQmodel","dicotgen2.eap","dicotgen.shw"),tags = c("base","CQmodel","dif","CQ2","1dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","dim2b.shw"),tags = c("base","CQmodel","dif","CQ2","2dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","SRCal11-S.eap","SRCal11-S.shw"),tags = c("base","CQmodel","step","CQ2","1dim","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","UE CS_V_P LLCS_shw.shw"),tags = c("base","CQmodel","courtney","imported","noGIN"))#
	,list(call = call("CQmodel","CQ3examples/ex4a.mle","CQ3examples/ex4a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","testlet2.eap","testlet2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim2b.eap","CQ3examples/dim2b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M09s.eap","M09s.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","LangFull.eap","LangFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","MathFull.eap","MathFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","DaD.eap","DaD.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","InI.eap","InI.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CT2.eap","CT2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","cdmw.eap","cdmw.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","6dim.mle","6dim.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim3b.eap","CQ3examples/dim3b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex1.mle","CQ3examples/ex1.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex3a.wle","CQ3examples/ex3a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2.eap","CQ3examples/ex2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2a.eap","CQ3examples/ex2a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2b.eap","CQ3examples/ex2b.shw"),tags = c("base","CQmodel")) #
	,list(call = call("CQmodel","CQ3examples/ex2c.eap","CQ3examples/ex2c.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M12_MD_3A.eap","M12_MD_3A.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3B.eap","M12_MD_3B.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_2.eap","M12_MD_2.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12int_UD_3.eap","M12int_UD_3.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","CTime_EX.whole.eap","CTime_EX.whole.shw"), tags = c("base","CQmodel","jinho","GIN"))#
	,list(call = do.call(call,"wrightMap",list("dicotgen2.eap","dicotgen.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","sample"))#
	,list(call = do.call(call,"wrightMap",list("dim2b.eap","dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("SRCal11-S.eap","SRCal11-S.shw", show.thr.lab = FALSE,...)),tags = c("base","wrightMap","sample","eqn"))#
	,list(call = do.call(call,"wrightMap",list("dim2b.eap","UE CS_V_P LLCS_shw.shw",label.items = c(1:140),label.items.row=3,...)),tags = c("base","wrightMap","sample"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",min.logit.pad = -28,...)),tags = c("base","wrightMap","sample","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",item.table="rater",interactions = "rater*topic",step.table = "topic",...)),tags = c("base","wrightMap","sample","eqn","CQex"))#
	,list(call = do.call(call,"wrightMap",list("testlet2.eap","testlet2.shw",item.prop=.5, label.items.row = 2,...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dim2b.eap","CQ3examples/dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("M09s.eap","M09s.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("LangFull.eap","LangFull.shw", thr.lab.text = 1:82, label.items.row = 2,label.items=c(1:82),...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("MathFull.eap","MathFull.shw", thr.lab.text = 1:78, label.items.row = 3,label.items=c(1:78),...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("DaD.eap","DaD.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("InI.eap","InI.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("CT2.eap","CT2.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("cdmw.eap","cdmw.shw",label.items.row=2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("6dim.mle","6dim.shw", label.items.row = 3,label.items=c(1:96),...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dim3b.eap","CQ3examples/dim3b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex1.mle","CQ3examples/ex1.shw",...)),tags = c("base","wrightMap","sample","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex3a.wle","CQ3examples/ex3a.shw",...)),tags = c("base","wrightMap","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/M10FC.eap","CQ3examples/M10FC.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2.eap","CQ3examples/ex2.shw",...)),tags = c("base","wrightMap","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2a.eap","CQ3examples/ex2a.shw",#
	,thr.lab.text = matrix(c(#
							2,3,NA,#
							1,2,3,#
							1,2,3,#
							1,3,NA,#
							1,2,3,#
							1,2,NA,#
							1,2,3,#
							1,2,3),byrow = TRUE,ncol = 3),...)),tags = c("base","wrightMap","sample","mixedpoly","CQex"))#
	 ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2b.eap","CQ3examples/ex2b.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","CQex")) #
	 ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2c.eap","CQ3examples/ex2c.shw",label.items.row=2,...),tags = c("base","wrightMap","CQex"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3A.eap","M12_MD_3A.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3B.eap","M12_MD_3B.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_3C.eap","M12_MD_3C.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah"))#
	# ,list(call = do.call(call,"wrightMap",list("M12_MD_2.eap","M12_MD_2.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	# ,list(call = do.call(call,"wrightMap",list("M12int_UD_3.eap","M12int_UD_3.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah","sample"))#
	# ,list(call = do.call(call,"wrightMap",list("CTime_EX.whole.eap","CTime_EX.whole.shw",label.items.srt=90,...)), tags = c("base","wrightMap","jinho"))#
	)#
	lapply(examples,testme,tags,verbose)#
	print("end of run")#
#
}
#install_github("david-ti/WrightMap",ref="dev")#
#install_github("david-ti/WrightMap",ref="kidmapGUI")#
#setwd("/Users/Rebecca/Dropbox/WrightMap/Test files")#
#setwd("/Users/Rebecca/Berkeley/David package/wrightmap/inst/extdata")#
#
testme <- function(example,tags,verbose) {#
	ex.call <- example$call#
	ex.tags <- example$tags#
	if(all(tags %in% ex.tags)) {#
	res <- tryCatch(eval(ex.call),error = function(e) FALSE)#
	if(class(res) == "logical" || verbose)#
		print(ex.call)#
		}#
}#
#
WM.test <- function(tags = "base",verbose = FALSE,...) {#
	examples <- list(#
	list(call = call("CQmodel","dicotgen2.eap","dicotgen.shw"),tags = c("base","CQmodel","dif","CQ2","1dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","dim2b.shw"),tags = c("base","CQmodel","dif","CQ2","2dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","SRCal11-S.eap","SRCal11-S.shw"),tags = c("base","CQmodel","step","CQ2","1dim","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","UE CS_V_P LLCS_shw.shw"),tags = c("base","CQmodel","courtney","imported","noGIN"))#
	,list(call = call("CQmodel","CQ3examples/ex4a.mle","CQ3examples/ex4a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","testlet2.eap","testlet2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim2b.eap","CQ3examples/dim2b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M09s.eap","M09s.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","LangFull.eap","LangFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","MathFull.eap","MathFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","DaD.eap","DaD.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","InI.eap","InI.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CT2.eap","CT2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","cdmw.eap","cdmw.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","6dim.mle","6dim.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim3b.eap","CQ3examples/dim3b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex1.mle","CQ3examples/ex1.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex3a.wle","CQ3examples/ex3a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2.eap","CQ3examples/ex2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2a.eap","CQ3examples/ex2a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2b.eap","CQ3examples/ex2b.shw"),tags = c("base","CQmodel")) #
	,list(call = call("CQmodel","CQ3examples/ex2c.eap","CQ3examples/ex2c.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M12_MD_3A.eap","M12_MD_3A.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3B.eap","M12_MD_3B.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_2.eap","M12_MD_2.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12int_UD_3.eap","M12int_UD_3.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","CTime_EX.whole.eap","CTime_EX.whole.shw"), tags = c("base","CQmodel","jinho","GIN"))#
	,list(call = do.call(call,"wrightMap",list("dicotgen2.eap","dicotgen.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","sample"))#
	,list(call = do.call(call,"wrightMap",list("dim2b.eap","dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("SRCal11-S.eap","SRCal11-S.shw", show.thr.lab = FALSE,...)),tags = c("base","wrightMap","sample","eqn"))#
	,list(call = do.call(call,"wrightMap",list("dim2b.eap","UE CS_V_P LLCS_shw.shw",label.items = c(1:140),label.items.row=3,...)),tags = c("base","wrightMap","sample"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",min.logit.pad = -28,...)),tags = c("base","wrightMap","sample","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",item.table="rater",interactions = "rater*topic",step.table = "topic",...)),tags = c("base","wrightMap","sample","eqn","CQex"))#
	,list(call = do.call(call,"wrightMap",list("testlet2.eap","testlet2.shw",item.prop=.5, label.items.row = 2,...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dim2b.eap","CQ3examples/dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("M09s.eap","M09s.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("LangFull.eap","LangFull.shw", thr.lab.text = 1:82, label.items.row = 2,label.items=c(1:82),...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("MathFull.eap","MathFull.shw", thr.lab.text = 1:78, label.items.row = 3,label.items=c(1:78),...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("DaD.eap","DaD.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("InI.eap","InI.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("CT2.eap","CT2.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("cdmw.eap","cdmw.shw",label.items.row=2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("6dim.mle","6dim.shw", label.items.row = 3,label.items=c(1:96),...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/dim3b.eap","CQ3examples/dim3b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex1.mle","CQ3examples/ex1.shw",...)),tags = c("base","wrightMap","sample","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex3a.wle","CQ3examples/ex3a.shw",...)),tags = c("base","wrightMap","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/M10FC.eap","CQ3examples/M10FC.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2.eap","CQ3examples/ex2.shw",...)),tags = c("base","wrightMap","CQex"))#
	,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2a.eap","CQ3examples/ex2a.shw",#
	,thr.lab.text = matrix(c(#
							2,3,NA,#
							1,2,3,#
							1,2,3,#
							1,3,NA,#
							1,2,3,#
							1,2,NA,#
							1,2,3,#
							1,2,3),byrow = TRUE,ncol = 3),...)),tags = c("base","wrightMap","sample","mixedpoly","CQex"))#
	 ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2b.eap","CQ3examples/ex2b.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","CQex")) #
	 ,list(call = do.call(call,"wrightMap",list("CQ3examples/ex2c.eap","CQ3examples/ex2c.shw",label.items.row=2,...)),tags = c("base","wrightMap","CQex"))#
	,list(call = do.call(call,"wrightMap",list("M12_MD_3A.eap","M12_MD_3A.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("M12_MD_3B.eap","M12_MD_3B.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("M12_MD_3C.eap","M12_MD_3C.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah"))#
	,list(call = do.call(call,"wrightMap",list("M12_MD_2.eap","M12_MD_2.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	,list(call = do.call(call,"wrightMap",list("M12int_UD_3.eap","M12int_UD_3.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah","sample"))#
	,list(call = do.call(call,"wrightMap",list("CTime_EX.whole.eap","CTime_EX.whole.shw",label.items.srt=90,...)), tags = c("base","wrightMap","jinho"))#
	)#
	lapply(examples,testme,tags,verbose)#
	print("end of run")#
#
}
WM.test(tags = c("wrightMap","sample"))
#install_github("david-ti/WrightMap",ref="dev")#
#install_github("david-ti/WrightMap",ref="kidmapGUI")#
#setwd("/Users/Rebecca/Dropbox/WrightMap/Test files")#
#setwd("/Users/Rebecca/Berkeley/David package/wrightmap/inst/extdata")#
#
testme <- function(example,tags,verbose) {#
	ex.call <- example$call#
	ex.tags <- example$tags#
	if(all(tags %in% ex.tags)) {#
	res <- tryCatch(eval(ex.call),error = function(e) FALSE)#
	if(class(res) == "logical" || verbose)#
		print(ex.call)#
		}#
}#
#
WM.test <- function(tags = "base",verbose = FALSE,...) {#
	examples <- list(#
	list(call = call("CQmodel","dicotgen2.eap","dicotgen.shw"),tags = c("base","CQmodel","dif","CQ2","1dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","dim2b.shw"),tags = c("base","CQmodel","dif","CQ2","2dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","SRCal11-S.eap","SRCal11-S.shw"),tags = c("base","CQmodel","step","CQ2","1dim","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","UE CS_V_P LLCS_shw.shw"),tags = c("base","CQmodel","courtney","imported","noGIN"))#
	,list(call = call("CQmodel","CQ3examples/ex4a.mle","CQ3examples/ex4a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","testlet2.eap","testlet2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim2b.eap","CQ3examples/dim2b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M09s.eap","M09s.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","LangFull.eap","LangFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","MathFull.eap","MathFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","DaD.eap","DaD.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","InI.eap","InI.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CT2.eap","CT2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","cdmw.eap","cdmw.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","6dim.mle","6dim.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim3b.eap","CQ3examples/dim3b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex1.mle","CQ3examples/ex1.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex3a.wle","CQ3examples/ex3a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2.eap","CQ3examples/ex2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2a.eap","CQ3examples/ex2a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2b.eap","CQ3examples/ex2b.shw"),tags = c("base","CQmodel")) #
	,list(call = call("CQmodel","CQ3examples/ex2c.eap","CQ3examples/ex2c.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M12_MD_3A.eap","M12_MD_3A.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3B.eap","M12_MD_3B.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_2.eap","M12_MD_2.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12int_UD_3.eap","M12int_UD_3.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","CTime_EX.whole.eap","CTime_EX.whole.shw"), tags = c("base","CQmodel","jinho","GIN"))#
	,list(call = do.call(call,list("wrightMap","dicotgen2.eap","dicotgen.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","sample"))#
	,list(call = do.call(call,list("wrightMap","dim2b.eap","dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,list("wrightMap","SRCal11-S.eap","SRCal11-S.shw", show.thr.lab = FALSE,...)),tags = c("base","wrightMap","sample","eqn"))#
	,list(call = do.call(call,list("wrightMap","dim2b.eap","UE CS_V_P LLCS_shw.shw",label.items = c(1:140),label.items.row=3,...)),tags = c("base","wrightMap","sample"))#
	,list(call = do.call(call,list("wrightMap","CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",min.logit.pad = -28,...)),tags = c("base","wrightMap","sample","CQex"))#
	,list(call = do.call(call,list("wrightMap","CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",item.table="rater",interactions = "rater*topic",step.table = "topic",...)),tags = c("base","wrightMap","sample","eqn","CQex"))#
	,list(call = do.call(call,list("wrightMap","testlet2.eap","testlet2.shw",item.prop=.5, label.items.row = 2,...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,list("wrightMap","CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,list("wrightMap","CQ3examples/dim2b.eap","CQ3examples/dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,list("wrightMap","M09s.eap","M09s.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,list("wrightMap","LangFull.eap","LangFull.shw", thr.lab.text = 1:82, label.items.row = 2,label.items=c(1:82),...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,list("wrightMap","MathFull.eap","MathFull.shw", thr.lab.text = 1:78, label.items.row = 3,label.items=c(1:78),...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,list("wrightMap","DaD.eap","DaD.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,list("wrightMap","InI.eap","InI.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,list("wrightMap","CT2.eap","CT2.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,list("wrightMap","cdmw.eap","cdmw.shw",label.items.row=2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,list("wrightMap","6dim.mle","6dim.shw", label.items.row = 3,label.items=c(1:96),...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,list("wrightMap","CQ3examples/dim3b.eap","CQ3examples/dim3b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,list("wrightMap","CQ3examples/ex1.mle","CQ3examples/ex1.shw",...)),tags = c("base","wrightMap","sample","CQex"))#
	,list(call = do.call(call,list("wrightMap","CQ3examples/ex3a.wle","CQ3examples/ex3a.shw",...)),tags = c("base","wrightMap","CQex"))#
	,list(call = do.call(call,list("wrightMap","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,list("wrightMap","CQ3examples/ex2.eap","CQ3examples/ex2.shw",...)),tags = c("base","wrightMap","CQex"))#
	,list(call = do.call(call,list("wrightMap","CQ3examples/ex2a.eap","CQ3examples/ex2a.shw",#
	,thr.lab.text = matrix(c(#
							2,3,NA,#
							1,2,3,#
							1,2,3,#
							1,3,NA,#
							1,2,3,#
							1,2,NA,#
							1,2,3,#
							1,2,3),byrow = TRUE,ncol = 3),...)),tags = c("base","wrightMap","sample","mixedpoly","CQex"))#
	 ,list(call = do.call(call,list("wrightMap","CQ3examples/ex2b.eap","CQ3examples/ex2b.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","CQex")) #
	 ,list(call = do.call(call,list("wrightMap","CQ3examples/ex2c.eap","CQ3examples/ex2c.shw",label.items.row=2,...)),tags = c("base","wrightMap","CQex"))#
	,list(call = do.call(call,list("wrightMap","M12_MD_3A.eap","M12_MD_3A.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	,list(call = do.call(call,list("wrightMap","M12_MD_3B.eap","M12_MD_3B.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	,list(call = do.call(call,list("wrightMap","M12_MD_3C.eap","M12_MD_3C.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah"))#
	,list(call = do.call(call,list("wrightMap","M12_MD_2.eap","M12_MD_2.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	,list(call = do.call(call,list("wrightMap","M12int_UD_3.eap","M12int_UD_3.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah","sample"))#
	,list(call = do.call(call,list("wrightMap","CTime_EX.whole.eap","CTime_EX.whole.shw",label.items.srt=90,...)), tags = c("base","wrightMap","jinho"))#
	)#
	lapply(examples,testme,tags,verbose)#
	print("end of run")#
#
}
WM.test(tags = c("wrightMap","sample"))
#install_github("david-ti/WrightMap",ref="dev")#
#install_github("david-ti/WrightMap",ref="kidmapGUI")#
#setwd("/Users/Rebecca/Dropbox/WrightMap/Test files")#
#setwd("/Users/Rebecca/Berkeley/David package/wrightmap/inst/extdata")#
#
testme <- function(example,tags,verbose) {#
	ex.call <- example$call#
	ex.tags <- example$tags#
	if(all(tags %in% ex.tags)) {#
	res <- tryCatch(eval(ex.call),error = function(e) FALSE)#
	if(class(res) == "logical" || verbose)#
		print(ex.call)#
		}#
}#
#
WM.test <- function(tags = "base",verbose = FALSE,...) {#
	examples <- list(#
	list(call = call("CQmodel","dicotgen2.eap","dicotgen.shw"),tags = c("base","CQmodel","dif","CQ2","1dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","dim2b.shw"),tags = c("base","CQmodel","dif","CQ2","2dim","dichotomous","noGIN"))#
	,list(call = call("CQmodel","SRCal11-S.eap","SRCal11-S.shw"),tags = c("base","CQmodel","step","CQ2","1dim","noGIN"))#
	,list(call = call("CQmodel","dim2b.eap","UE CS_V_P LLCS_shw.shw"),tags = c("base","CQmodel","courtney","imported","noGIN"))#
	,list(call = call("CQmodel","CQ3examples/ex4a.mle","CQ3examples/ex4a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","testlet2.eap","testlet2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim2b.eap","CQ3examples/dim2b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M09s.eap","M09s.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","LangFull.eap","LangFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","MathFull.eap","MathFull.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","DaD.eap","DaD.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","InI.eap","InI.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CT2.eap","CT2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","cdmw.eap","cdmw.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","6dim.mle","6dim.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/dim3b.eap","CQ3examples/dim3b.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex1.mle","CQ3examples/ex1.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex3a.wle","CQ3examples/ex3a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2.eap","CQ3examples/ex2.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2a.eap","CQ3examples/ex2a.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","CQ3examples/ex2b.eap","CQ3examples/ex2b.shw"),tags = c("base","CQmodel")) #
	,list(call = call("CQmodel","CQ3examples/ex2c.eap","CQ3examples/ex2c.shw"),tags = c("base","CQmodel"))#
	,list(call = call("CQmodel","M12_MD_3A.eap","M12_MD_3A.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3B.eap","M12_MD_3B.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_3C.eap","M12_MD_3C.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12_MD_2.eap","M12_MD_2.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","M12int_UD_3.eap","M12int_UD_3.shw"),tags = c("base","CQmodel","diah"))#
	,list(call = call("CQmodel","CTime_EX.whole.eap","CTime_EX.whole.shw"), tags = c("base","CQmodel","jinho","GIN"))#
	,list(call = do.call(call,list("wrightMap","dicotgen2.eap","dicotgen.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","sample"))#
	,list(call = do.call(call,list("wrightMap","dim2b.eap","dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,list("wrightMap","SRCal11-S.eap","SRCal11-S.shw", show.thr.lab = FALSE,...)),tags = c("base","wrightMap","sample","eqn"))#
	,list(call = do.call(call,list("wrightMap","dim2b.eap","UE CS_V_P LLCS_shw.shw",label.items = c(1:140),label.items.row=3,...)),tags = c("base","wrightMap","sample"))#
	,list(call = do.call(call,list("wrightMap","CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",min.logit.pad = -28,...)),tags = c("base","wrightMap","sample","CQex"))#
	,list(call = do.call(call,list("wrightMap","CQ3examples/ex4a.mle","CQ3examples/ex4a.shw",item.table="rater",interactions = "rater*topic",step.table = "topic",...)),tags = c("base","wrightMap","sample","eqn","CQex"))#
	,list(call = do.call(call,list("wrightMap","testlet2.eap","testlet2.shw",item.prop=.5, label.items.row = 2,...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,list("wrightMap","CQ3examples/dicotgen2.eap","CQ3examples/dicotgen2.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,list("wrightMap","CQ3examples/dim2b.eap","CQ3examples/dim2b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,list("wrightMap","M09s.eap","M09s.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,list("wrightMap","LangFull.eap","LangFull.shw", thr.lab.text = 1:82, label.items.row = 2,label.items=c(1:82),...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,list("wrightMap","MathFull.eap","MathFull.shw", thr.lab.text = 1:78, label.items.row = 3,label.items=c(1:78),...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,list("wrightMap","DaD.eap","DaD.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,list("wrightMap","InI.eap","InI.shw", label.items.row = 2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,list("wrightMap","CT2.eap","CT2.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,list("wrightMap","cdmw.eap","cdmw.shw",label.items.row=2,...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,list("wrightMap","6dim.mle","6dim.shw", label.items.row = 3,label.items=c(1:96),...)),tags = c("base","wrightMap","mixedpoly"))#
	,list(call = do.call(call,list("wrightMap","CQ3examples/dim3b.eap","CQ3examples/dim3b.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,list("wrightMap","CQ3examples/ex1.mle","CQ3examples/ex1.shw",...)),tags = c("base","wrightMap","sample","CQex"))#
	,list(call = do.call(call,list("wrightMap","CQ3examples/ex3a.wle","CQ3examples/ex3a.shw",...)),tags = c("base","wrightMap","CQex"))#
	,list(call = do.call(call,list("wrightMap","CQ3examples/M10FC.eap","CQ3examples/M10FC.shw",...)),tags = c("base","wrightMap"))#
	,list(call = do.call(call,list("wrightMap","CQ3examples/ex2.eap","CQ3examples/ex2.shw",...)),tags = c("base","wrightMap","CQex"))#
	,list(call = do.call(call,list("wrightMap","CQ3examples/ex2a.eap","CQ3examples/ex2a.shw"#
	,thr.lab.text = matrix(c(#
							2,3,NA,#
							1,2,3,#
							1,2,3,#
							1,3,NA,#
							1,2,3,#
							1,2,NA,#
							1,2,3,#
							1,2,3),byrow = TRUE,ncol = 3),...)),tags = c("base","wrightMap","sample","mixedpoly","CQex"))#
	 ,list(call = do.call(call,list("wrightMap","CQ3examples/ex2b.eap","CQ3examples/ex2b.shw",type = "deltas",...)),tags = c("base","wrightMap","eqn","CQex")) #
	 ,list(call = do.call(call,list("wrightMap","CQ3examples/ex2c.eap","CQ3examples/ex2c.shw",label.items.row=2,...)),tags = c("base","wrightMap","CQex"))#
	,list(call = do.call(call,list("wrightMap","M12_MD_3A.eap","M12_MD_3A.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	,list(call = do.call(call,list("wrightMap","M12_MD_3B.eap","M12_MD_3B.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	,list(call = do.call(call,list("wrightMap","M12_MD_3C.eap","M12_MD_3C.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah"))#
	,list(call = do.call(call,list("wrightMap","M12_MD_2.eap","M12_MD_2.shw",label.items.row=3,...)),tags = c("base","wrightMap","diah","mixedpoly"))#
	,list(call = do.call(call,list("wrightMap","M12int_UD_3.eap","M12int_UD_3.shw",item.table = "booklet",label.items.row=3,...)),tags = c("base","wrightMap","diah","sample"))#
	,list(call = do.call(call,list("wrightMap","CTime_EX.whole.eap","CTime_EX.whole.shw",label.items.srt=90,...)), tags = c("base","wrightMap","jinho"))#
	)#
	lapply(examples,testme,tags,verbose)#
	print("end of run")#
#
}
WM.test(tags = c("wrightMap","sample"))
setwd("/Users/Rebecca/Dropbox/WrightMap/Test files")
WM.test(tags = c("wrightMap","sample"))
wrightMap("dicotgen2.eap", "dicotgen.shw", type = "deltas")
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
#
	item.part <- round((nD * item.prop)/(1 - item.prop))#
	layout.wm <- c(seq(1:nD), rep(nD + 1, item.part))#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	par(oma = op$oma + c(0, 5, 0, 5))#
#
	layout(matrix(layout.wm, nrow = 1), widths = c(rep((1 - item.prop)/nD, nD), rep(item.prop/item.part, item.part)), heights = 0.8)#
#
	par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	par(mgp = c(op$mar[1] - 2.4, 1, 0))#
#
	do.call(person.side,list(thetas,yRange,...))#
	do.call(item.side,list(thr,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
#
}
wrightMap("dicotgen2.eap", "dicotgen.shw", type = "deltas")
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
#
	item.part <- round((nD * item.prop)/(1 - item.prop))#
	layout.wm <- c(seq(1:nD), rep(nD + 1, item.part))#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	par(oma = op$oma + c(0, 5, 0, 5))#
#
	layout(matrix(layout.wm, nrow = 1), widths = c(rep((1 - item.prop)/nD, nD), rep(item.prop/item.part, item.part)), heights = 0.8)#
#
	par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	par(mgp = c(op$mar[1] - 2.4, 1, 0))#
#
	do.call(person.side,list(thetas,yRange,...))#
	do.call(item.side,list(thresholds,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
#
}
wrightMap("dicotgen2.eap", "dicotgen.shw", type = "deltas")
itemModern <- function(thr, yRange = NULL, axis.items = "Items", show.thr.sym = TRUE, thr.sym.cex = 1.2, thr.sym.lwd = 1, thr.sym.pch = 23, thr.sym.col.fg = rgb(0, 0, 0, 0.3), thr.sym.col.bg = rgb(0, 0, 0, 0.3), show.thr.lab = TRUE, thr.lab.pos = c(2, 4), thr.lab.text = NULL, thr.lab.col = "black", thr.lab.cex = 0.85, thr.lab.font = 2,label.items.rows = 1,label.items.srt = 0,label.items = NULL,label.items.cex = 0.9,label.items.ticks = TRUE,...) {#
	thr <- as.matrix(thr)#
#
	nI <- dim(thr)[1]#
	if(is.null(yRange))#
		yRange <- c(min(thr),max(thr))#
	if (is.null(thr.lab.text)) {#
		if (!is.null(colnames(thr))) #
			thr.lab.text <- as.data.frame(matrix(rep(colnames(thr), each = nrow(thr)), nrow = nrow(thr)))#
		else thr.lab.text = col(thr)#
	}#
	if (is.null(label.items)) {#
		if (!is.null(rownames(thr))) #
			label.items <- rownames(thr)#
		else label.items <- c(paste("Item", seq(1:nI)))#
	}#
#
	plot(seq(1:nI), rep(0, nI), type = "n", axes = FALSE, xlab = axis.items, ylab = "", ylim = yRange, xlim = c(0.5, nI + 0.5), #
		cex.lab = 1.3, font.lab = 3)#
#
	box(bty = "o")#
	usr <- par("usr")#
	axis(4, las = 1, cex.axis = 1.2, font.axis = 2)#
	par(mgp = c(0, 0.2, 0))#
#
	if (show.thr.sym == TRUE) {#
#
		points(row(thr), thr, ylim = yRange, type = "p", cex = thr.sym.cex, lwd = thr.sym.lwd, pch = as.matrix(thr.sym.pch), #
			col = as.matrix(thr.sym.col.fg), bg = as.matrix(thr.sym.col.bg))#
	}#
#
	if (show.thr.lab == TRUE) {#
		if (show.thr.sym == TRUE) {#
			pos <- matrix(rep(rep_len(thr.lab.pos, ncol(thr)), nI), byrow = TRUE, ncol = ncol(thr))#
			pos <- t(sapply(1:nrow(thr), function(x) pos[x, rank(thr[x, ])]))#
			text(row(thr), thr, labels = as.matrix(thr.lab.text), col = as.matrix(thr.lab.col), pos = pos, cex = thr.lab.cex, #
				font = thr.lab.font)#
		} else {#
			text(row(thr), thr, labels = as.matrix(thr.lab.text), col = as.matrix(thr.lab.col), cex = thr.lab.cex, font = thr.lab.font)#
		}#
	}#
#
	par(mgp = c(3, 1, 0))#
#
	if (label.items.rows == 1) {#
		if (label.items.srt != 0) {#
			text.adj = c(1.1, 1.1)#
		} else {#
			text.adj = c(0.5, 2)#
		}#
		text(seq(1:nrow(thr)), y = par("usr")[3], labels = label.items, srt = label.items.srt, adj = text.adj, xpd = TRUE, cex = label.items.cex)#
#
		if (label.items.ticks == TRUE) {#
#
			axis(1, at = 1:nI, labels = FALSE, line = NA, tcl = -0.35)#
#
		}#
#
	}#
#
	if (label.items.rows == 2) {#
#
		text(seq(from = 1, to = nrow(thr), by = 2), y = par("usr")[3], labels = label.items[seq(from = 1, to = nrow(thr), by = 2)], #
			adj = c(0.5, 1.9), xpd = TRUE, cex = label.items.cex)#
#
		text(seq(from = 2, to = nrow(thr), by = 2), y = par("usr")[3], labels = label.items[seq(from = 2, to = nrow(thr), by = 2)], #
			adj = c(0.5, 3.1), xpd = TRUE, cex = label.items.cex)#
#
		if (label.items.ticks == TRUE) {#
#
			axis(1, at = seq(from = 1, to = nI, by = 2), labels = FALSE, line = NA, tcl = -0.35)#
			axis(1, at = seq(from = 2, to = nI, by = 2), labels = FALSE, line = NA, tcl = -0.9)#
#
		}#
#
	}#
#
	if (label.items.rows == 3) {#
#
		text(seq(from = 1, to = nrow(thr), by = 3), y = par("usr")[3], labels = label.items[seq(from = 1, to = nrow(thr), by = 3)], #
			adj = c(0.5, 1.9), xpd = TRUE, cex = label.items.cex)#
		text(seq(from = 2, to = nrow(thr), by = 3), y = par("usr")[3], labels = label.items[seq(from = 2, to = nrow(thr), by = 3)], #
			adj = c(0.5, 3.1), xpd = TRUE, cex = label.items.cex)#
		text(seq(from = 3, to = nrow(thr), by = 3), y = par("usr")[3], labels = label.items[seq(from = 3, to = nrow(thr), by = 3)], #
			adj = c(0.5, 4.3), xpd = TRUE, cex = label.items.cex)#
#
		if (label.items.ticks == TRUE) {#
#
			axis(1, at = seq(from = 1, to = nI, by = 3), labels = FALSE, line = NA, tcl = -0.35)#
			axis(1, at = seq(from = 2, to = nI, by = 3), labels = FALSE, line = NA, tcl = -0.9)#
			axis(1, at = seq(from = 3, to = nI, by = 3), labels = FALSE, line = NA, tcl = -1.4)#
#
		}#
#
	}#
}
itemClassic <- function(thr, yRange = NULL, axis.items = "Items",...) {#
	Nbins <- function(x) {#
#
		itemRange <- range(x)#
		round((itemRange[2] - itemRange[1])/0.2, 0)#
#
		# return(seq(from = itemRange[1], to = itemRange[2], by = .1))#
		return(seq(from = itemRange[1], to = itemRange[2], length.out = 25))#
#
	}#
#
	binItems <- function(level, labelMat, cutMat) {#
#
		paste(sort(labelMat[cutMat == level]), collapse = " | ")#
#
	}#
	thr <- as.matrix(thr)#
	nI <- dim(thr)[1]#
	nL <- dim(thr)[2]#
	if(is.null(yRange))#
		yRange <- c(min(thr),max(thr))#
#
	plot(seq(1:nI), rep(0, nI), type = "n", axes = FALSE, xlab = axis.items, ylab = "", ylim = yRange, xlim = c(0.5, nI + #
		0.5), cex.lab = 1.3, font.lab = 3)#
#
	box(bty = "o")#
#
	usr <- par("usr")#
#
	axis(4, las = 1, cex.axis = 1.2, font.axis = 2)#
#
	par(mgp = c(0, 0.2, 0))#
	item.hist <- hist(thr, plot = FALSE, breaks = Nbins(yRange))#
#
	itemBinLocations <- item.hist$mids#
	bin.size <- abs(item.hist$breaks[1] - item.hist$breaks[2])#
	item.hist <- data.frame(xleft = item.hist$mids - (bin.size/2), ybottom = item.hist$mids * 0, xright = item.hist$mids + #
		(bin.size/2), ytop = item.hist$counts)#
#
	item.labels <- matrix(rep(formatC(1:nI, digits = 1, format = "d", flag = "0"), nL), ncol = nL)#
	item.labels <- t(apply(item.labels, 1, paste, c(1:nL), sep = "."))#
#
	binnedItems <- matrix(cut(thr, breaks = c(item.hist[, 1], tail(item.hist[, 3], 1)), labels = c(1:length(item.hist[, #
		1] + 1))), ncol = nL)#
#
	binnedList <- unlist(lapply(1:length(itemBinLocations), binItems, item.labels, binnedItems))#
#
	text(cbind(0, itemBinLocations), labels = binnedList, pos = 4, offset = 1 * 20/nI)#
#
}
itemHist <- function(thr, yRange = NULL,...) {#
#
	Nbins <- function(x) {#
#
		itemRange <- range(x)#
		round((itemRange[2] - itemRange[1])/0.2, 0)#
#
		return(seq(from = itemRange[1], to = itemRange[2], length.out = 25))#
#
	}#
#
	nI <- dim(thr)[1]#
	if(is.null(yRange))#
		yRange <- c(min(thr),max(thr))#
#
	item.hist <- hist(thr, plot = FALSE, breaks = Nbins(yRange))#
	bin.size <- abs(item.hist$breaks[1] - item.hist$breaks[2])#
	item.hist <- data.frame(xleft = item.hist$mids - (bin.size/2), ybottom = item.hist$mids * 0, xright = item.hist$mids + (bin.size/2), #
		ytop = item.hist$counts)#
#
	plot(c(min(item.hist[, 1]), max(item.hist[, 3])), c(min(item.hist[, 2]), max(item.hist[, 4])), ylim = yRange, xlim = c(0, max(item.hist[, #
		4])), type = "n", axes = FALSE, ylab = "", xlab = "")#
#
	box(bty = "o")#
	usr <- par("usr")#
	axis(4, las = 1, cex.axis = 0.8, font.axis = 2)#
	par(mgp = c(0, 0.2, 0))#
	rect(item.hist[, 4], item.hist[, 1], item.hist[, 2], item.hist[, 3])#
}
wrightMap("dicotgen2.eap", "dicotgen.shw", type = "deltas")
WM.test(tags = c("wrightMap","sample"))
WM.test(tags = c("wrightMap","sample"),new.quartz = TRUE)
WM.test(tags = c("wrightMap","sample"),new.quartz = TRUE,item.side = itemClassic)
WM.test(tags = c("wrightMap","sample"),new.quartz = TRUE,item.side = "itemClassic")
wrightMap("CQ3examples/ex4a.mle", "CQ3examples/ex4a.shw", min.logit.pad = -28, #
    new.quartz = TRUE, item.side = "itemClassic")
wrightMap("CQ3examples/ex4a.mle", "CQ3examples/ex4a.shw", min.logit.pad = -28, #
    new.quartz = TRUE, item.side = "itemHist")
WM.test(tags = c("wrightMap","sample"),new.quartz = TRUE,item.side = "itemHist")
WM.test(tags = c("wrightMap","sample"),new.quartz = TRUE,dim.color = "blue")
WM.test(tags = "wrightMap")
WM.test(tags = "wrightMap",item.side = "itemClassic")
WM.test(tags = "wrightMap",person.side = "personDens")
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
#
	item.part <- round((nD * item.prop)/(1 - item.prop))#
	layout.wm <- c(seq(1:nD), rep(nD + 1, item.part))#
	print(layout.wm)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	par(oma = op$oma + c(0, 5, 0, 5))#
#
	layout(matrix(layout.wm, nrow = 1), widths = c(rep((1 - item.prop)/nD, nD), rep(item.prop/item.part, item.part)), heights = 0.8)#
#
	par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	par(mgp = c(op$mar[1] - 2.4, 1, 0))#
#
	do.call(person.side,list(thetas,yRange,...))#
	do.call(item.side,list(thresholds,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
#
}
mdim.sim.thetas <- matrix(rnorm(5000), ncol = 5)#
mdim.sim.thresholds <- runif(10, -3, 3)#
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
#
	item.part <- round((nD * item.prop)/(1 - item.prop))#
	layout.wm <- c(seq(2:nD + 1),rep(1,item.part))#
	print(layout.wm)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	par(oma = op$oma + c(0, 5, 0, 5))#
#
	layout(matrix(layout.wm, nrow = 1), widths = c(rep((1 - item.prop)/nD, nD), rep(item.prop/item.part, item.part)), heights = 0.8)#
#
	par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	par(mgp = c(op$mar[1] - 2.4, 1, 0))#
#
	do.call(item.side,list(thresholds,yRange,...))#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
#
	item.part <- round((nD * item.prop)/(1 - item.prop))#
	layout.wm <- c(seq(1:nD), rep(nD + 1))#
	print(layout.wm)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	par(oma = op$oma + c(0, 5, 0, 5))#
#
	layout(matrix(layout.wm, nrow = 1), widths = c(rep((1 - item.prop)/nD, nD), rep(item.prop/item.part, item.part)), heights = 0.8)#
#
	par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	par(mgp = c(op$mar[1] - 2.4, 1, 0))#
#
	do.call(person.side,list(thetas,yRange,...))#
	do.call(item.side,list(thresholds,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
#
	item.part <- round((nD * item.prop)/(1 - item.prop))#
	#layout.wm <- c(seq(1:nD), rep(nD + 1, item.part))#
	layout.wm <- c(seq(2:nD+1),1)#
	print(layout.wm)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	par(oma = op$oma + c(0, 5, 0, 5))#
#
	layout(matrix(layout.wm, nrow = 1), widths = c(rep((1 - item.prop)/nD, nD), rep(item.prop/item.part, item.part)), heights = 0.8)#
#
	par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	par(mgp = c(op$mar[1] - 2.4, 1, 0))#
#
	do.call(item.side,list(thresholds,yRange,...))#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
#
	item.part <- round((nD * item.prop)/(1 - item.prop))#
	#layout.wm <- c(seq(1:nD), rep(nD + 1, item.part))#
	layout.wm <- c(2:nD+1,1)#
	print(layout.wm)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	par(oma = op$oma + c(0, 5, 0, 5))#
#
	layout(matrix(layout.wm, nrow = 1), widths = c(rep((1 - item.prop)/nD, nD), rep(item.prop/item.part, item.part)), heights = 0.8)#
#
	par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	par(mgp = c(op$mar[1] - 2.4, 1, 0))#
#
	do.call(item.side,list(thresholds,yRange,...))#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
#
	item.part <- round((nD * item.prop)/(1 - item.prop))#
	#layout.wm <- c(seq(1:nD), rep(nD + 1, item.part))#
	layout.wm <- c(2:(nD+1),1)#
	print(layout.wm)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	par(oma = op$oma + c(0, 5, 0, 5))#
#
	layout(matrix(layout.wm, nrow = 1), widths = c(rep((1 - item.prop)/nD, nD), rep(item.prop/item.part, item.part)), heights = 0.8)#
#
	par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	par(mgp = c(op$mar[1] - 2.4, 1, 0))#
#
	do.call(item.side,list(thresholds,yRange,...))#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
#
	item.part <- round((nD * item.prop)/(1 - item.prop))#
	#layout.wm <- c(seq(1:nD), rep(nD + 1, item.part))#
	layout.wm <- c(2:(nD+1),rep(1,item.part)#
	print(layout.wm)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	par(oma = op$oma + c(0, 5, 0, 5))#
#
	layout(matrix(layout.wm, nrow = 1), widths = c(rep((1 - item.prop)/nD, nD), rep(item.prop/item.part, item.part)), heights = 0.8)#
#
	par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	par(mgp = c(op$mar[1] - 2.4, 1, 0))#
#
	do.call(item.side,list(thresholds,yRange,...))#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
#
}
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
#
	item.part <- round((nD * item.prop)/(1 - item.prop))#
	#layout.wm <- c(seq(1:nD), rep(nD + 1, item.part))#
	layout.wm <- c(2:(nD+1),rep(1,item.part))#
	print(layout.wm)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	par(oma = op$oma + c(0, 5, 0, 5))#
#
	layout(matrix(layout.wm, nrow = 1), widths = c(rep((1 - item.prop)/nD, nD), rep(item.prop/item.part, item.part)), heights = 0.8)#
#
	par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	par(mgp = c(op$mar[1] - 2.4, 1, 0))#
#
	do.call(item.side,list(thresholds,yRange,...))#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
personHist(mdim.sim.thetas)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
#
	item.part <- round((nD * item.prop)/(1 - item.prop))#
	#layout.wm <- c(seq(1:nD), rep(nD + 1, item.part))#
	layout.wm <- c(0,1)#
	print(layout.wm)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	par(oma = op$oma + c(0, 5, 0, 5))#
#
	layout(matrix(layout.wm, nrow = 1), widths = c(1-item.prop,item.prop), heights = 0.8)#
#
	par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	par(mgp = c(op$mar[1] - 2.4, 1, 0))#
#
	do.call(item.side,list(thresholds,yRange,...))#
	layout(matrix(c(1:nD,0),nrow = 1), widths = c(rep((1 - item.prop)/nD,nD),item.prop),heights = 0.8)#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
#
	item.part <- round((nD * item.prop)/(1 - item.prop))#
	#layout.wm <- c(seq(1:nD), rep(nD + 1, item.part))#
	layout.wm <- c(0,1)#
	print(layout.wm)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	par(oma = op$oma + c(0, 5, 0, 5))#
#
	layout(matrix(layout.wm, nrow = 1), widths = c(1-item.prop,item.prop), heights = 0.8)#
#
	par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	par(mgp = c(op$mar[1] - 2.4, 1, 0))#
#
	do.call(item.side,list(thresholds,yRange,...))#
	par(new = TRUE)#
	layout(matrix(c(1:nD,0),nrow = 1), widths = c(rep((1 - item.prop)/nD,nD),item.prop),heights = 0.8)#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
wrightMap(mdim.sim.thetas, mdim.sim.thresholds,new.quartz = TRUE)
wrightMap(mdim.sim.thetas, mdim.sim.thresholds,new.quartz = TRUE)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
#
	item.part <- round((nD * item.prop)/(1 - item.prop))#
	#layout.wm <- c(seq(1:nD), rep(nD + 1, item.part))#
	layout.wm <- c(0,1)#
	print(layout.wm)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	par(oma = op$oma + c(0, 5, 0, 5))#
#
	layout(matrix(layout.wm, nrow = 1), widths = c(1-item.prop,item.prop), heights = 0.8)#
#
	par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	par(mgp = c(op$mar[1] - 2.4, 1, 0))#
#
	do.call(item.side,list(thresholds,yRange,...))#
	#par(new = TRUE)#
	layout(matrix(c(1:nD,0),nrow = 1), widths = c(rep((1 - item.prop)/nD,nD),item.prop),heights = 0.8)#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds,new.quartz = TRUE)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
#
	item.part <- round((nD * item.prop)/(1 - item.prop))#
	#layout.wm <- c(seq(1:nD), rep(nD + 1, item.part))#
	layout.wm <- c(0,1)#
	print(layout.wm)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	par(oma = op$oma + c(0, 5, 0, 5))#
#
	layout(matrix(layout.wm, nrow = 1), widths = c(1-item.prop,item.prop), heights = 0.8)#
#
	par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	par(mgp = c(op$mar[1] - 2.4, 1, 0))#
#
	do.call(item.side,list(thresholds,yRange,...))#
	layout(matrix(c(1:nD,0),nrow = 1), widths = c(rep((1 - item.prop)/nD,nD),item.prop),heights = 0.8)#
	par(new = TRUE)#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds,new.quartz = TRUE)
personHist <- function(thetas, yRange = NULL, breaks = "FD", dim.lab.cex = 0.6, dim.lab.side = 3, dim.lab.adj = 0.5, dim.names = NULL, #
	dim.color = "white", ...) {#
#
	densExt <- function(densElem) {#
		bin.size <- abs(densElem$breaks[1] - densElem$breaks[2])#
		thetaHist <- data.frame(xleft = densElem$mids - (bin.size/2), ybottom = densElem$mids * 0, xright = densElem$mids + #
			(bin.size/2), ytop = densElem$counts)#
#
		return(thetaHist)#
	}#
#
	theta.dens <- function(thetas, breaks) {#
		densList <- apply(thetas, 2, hist, plot = FALSE, breaks = breaks)#
		distInfo <- lapply(densList, densExt)#
		return(distInfo)#
	}#
#
	person.plot <- function(distInfo, use.hist, yRange, dim.lab.side, dim.lab.cex, dim.lab.adj, p.cex.lab, p.font.lab, #
		p.lwd) {#
			par(new = TRUE)#
#
		plot(c(min(distInfo[, 1]), max(distInfo[, 3])), c(min(distInfo[, 2]), max(distInfo[, 4])), ylim = yRange, xlim = c(max(distInfo[, #
			4]), 0), type = "n", axes = FALSE, ylab = "", xlab = "", cex.lab = p.cex.lab, font.lab = p.font.lab, lwd = p.lwd, #
			col = attr(distInfo, "dim.color"))#
#
		rect(distInfo[, 4], distInfo[, 1], distInfo[, 2], distInfo[, 3], col = attr(distInfo, "dim.color"))#
		mtext(attr(distInfo, "dim.name"), side = dim.lab.side, line = -1, cex = dim.lab.cex, font = 1, adj = dim.lab.adj)#
		box(bty = "c")#
	}#
	thetas <- as.matrix(thetas)#
	nD <- ncol(thetas)#
	if(is.null(yRange))#
		yRange <- c(min(thetas),max(thetas))#
#
	distInfo <- theta.dens(thetas, breaks)#
#
	if (is.null(dim.names)) {#
		if (!is.null(names(thetas))) {#
			dim.names <- names(thetas)#
		} else dim.names <- c(paste("Dim", seq(1:nD), sep = ""))#
	}#
	if (ncol(thetas) > 1 & length(dim.color) == 1) {#
		dim.color <- rep(dim.color, ncol(thetas))#
	}#
#
	for (i in 1:nD) {#
		attr(distInfo[[i]], "dim.name") <- dim.names[i]#
		attr(distInfo[[i]], "dim.color") <- dim.color[i]#
	}#
#
	lapply(distInfo, FUN = person.plot, yRange = yRange, dim.lab.cex = dim.lab.cex, dim.lab.side = dim.lab.side, dim.lab.adj = dim.lab.adj, #
		p.cex.lab = 1.3, p.font.lab = 3, p.lwd = 2)#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds,new.quartz = TRUE)
split.screen(c(2, 1))       # split display into two screens#
split.screen(c(1, 2), 2)    # split bottom half in two#
plot(1:10)
plot(1:10, ylab = "ylab 3")
close.screen(all.screens = TRUE)
split.screen(c(2, 1))
plot(1:10, ylab = "ylab 3")
close.screen()
plot(1:10, ylab = "ylab 3")
plot(1:10, ylab = "ylab 4")
close.screen(1)
plot(1:10, ylab = "ylab 4")
screen()
close.screen(all.screens = TRUE)
split.screen(c(2, 1))
screen()
close.screen(all.screens = TRUE)
split.screen(c(2, 1))
screen(2)
plot(1:10, ylab = "ylab 4")
close.screen(2)
close.screen(all.screens = TRUE)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
#
	item.part <- round((nD * item.prop)/(1 - item.prop))#
	#layout.wm <- c(seq(1:nD), rep(nD + 1, item.part))#
	layout.wm <- c(0,1)#
	print(layout.wm)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	par(oma = op$oma + c(0, 5, 0, 5))#
	par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	par(mgp = c(op$mar[1] - 2.4, 1, 0))#
	split.screen(c(1,2))#
	screen(2)#
	do.call(item.side,list(thresholds,yRange,...))#
	close.screen(2)#
	split.screen(c(1,nD))#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
	close.screen(all.screens = TRUE)#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
personHist <- function(thetas, yRange = NULL, breaks = "FD", dim.lab.cex = 0.6, dim.lab.side = 3, dim.lab.adj = 0.5, dim.names = NULL, #
	dim.color = "white", ...) {#
#
	densExt <- function(densElem) {#
		bin.size <- abs(densElem$breaks[1] - densElem$breaks[2])#
		thetaHist <- data.frame(xleft = densElem$mids - (bin.size/2), ybottom = densElem$mids * 0, xright = densElem$mids + #
			(bin.size/2), ytop = densElem$counts)#
#
		return(thetaHist)#
	}#
#
	theta.dens <- function(thetas, breaks) {#
		densList <- apply(thetas, 2, hist, plot = FALSE, breaks = breaks)#
		distInfo <- lapply(densList, densExt)#
		return(distInfo)#
	}#
#
	person.plot <- function(distInfo, use.hist, yRange, dim.lab.side, dim.lab.cex, dim.lab.adj, p.cex.lab, p.font.lab, #
		p.lwd) {#
		plot(c(min(distInfo[, 1]), max(distInfo[, 3])), c(min(distInfo[, 2]), max(distInfo[, 4])), ylim = yRange, xlim = c(max(distInfo[, #
			4]), 0), type = "n", axes = FALSE, ylab = "", xlab = "", cex.lab = p.cex.lab, font.lab = p.font.lab, lwd = p.lwd, #
			col = attr(distInfo, "dim.color"))#
#
		rect(distInfo[, 4], distInfo[, 1], distInfo[, 2], distInfo[, 3], col = attr(distInfo, "dim.color"))#
		mtext(attr(distInfo, "dim.name"), side = dim.lab.side, line = -1, cex = dim.lab.cex, font = 1, adj = dim.lab.adj)#
		box(bty = "c")#
	}#
	thetas <- as.matrix(thetas)#
	nD <- ncol(thetas)#
	if(is.null(yRange))#
		yRange <- c(min(thetas),max(thetas))#
#
	distInfo <- theta.dens(thetas, breaks)#
#
	if (is.null(dim.names)) {#
		if (!is.null(names(thetas))) {#
			dim.names <- names(thetas)#
		} else dim.names <- c(paste("Dim", seq(1:nD), sep = ""))#
	}#
	if (ncol(thetas) > 1 & length(dim.color) == 1) {#
		dim.color <- rep(dim.color, ncol(thetas))#
	}#
#
	for (i in 1:nD) {#
		attr(distInfo[[i]], "dim.name") <- dim.names[i]#
		attr(distInfo[[i]], "dim.color") <- dim.color[i]#
	}#
#
	lapply(distInfo, FUN = person.plot, yRange = yRange, dim.lab.cex = dim.lab.cex, dim.lab.side = dim.lab.side, dim.lab.adj = dim.lab.adj, #
		p.cex.lab = 1.3, p.font.lab = 3, p.lwd = 2)#
#
}
screen()
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
setwd("/Users/Rebecca/Berkeley/David package/wrightmap/R/")#
#
source("wrightMap.R")#
source("CQmodel.R")#
source("print.CQmodel.R")#
#
source("itemData.R")#
source("itemData.default.R")#
source("itemData.character.R")#
source("itemData.CQmodel.R")#
#
source("personData.R")#
source("personData.default.R")#
source("personData.character.R")#
source("personData.CQmodel.R")#
#
source("make.thresholds.R")#
source("make.thresholds.default.R")#
source("make.thresholds.character.R")#
source("make.thresholds.CQmodel.R")#
#
source("make.deltas.R")#
source("make.deltas.default.R")#
source("make.deltas.character.R")#
source("make.deltas.CQmodel.R")#
#
source("itemModern.R")#
source("itemClassic.R")#
source("itemHist.R")#
#
source("personHist.R")#
source("personDens.R")
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
split.screen(c(1,2))#
	screen(2)
screen
screen()
close.screen(all.screens = TRUE)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	par(oma = op$oma + c(0, 5, 0, 5))#
	par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	par(mgp = c(op$mar[1] - 2.4, 1, 0))#
	split.screen(c(1,2))#
	screen(2)#
	do.call(item.side,list(thresholds,yRange,...))#
	close.screen(2)#
	split.screen(c(1,nD))#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
	close.screen(all.screens = TRUE)#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	par(oma = op$oma + c(0, 5, 0, 5))#
	par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	par(mgp = c(op$mar[1] - 2.4, 1, 0))#
	split.screen(c(1,2))#
	screen(2)#
	do.call(item.side,list(thresholds,yRange,...))#
	close.screen(2)#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
	close.screen(all.screens = TRUE)#
#
}
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	par(oma = op$oma + c(0, 5, 0, 5))#
	par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	par(mgp = c(op$mar[1] - 2.4, 1, 0))#
	split.screen(c(1,2))#
	screen(2)#
	do.call(item.side,list(thresholds,yRange,...))#
	close.screen(2)#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
	close.screen(all.screens = TRUE)#
#
}
personHist <- function(thetas, yRange = NULL, breaks = "FD", dim.lab.cex = 0.6, dim.lab.side = 3, dim.lab.adj = 0.5, dim.names = NULL, #
	dim.color = "white", ...) {#
#
	densExt <- function(densElem) {#
		bin.size <- abs(densElem$breaks[1] - densElem$breaks[2])#
		thetaHist <- data.frame(xleft = densElem$mids - (bin.size/2), ybottom = densElem$mids * 0, xright = densElem$mids + #
			(bin.size/2), ytop = densElem$counts)#
#
		return(thetaHist)#
	}#
#
	theta.dens <- function(thetas, breaks) {#
		densList <- apply(thetas, 2, hist, plot = FALSE, breaks = breaks)#
		distInfo <- lapply(densList, densExt)#
		return(distInfo)#
	}#
#
	person.plot <- function(distInfo, use.hist, yRange, dim.lab.side, dim.lab.cex, dim.lab.adj, p.cex.lab, p.font.lab, #
		p.lwd) {#
		plot(c(min(distInfo[, 1]), max(distInfo[, 3])), c(min(distInfo[, 2]), max(distInfo[, 4])), ylim = yRange, xlim = c(max(distInfo[, #
			4]), 0), type = "n", axes = FALSE, ylab = "", xlab = "", cex.lab = p.cex.lab, font.lab = p.font.lab, lwd = p.lwd, #
			col = attr(distInfo, "dim.color"))#
#
		rect(distInfo[, 4], distInfo[, 1], distInfo[, 2], distInfo[, 3], col = attr(distInfo, "dim.color"))#
		mtext(attr(distInfo, "dim.name"), side = dim.lab.side, line = -1, cex = dim.lab.cex, font = 1, adj = dim.lab.adj)#
		box(bty = "c")#
		close.screen(screen())#
	}#
	thetas <- as.matrix(thetas)#
	nD <- ncol(thetas)#
	if(is.null(yRange))#
		yRange <- c(min(thetas),max(thetas))#
#
	distInfo <- theta.dens(thetas, breaks)#
#
	if (is.null(dim.names)) {#
		if (!is.null(names(thetas))) {#
			dim.names <- names(thetas)#
		} else dim.names <- c(paste("Dim", seq(1:nD), sep = ""))#
	}#
	if (ncol(thetas) > 1 & length(dim.color) == 1) {#
		dim.color <- rep(dim.color, ncol(thetas))#
	}#
#
	for (i in 1:nD) {#
		attr(distInfo[[i]], "dim.name") <- dim.names[i]#
		attr(distInfo[[i]], "dim.color") <- dim.color[i]#
	}#
	split.screen(c(1,nD))#
#
	lapply(distInfo, FUN = person.plot, yRange = yRange, dim.lab.cex = dim.lab.cex, dim.lab.side = dim.lab.side, dim.lab.adj = dim.lab.adj, #
		p.cex.lab = 1.3, p.font.lab = 3, p.lwd = 2)#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
setwd("/Users/Rebecca/Berkeley/David package/wrightmap/R/")#
#
source("wrightMap.R")#
source("CQmodel.R")#
source("print.CQmodel.R")#
#
source("itemData.R")#
source("itemData.default.R")#
source("itemData.character.R")#
source("itemData.CQmodel.R")#
#
source("personData.R")#
source("personData.default.R")#
source("personData.character.R")#
source("personData.CQmodel.R")#
#
source("make.thresholds.R")#
source("make.thresholds.default.R")#
source("make.thresholds.character.R")#
source("make.thresholds.CQmodel.R")#
#
source("make.deltas.R")#
source("make.deltas.default.R")#
source("make.deltas.character.R")#
source("make.deltas.CQmodel.R")#
#
source("itemModern.R")#
source("itemClassic.R")#
source("itemHist.R")#
#
source("personHist.R")#
source("personDens.R")
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
screen()
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	par(oma = op$oma + c(0, 5, 0, 5))#
	par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	par(mgp = c(op$mar[1] - 2.4, 1, 0))#
	split.screen(c(1,2))#
	print(split.screen())#
	screen(2)#
	do.call(item.side,list(thresholds,yRange,...))#
	close.screen(2)#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
	close.screen(all.screens = TRUE)#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	par(oma = op$oma + c(0, 5, 0, 5))#
	par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	par(mgp = c(op$mar[1] - 2.4, 1, 0))#
	close.screen(all.screens = TRUE)#
	split.screen(c(1,2))#
	print(split.screen())#
	screen(2)#
	do.call(item.side,list(thresholds,yRange,...))#
	close.screen(2)#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
	close.screen(all.screens = TRUE)#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	par(oma = op$oma + c(0, 5, 0, 5))#
	par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	par(mgp = c(op$mar[1] - 2.4, 1, 0))#
	close.screen(all.screens = TRUE)#
	person.screen <- c(0,1 - item.prop,0,1)#
	item.screen <- c(item.prop,1,0,1)#
	split.screen(as.matrix(c(person.screen,item.screen),byrow = TRUE))#
	print(split.screen())#
	screen(2)#
	do.call(item.side,list(thresholds,yRange,...))#
	close.screen(2)#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
	close.screen(all.screens = TRUE)#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	par(oma = op$oma + c(0, 5, 0, 5))#
	par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	par(mgp = c(op$mar[1] - 2.4, 1, 0))#
	close.screen(all.screens = TRUE)#
	person.screen <- c(0,1 - item.prop,0,1)#
	item.screen <- c(item.prop,1,0,1)#
	split.screen(as.matrix(c(person.screen,item.screen),ncol = 4,byrow = TRUE))#
	print(split.screen())#
	screen(2)#
	do.call(item.side,list(thresholds,yRange,...))#
	close.screen(2)#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
	close.screen(all.screens = TRUE)#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	par(oma = op$oma + c(0, 5, 0, 5))#
	par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	par(mgp = c(op$mar[1] - 2.4, 1, 0))#
	close.screen(all.screens = TRUE)#
	person.screen <- c(0,1 - item.prop,0,1)#
	item.screen <- c(item.prop,1,0,1)#
	screens <- as.matrix(c(person.screen,item.screen),ncol = 4,byrow = TRUE)#
	print(screens)#
	split.screen(screens)#
	print(split.screen())#
	screen(2)#
	do.call(item.side,list(thresholds,yRange,...))#
	close.screen(2)#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
	close.screen(all.screens = TRUE)#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
person.screen <- c(0,1 - item.prop,0,1)#
	item.screen <- c(item.prop,1,0,1)#
	screens <- as.matrix(c(person.screen,item.screen),ncol = 4)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	par(oma = op$oma + c(0, 5, 0, 5))#
	par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	par(mgp = c(op$mar[1] - 2.4, 1, 0))#
	close.screen(all.screens = TRUE)#
	person.screen <- c(0,1 - item.prop,0,1)#
	item.screen <- c(item.prop,1,0,1)#
	screens <- as.matrix(c(person.screen,item.screen),ncol = 4)#
	print(screens)#
	split.screen(screens)#
	print(split.screen())#
	screen(2)#
	do.call(item.side,list(thresholds,yRange,...))#
	close.screen(2)#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
	close.screen(all.screens = TRUE)#
#
}
person.screen <- c(0,1 - item.prop,0,1)#
	item.screen <- c(item.prop,1,0,1)#
	screens <- as.matrix(c(person.screen,item.screen),ncol = 4)
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
as.matrix(1:8,ncol = 4)
as.matrix(1:8,nrol = 4)
as.matrix(1:8,nrow = 4)
mdat <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE,#
               dimnames = list(c("row1", "row2"),#
                               c("C.1", "C.2", "C.3")))#
mdat
mdat <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE)#
mdat
mdat <- matrix(c(1,2,3, 11,12,13), nrow = 2, byrow = TRUE)
mdat
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	par(oma = op$oma + c(0, 5, 0, 5))#
	par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	par(mgp = c(op$mar[1] - 2.4, 1, 0))#
	close.screen(all.screens = TRUE)#
	person.screen <- c(0,1 - item.prop,0,1)#
	item.screen <- c(item.prop,1,0,1)#
	screens <- matrix(c(person.screen,item.screen),ncol = 4)#
	print(screens)#
	split.screen(screens)#
	print(split.screen())#
	screen(2)#
	do.call(item.side,list(thresholds,yRange,...))#
	close.screen(2)#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
	close.screen(all.screens = TRUE)#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	par(oma = op$oma + c(0, 5, 0, 5))#
	par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	par(mgp = c(op$mar[1] - 2.4, 1, 0))#
	close.screen(all.screens = TRUE)#
	person.screen <- c(0,1 - item.prop,0,1)#
	item.screen <- c(item.prop,1,0,1)#
	screens <- matrix(c(person.screen,item.screen),ncol = 4,byrow = TRUE)#
	print(screens)#
	split.screen(screens)#
	print(split.screen())#
	screen(2)#
	do.call(item.side,list(thresholds,yRange,...))#
	close.screen(2)#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
	close.screen(all.screens = TRUE)#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	par(oma = op$oma + c(0, 5, 0, 5))#
	par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	par(mgp = c(op$mar[1] - 2.4, 1, 0))#
	close.screen(all.screens = TRUE)#
	person.screen <- c(0,1 - item.prop,0,1)#
	item.screen <- c(1 - item.prop,1,0,1)#
	screens <- matrix(c(person.screen,item.screen),ncol = 4,byrow = TRUE)#
	print(screens)#
	split.screen(screens)#
	print(split.screen())#
	screen(2)#
	do.call(item.side,list(thresholds,yRange,...))#
	close.screen(2)#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
	close.screen(all.screens = TRUE)#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	#par(oma = op$oma + c(0, 5, 0, 5))#
	#par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	#par(mgp = c(op$mar[1] - 2.4, 1, 0))#
	close.screen(all.screens = TRUE)#
	person.screen <- c(0,1 - item.prop,0,1)#
	item.screen <- c(1 - item.prop,1,0,1)#
	screens <- matrix(c(person.screen,item.screen),ncol = 4,byrow = TRUE)#
	print(screens)#
	split.screen(screens)#
	print(split.screen())#
	screen(2)#
	do.call(item.side,list(thresholds,yRange,...))#
	close.screen(2)#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
	close.screen(all.screens = TRUE)#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
itemModern <- function(thr, yRange = NULL, axis.items = "Items", show.thr.sym = TRUE, thr.sym.cex = 1.2, thr.sym.lwd = 1, thr.sym.pch = 23, thr.sym.col.fg = rgb(0, 0, 0, 0.3), thr.sym.col.bg = rgb(0, 0, 0, 0.3), show.thr.lab = TRUE, thr.lab.pos = c(2, 4), thr.lab.text = NULL, thr.lab.col = "black", thr.lab.cex = 0.85, thr.lab.font = 2,label.items.rows = 1,label.items.srt = 0,label.items = NULL,label.items.cex = 0.9,label.items.ticks = TRUE,...) {#
	thr <- as.matrix(thr)#
#
	nI <- dim(thr)[1]#
	if(is.null(yRange))#
		yRange <- c(min(thr),max(thr))#
	if (is.null(thr.lab.text)) {#
		if (!is.null(colnames(thr))) #
			thr.lab.text <- as.data.frame(matrix(rep(colnames(thr), each = nrow(thr)), nrow = nrow(thr)))#
		else thr.lab.text = col(thr)#
	}#
	if (is.null(label.items)) {#
		if (!is.null(rownames(thr))) #
			label.items <- rownames(thr)#
		else label.items <- c(paste("Item", seq(1:nI)))#
	}#
#
	plot(seq(1:nI), rep(0, nI), type = "n", axes = FALSE, xlab = axis.items, ylab = "", ylim = yRange, xlim = c(0.5, nI + 0.5), #
		cex.lab = 1.3, font.lab = 3)#
#
	box(bty = "o")#
	usr <- par("usr")#
	axis(4, las = 1, cex.axis = 1.2, font.axis = 2)#
	#par(mgp = c(0, 0.2, 0))#
#
	if (show.thr.sym == TRUE) {#
#
		points(row(thr), thr, ylim = yRange, type = "p", cex = thr.sym.cex, lwd = thr.sym.lwd, pch = as.matrix(thr.sym.pch), #
			col = as.matrix(thr.sym.col.fg), bg = as.matrix(thr.sym.col.bg))#
	}#
#
	if (show.thr.lab == TRUE) {#
		if (show.thr.sym == TRUE) {#
			pos <- matrix(rep(rep_len(thr.lab.pos, ncol(thr)), nI), byrow = TRUE, ncol = ncol(thr))#
			pos <- t(sapply(1:nrow(thr), function(x) pos[x, rank(thr[x, ])]))#
			text(row(thr), thr, labels = as.matrix(thr.lab.text), col = as.matrix(thr.lab.col), pos = pos, cex = thr.lab.cex, #
				font = thr.lab.font)#
		} else {#
			text(row(thr), thr, labels = as.matrix(thr.lab.text), col = as.matrix(thr.lab.col), cex = thr.lab.cex, font = thr.lab.font)#
		}#
	}#
#
	#par(mgp = c(3, 1, 0))#
#
	if (label.items.rows == 1) {#
		if (label.items.srt != 0) {#
			text.adj = c(1.1, 1.1)#
		} else {#
			text.adj = c(0.5, 2)#
		}#
		text(seq(1:nrow(thr)), y = par("usr")[3], labels = label.items, srt = label.items.srt, adj = text.adj, xpd = TRUE, cex = label.items.cex)#
#
		if (label.items.ticks == TRUE) {#
#
			axis(1, at = 1:nI, labels = FALSE, line = NA, tcl = -0.35)#
#
		}#
#
	}#
#
	if (label.items.rows == 2) {#
#
		text(seq(from = 1, to = nrow(thr), by = 2), y = par("usr")[3], labels = label.items[seq(from = 1, to = nrow(thr), by = 2)], #
			adj = c(0.5, 1.9), xpd = TRUE, cex = label.items.cex)#
#
		text(seq(from = 2, to = nrow(thr), by = 2), y = par("usr")[3], labels = label.items[seq(from = 2, to = nrow(thr), by = 2)], #
			adj = c(0.5, 3.1), xpd = TRUE, cex = label.items.cex)#
#
		if (label.items.ticks == TRUE) {#
#
			axis(1, at = seq(from = 1, to = nI, by = 2), labels = FALSE, line = NA, tcl = -0.35)#
			axis(1, at = seq(from = 2, to = nI, by = 2), labels = FALSE, line = NA, tcl = -0.9)#
#
		}#
#
	}#
#
	if (label.items.rows == 3) {#
#
		text(seq(from = 1, to = nrow(thr), by = 3), y = par("usr")[3], labels = label.items[seq(from = 1, to = nrow(thr), by = 3)], #
			adj = c(0.5, 1.9), xpd = TRUE, cex = label.items.cex)#
		text(seq(from = 2, to = nrow(thr), by = 3), y = par("usr")[3], labels = label.items[seq(from = 2, to = nrow(thr), by = 3)], #
			adj = c(0.5, 3.1), xpd = TRUE, cex = label.items.cex)#
		text(seq(from = 3, to = nrow(thr), by = 3), y = par("usr")[3], labels = label.items[seq(from = 3, to = nrow(thr), by = 3)], #
			adj = c(0.5, 4.3), xpd = TRUE, cex = label.items.cex)#
#
		if (label.items.ticks == TRUE) {#
#
			axis(1, at = seq(from = 1, to = nI, by = 3), labels = FALSE, line = NA, tcl = -0.35)#
			axis(1, at = seq(from = 2, to = nI, by = 3), labels = FALSE, line = NA, tcl = -0.9)#
			axis(1, at = seq(from = 3, to = nI, by = 3), labels = FALSE, line = NA, tcl = -1.4)#
#
		}#
#
	}#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	#par(oma = op$oma + c(0, 5, 0, 5))#
	#par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	#par(mgp = c(op$mar[1] - 2.4, 1, 0))#
	close.screen(all.screens = TRUE)#
	person.screen <- c(.1,1 - item.prop,0,1)#
	item.screen <- c(1 - item.prop,.9,0,1)#
	screens <- matrix(c(person.screen,item.screen),ncol = 4,byrow = TRUE)#
	print(screens)#
	split.screen(screens)#
	print(split.screen())#
	screen(2)#
	do.call(item.side,list(thresholds,yRange,...))#
	close.screen(2)#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
	close.screen(all.screens = TRUE)#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	#par(oma = op$oma + c(0, 5, 0, 5))#
	#par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	#par(mgp = c(op$mar[1] - 2.4, 1, 0))#
	close.screen(all.screens = TRUE)#
	divider = (1 - item.prop)*.8 + .1#
	person.screen <- c(.1,divider,0,1)#
	item.screen <- c(divider,.9,0,1)#
	screens <- matrix(c(person.screen,item.screen),ncol = 4,byrow = TRUE)#
	print(screens)#
	split.screen(screens)#
	print(split.screen())#
	screen(2)#
	do.call(item.side,list(thresholds,yRange,...))#
	close.screen(2)#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
	close.screen(all.screens = TRUE)#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
wrightMap2 <-#
function(thetas, thresholds, throld = NULL, design.matrix = "normal", make.from = "deltas",alpha = 1, c.params = 0, use.hist = TRUE, item.plot = "modern", main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", axis.items = "Items", label.items = NULL, label.items.rows = 1, label.items.cex = 0.9, label.items.srt = 0, label.items.ticks = TRUE, show.thr.lab = TRUE, show.thr.sym = TRUE, thr.lab.text = NULL, thr.lab.col = "black", thr.lab.pos = c(2, 4), thr.lab.font = 2, thr.lab.cex = 0.85, thr.sym.pch = 23, thr.sym.col.fg = rgb(0, 0, 0, 0.3), thr.sym.col.bg = rgb(0, 0, 0, 0.3), thr.sym.cex = 1.2, thr.sym.lwd = 1, dim.names = NULL, dim.color = NULL, dim.lab.side = 3, dim.lab.cex = 0.6,dim.lab.adj = 0.5, breaks = "FD", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8,return.thresholds = TRUE, new.quartz= FALSE,...) {#
    ## Helper Functions#
    theta.dens <- function(thetas, use.hist, breaks) {#
        if (use.hist == FALSE) {#
            densList <- apply(thetas, 2, density, na.rm = TRUE)#
            densExt <- function(densElem) {#
                xDim <- densElem["y"][[1]]#
                yDim <- densElem["x"][[1]]#
                xDim <- xDim/max(xDim)#
                densInfo <- cbind(xDim, yDim)#
                return(densInfo)#
            }#
            distInfo <- lapply(densList, densExt)#
        } else {#
            densList <- apply(thetas, 2, hist, plot = FALSE, breaks = breaks)#
            densExt <- function(densElem) {#
                bin.size <- abs(densElem$breaks[1] - densElem$breaks[2])#
                thetaHist <- data.frame(xleft = densElem$mids - (bin.size/2), ybotton = densElem$mids * 0, xright = densElem$mids + (bin.size/2), ytop = densElem$counts)#
                return(thetaHist)#
            }#
            distInfo <- lapply(densList, densExt)#
        }#
        return(distInfo)#
    }#
    personPlot <- function(distInfo, use.hist, yRange, xRange, dim.lab.side, dim.lab.cex, dim.lab.adj, dims.col, p.cex.lab, p.font.lab, p.lwd, p.las, p.cex.axis, p.font.axis, p.tcl) {#
        if (use.hist == FALSE) {#
            plot(distInfo, ylim = yRange, xlim = xRange, type = "l", axes = FALSE, ylab = "", xlab = "", cex.lab = p.cex.lab, font.lab = p.font.lab, lwd = p.lwd, #
                col = attr(distInfo, "dim.color"))#
        } else {#
            # print( distInfo)#
            #print(attr(distInfo, "dim.color"))#
            plot(c(min(distInfo[, 1]), max(distInfo[, 3])), c(min(distInfo[, 2]), max(distInfo[, 4])), ylim = yRange, xlim = c(max(distInfo[, 4]), 0), #
                type = "n", axes = FALSE, ylab = "", xlab = "", cex.lab = p.cex.lab, font.lab = p.font.lab, lwd = p.lwd, col = attr(distInfo, "dim.color"))#
            rect(distInfo[, 4], distInfo[, 1], distInfo[, 2], distInfo[, 3], col = attr(distInfo, "dim.color"))#
        }#
        mtext(attr(distInfo, "dim.name"), side = dim.lab.side, line = -1, cex = dim.lab.cex, font = 1, adj = dim.lab.adj)#
        box(bty = "c")#
    }#
    Nbins <- function(x){#
#
        itemRange <- range(x)#
        round((itemRange[2]-itemRange[1])/.2,0)#
#
        # return(seq(from = itemRange[1], to = itemRange[2], by = .1))#
        return(seq(from = itemRange[1], to = itemRange[2], length.out = 25))#
#
    }#
#
    binItems <- function( level, labelMat, cutMat){#
#
        paste( sort(labelMat[cutMat==level]), collapse=" | ")#
#
    }#
#
    # Preparing Data#
    if(!is.null(throld)) {#
        thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
    }#
    else if(any(c.params != 0)) {#
        thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = .5, alpha = alpha, make.from = make.from, c.params = c.params)#
    }#
    thetas <- as.matrix(thetas)#
    thr <- as.matrix(thresholds)#
    # Setting plot parameters#
    nD <- ncol(thetas)#
    nI <- dim(thr)[1]#
    nL <- dim(thr)[2]#
    if (is.null(label.items)) {#
        label.items <- c(paste("Item", seq(1:nI)))#
    }#
    min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
    max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
    if (is.null(min.l)){#
#
        min.l <- min(c(min.theta, thr), na.rm = TRUE) - min.logit.pad#
#
    }#
#
    if (is.null(max.l)){#
#
        max.l <- max(c(max.theta, thr), na.rm = TRUE) + max.logit.pad#
#
    }#
    yRange <- c(min.l, max.l)#
    xRange <- c(1, 0)#
#
    item.side <- round((nD * item.prop)/(1 - item.prop))#
    layout.wm <- c(seq(1:nD), rep(nD + 1, item.side))#
#
    if ( is.null(dim.color)){#
#
        if ( use.hist) { dim.color <- "white"}#
        if (!use.hist) { dim.color <- "black"}#
#
    } #
    # Creating default matrices if info not provided#
    if (is.null(dim.names)) {#
        dim.names <- c(paste("Dim", seq(1:nD), sep = ""))#
    }#
    if (is.null(thr.lab.text)) {#
        thr.lab.text = col(thr)#
    }#
    if (ncol(thetas) > 1 & length(dim.color) == 1) {#
        dim.color <- rep(dim.color, ncol(thetas))#
    }#
    # Generating Full Map#
    if(new.quartz)#
        dev.new(width = 9, height = 5)#
    op <- par("oma","mar","mgp")#
    par(oma = op$oma + c(0,5,0,5))#
    layout(matrix(layout.wm, nrow = 1), widths = c(rep((1 - item.prop)/nD, nD), rep(item.prop/item.side, item.side)), heights = 0.8)#
    ## Generating Person Side#
    par(mar = c(op$mar[1],0.2,op$mar[3],.1))#
    par(mgp = c(op$mar[1] - 2.4, 1, 0))#
    distInfo <- theta.dens(thetas, use.hist, breaks)#
    for (i in 1:nD) {#
        attr(distInfo[[i]], "dim.name") <- dim.names[i]#
        attr(distInfo[[i]], "dim.color") <- dim.color[i]#
    }#
    lapply(distInfo, FUN = personPlot, use.hist = use.hist, yRange = yRange, xRange = xRange, dim.lab.cex = dim.lab.cex, dim.lab.side = dim.lab.side, dim.lab.adj = dim.lab.adj, p.cex.lab = 1.3, #
        p.font.lab = 3, p.lwd = 2, p.las = 1, p.cex.axis = 1.1, p.font.axis = 2, p.tcl = -0.5)#
    ## Generating Item Side#
#
    if (item.plot == "modern"){#
#
        plot(seq(1:nI), rep(0, nI), type = "n", axes = FALSE, xlab = axis.items, ylab = "", ylim = yRange, xlim = c(0.5, nI + 0.5), cex.lab = 1.3, font.lab = 3)#
#
        box(bty = "o")#
        usr <- par("usr")#
        axis(4, las = 1, cex.axis = 1.2, font.axis = 2)#
#
        par(mgp = c(0, 0.2, 0))#
       if (show.thr.sym == TRUE) {#
            points(row(thr), thr, ylim = yRange, type = "p", cex = thr.sym.cex, lwd = thr.sym.lwd, pch = as.matrix(thr.sym.pch), col = as.matrix(thr.sym.col.fg), #
                bg = as.matrix(thr.sym.col.bg))#
        }#
        if (show.thr.lab == TRUE) {#
            if (show.thr.sym == TRUE){#
                pos <- matrix(rep(rep_len(thr.lab.pos, ncol(thr)), nI), byrow = TRUE, ncol = ncol(thr))#
                pos <- t(sapply(1:nrow(thr), function(x) pos[x, rank(thr[x, ])]))#
                text(row(thr), thr, labels = as.matrix(thr.lab.text), col = as.matrix(thr.lab.col), pos = pos, cex = thr.lab.cex, font = thr.lab.font)#
            } else{#
#
                text(row(thr), thr, labels = as.matrix(thr.lab.text), col = as.matrix(thr.lab.col), cex = thr.lab.cex, font = thr.lab.font)#
#
            }#
        }#
#
    } #
#
    if (item.plot == "classic"){#
#
        plot(seq(1:nI), rep(0, nI), type = "n", axes = FALSE, xlab = axis.items, ylab = "", ylim = yRange, xlim = c(0.5, nI + 0.5), cex.lab = 1.3, font.lab = 3)#
#
        box(bty = "o")#
        usr <- par("usr")#
        axis(4, las = 1, cex.axis = 1.2, font.axis = 2)#
#
        par(mgp = c(0, 0.2, 0))#
#
        item.hist <- hist(thresholds, plot = FALSE, breaks = Nbins(yRange))#
#
        itemBinLocations <- item.hist$mids#
#
        bin.size <- abs(item.hist$breaks[1] - item.hist$breaks[2])#
#
        item.hist <- data.frame(xleft   = item.hist$mids - (bin.size/2), #
                                ybotton = item.hist$mids * 0, #
                                xright  = item.hist$mids + (bin.size/2), #
                                ytop    = item.hist$counts)#
#
        item.labels <- matrix( rep( formatC( 1:nI, digits = 1, format = "d", flag = "0"), nL), ncol = nL)#
        item.labels <- t( apply( item.labels, 1, paste, c(1:nL), sep=".") )#
        binnedItems <- matrix(cut(thresholds,breaks=c(item.hist[,1],tail(item.hist[,3],1)), labels=c(1:length(item.hist[,1]+1))), ncol=nL)#
        binnedList <- unlist(lapply(1:length(itemBinLocations), binItems, item.labels, binnedItems))#
#
        text(cbind(0,itemBinLocations),labels = binnedList, pos = 4, offset = 1)    #
    }#
#
    if (item.plot == "hist"){#
#
        item.hist <- hist(thresholds, plot = FALSE, breaks = Nbins(yRange))#
#
        itemBinLocations <- item.hist$mids#
#
        bin.size <- abs(item.hist$breaks[1] - item.hist$breaks[2])#
#
        item.hist <- data.frame(xleft   = item.hist$mids - (bin.size/2), #
                                ybotton = item.hist$mids * 0, #
                                xright  = item.hist$mids + (bin.size/2), #
                                ytop    = item.hist$counts)#
#
        plot(c(min(item.hist[, 1]), max(item.hist[, 3])), c(min(item.hist[, 2]), max(item.hist[, 4])), ylim = yRange, xlim = c(0,max(item.hist[, 4])), type = "n", axes = FALSE, ylab = "", xlab = "")#
#
        box(bty = "o")#
        usr <- par("usr")#
        axis(4, las = 1, cex.axis = 0.8, font.axis = 2)#
#
        par(mgp = c(0, 0.2, 0))#
#
        item.labels <- matrix( rep( formatC( 1:nI, digits = 1, format = "d", flag = "0"), nL), ncol = nL)#
        item.labels <- t( apply( item.labels, 1, paste, c(1:nL), sep=".") )#
        binnedItems <- matrix(cut(thresholds,breaks=c(item.hist[,1],tail(item.hist[,3],1)), labels=c(1:length(item.hist[,1]+1))), ncol=nL)#
        binnedList <- unlist(lapply(1:length(itemBinLocations), binItems, item.labels, binnedItems))#
#
        rect(item.hist[, 4], item.hist[, 1], item.hist[, 2], item.hist[, 3])#
#
    }#
    par(mgp = c(3, 1, 0))#
    if (item.plot == "modern"){#
#
        if (label.items.rows == 1) {#
            if (label.items.srt != 0){ #
                text.adj = c(1.1,1.1)#
            } else {#
                text.adj = c(0.5, 2)#
            }#
#
            text(seq(1:nrow(thr)), y = par("usr")[3], labels = label.items, srt = label.items.srt, adj = text.adj, xpd = TRUE, cex = label.items.cex)#
            if (label.items.ticks == TRUE) {#
                axis(1, at = 1:nI, labels = FALSE, line = NA, tcl = -0.35)#
            }#
        }#
        if (label.items.rows == 2) {#
            text(seq(from = 1, to = nrow(thr), by = 2), y = par("usr")[3], labels = label.items[seq(from = 1, to = nrow(thr), by = 2)], adj = c(0.5, 1.9), #
                xpd = TRUE, cex = label.items.cex)#
            text(seq(from = 2, to = nrow(thr), by = 2), y = par("usr")[3], labels = label.items[seq(from = 2, to = nrow(thr), by = 2)], adj = c(0.5, 3.1), #
                xpd = TRUE, cex = label.items.cex)#
            if (label.items.ticks == TRUE) {#
                axis(1, at = seq(from = 1, to = nI, by = 2), labels = FALSE, line = NA, tcl = -0.35)#
                axis(1, at = seq(from = 2, to = nI, by = 2), labels = FALSE, line = NA, tcl = -0.9)#
            }#
        }#
        if (label.items.rows == 3) {#
            text(seq(from = 1, to = nrow(thr), by = 3), y = par("usr")[3], labels = label.items[seq(from = 1, to = nrow(thr), by = 3)], adj = c(0.5, 1.9), #
                xpd = TRUE, cex = label.items.cex)#
            text(seq(from = 2, to = nrow(thr), by = 3), y = par("usr")[3], labels = label.items[seq(from = 2, to = nrow(thr), by = 3)], adj = c(0.5, 3.1), #
                xpd = TRUE, cex = label.items.cex)#
            text(seq(from = 3, to = nrow(thr), by = 3), y = par("usr")[3], labels = label.items[seq(from = 3, to = nrow(thr), by = 3)], adj = c(0.5, 4.3), #
                xpd = TRUE, cex = label.items.cex)#
            if (label.items.ticks == TRUE) {#
                axis(1, at = seq(from = 1, to = nI, by = 3), labels = FALSE, line = NA, tcl = -0.35)#
                axis(1, at = seq(from = 2, to = nI, by = 3), labels = FALSE, line = NA, tcl = -0.9)#
                axis(1, at = seq(from = 3, to = nI, by = 3), labels = FALSE, line = NA, tcl = -1.4)#
            }#
        }#
    }#
    mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
    mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
    par(oma = c(0, 0, 3, 0))#
    mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
    par(op)#
    if(return.thresholds) {#
    return(thresholds)#
    }#
}
wrightMap2(mdim.sim.thetas, mdim.sim.thresholds)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	#par(oma = op$oma + c(0, 5, 0, 5))#
	#par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	#par(mgp = c(op$mar[1] - 2.4, 1, 0))#
	close.screen(all.screens = TRUE)#
	divider = (1 - item.prop)*.8 + .1#
	person.screen <- c(.1,divider,0,1)#
	item.screen <- c(divider,.9,0,1)#
	screens <- matrix(c(person.screen,item.screen),ncol = 4,byrow = TRUE)#
	print(screens)#
	split.screen(screens)#
	print(split.screen())#
	screen(2)#
	do.call(item.side,list(thresholds,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	close.screen(2)#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
	close.screen(all.screens = TRUE)#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	#par(oma = op$oma + c(0, 5, 0, 5))#
	#par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	#par(mgp = c(op$mar[1] - 2.4, 1, 0))#
	close.screen(all.screens = TRUE)#
	divider = (1 - item.prop)*.8 + .1#
	person.screen <- c(.1,divider,0,1)#
	item.screen <- c(divider,.9,0,1)#
	screens <- matrix(c(person.screen,item.screen),ncol = 4,byrow = TRUE)#
	print(screens)#
	split.screen(screens)#
	print(split.screen())#
	screen(2)#
	do.call(item.side,list(thresholds,yRange,...))#
	mtext(axis.logits, side = 4,  outer = TRUE, cex = 0.9, font = 3)#
	close.screen(2)#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
	close.screen(all.screens = TRUE)#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	#par(oma = op$oma + c(0, 5, 0, 5))#
	#par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	#par(mgp = c(op$mar[1] - 2.4, 1, 0))#
	close.screen(all.screens = TRUE)#
	divider = (1 - item.prop)*.8 + .1#
	person.screen <- c(.1,divider,0,1)#
	item.screen <- c(divider,.9,0,1)#
	screens <- matrix(c(person.screen,item.screen),ncol = 4,byrow = TRUE)#
	print(screens)#
	split.screen(screens)#
	print(split.screen())#
	screen(2)#
	do.call(item.side,list(thresholds,yRange,...))#
	mtext(axis.logits, side = 4, line = -2 outer = TRUE, cex = 0.9, font = 3)#
	close.screen(2)#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
	close.screen(all.screens = TRUE)#
#
}
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	#par(oma = op$oma + c(0, 5, 0, 5))#
	#par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	#par(mgp = c(op$mar[1] - 2.4, 1, 0))#
	close.screen(all.screens = TRUE)#
	divider = (1 - item.prop)*.8 + .1#
	person.screen <- c(.1,divider,0,1)#
	item.screen <- c(divider,.9,0,1)#
	screens <- matrix(c(person.screen,item.screen),ncol = 4,byrow = TRUE)#
	print(screens)#
	split.screen(screens)#
	print(split.screen())#
	screen(2)#
	do.call(item.side,list(thresholds,yRange,...))#
	mtext(axis.logits, side = 4, line = -2, outer = TRUE, cex = 0.9, font = 3)#
	close.screen(2)#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
	close.screen(all.screens = TRUE)#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	#par(oma = op$oma + c(0, 5, 0, 5))#
	#par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	#par(mgp = c(op$mar[1] - 2.4, 1, 0))#
	close.screen(all.screens = TRUE)#
	divider = (1 - item.prop)*.8 + .1#
	person.screen <- c(.1,divider,0,1)#
	item.screen <- c(divider,.9,0,1)#
	screens <- matrix(c(person.screen,item.screen),ncol = 4,byrow = TRUE)#
	print(screens)#
	split.screen(screens)#
	print(split.screen())#
	screen(2)#
	do.call(item.side,list(thresholds,yRange,...))#
	mtext(axis.logits, side = 4, line = -2,  cex = 0.9, font = 3)#
	close.screen(2)#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
	close.screen(all.screens = TRUE)#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	#par(oma = op$oma + c(0, 5, 0, 5))#
	#par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	#par(mgp = c(op$mar[1] - 2.4, 1, 0))#
	close.screen(all.screens = TRUE)#
	divider = (1 - item.prop)*.8 + .1#
	person.screen <- c(.1,divider,0,1)#
	item.screen <- c(divider,.9,0,1)#
	screens <- matrix(c(person.screen,item.screen),ncol = 4,byrow = TRUE)#
	print(screens)#
	split.screen(screens)#
	print(split.screen())#
	screen(2)#
	do.call(item.side,list(thresholds,yRange,...))#
	mtext(axis.logits, side = 4,  cex = 0.9, font = 3)#
	close.screen(2)#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
	close.screen(all.screens = TRUE)#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	#par(oma = op$oma + c(0, 5, 0, 5))#
	#par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	#par(mgp = c(op$mar[1] - 2.4, 1, 0))#
	close.screen(all.screens = TRUE)#
	divider = (1 - item.prop)*.8 + .1#
	person.screen <- c(.1,divider,0,1)#
	item.screen <- c(divider,.9,0,1)#
	screens <- matrix(c(person.screen,item.screen),ncol = 4,byrow = TRUE)#
	#print(screens)#
	split.screen(screens)#
	print(split.screen())#
	screen(2)#
	do.call(item.side,list(thresholds,yRange,...))#
	close.screen(2)#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.logits, side = 4,  cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
	close.screen(all.screens = TRUE)#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	#par(oma = op$oma + c(0, 5, 0, 5))#
	#par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	#par(mgp = c(op$mar[1] - 2.4, 1, 0))#
	close.screen(all.screens = TRUE)#
	divider = (1 - item.prop)*.8 + .1#
	person.screen <- c(.1,divider,0,1)#
	item.screen <- c(divider,.9,0,1)#
	screens <- matrix(c(person.screen,item.screen),ncol = 4,byrow = TRUE)#
	print(screens)#
	split.screen(screens)#
	print(split.screen())#
	screen(2)#
	do.call(item.side,list(thresholds,yRange,...))#
	close.screen(2)#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
	close.screen(all.screens = TRUE)#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	#par(oma = op$oma + c(0, 5, 0, 5))#
	#par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	#par(mgp = c(op$mar[1] - 2.4, 1, 0))#
	close.screen(all.screens = TRUE)#
	divider = (1 - item.prop)*.8 + .1#
	person.screen <- c(.1,.3,0,1)#
	item.screen <- c(.3,.9,0,1)#
	screens <- matrix(c(person.screen,item.screen),ncol = 4,byrow = TRUE)#
	print(screens)#
	split.screen(screens)#
	print(split.screen())#
	screen(2)#
	do.call(item.side,list(thresholds,yRange,...))#
	close.screen(2)#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
	close.screen(all.screens = TRUE)#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	#par(oma = op$oma + c(0, 5, 0, 5))#
	#par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	#par(mgp = c(op$mar[1] - 2.4, 1, 0))#
	close.screen(all.screens = TRUE)#
	divider = (1 - item.prop)*.8 + .1#
	person.screen <- c(.1,.3,0,1)#
	item.screen <- c(.1,.9,0,1)#
	screens <- matrix(c(person.screen,item.screen),ncol = 4,byrow = TRUE)#
	print(screens)#
	split.screen(screens)#
	print(split.screen())#
	screen(2)#
	do.call(item.side,list(thresholds,yRange,...))#
	close.screen(2)#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
	close.screen(all.screens = TRUE)#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	#par(oma = op$oma + c(0, 5, 0, 5))#
	#par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	#par(mgp = c(op$mar[1] - 2.4, 1, 0))#
	close.screen(all.screens = TRUE)#
	divider = (1 - item.prop)*.8 + .1#
	person.screen <- c(.1,.3,0,1)#
	item.screen <- c(.3,.9,0,1)#
	screens <- matrix(c(person.screen,item.screen),ncol = 4,byrow = TRUE)#
	print(screens)#
	split.screen(screens)#
	print(split.screen())#
	screen(2)#
	do.call(item.side,list(thresholds,yRange,...))#
	close.screen(2)#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
	close.screen(all.screens = TRUE)#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	#par(oma = op$oma + c(0, 5, 0, 5))#
	#par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	#par(mgp = c(op$mar[1] - 2.4, 1, 0))#
	close.screen(all.screens = TRUE)#
	divider = (1 - item.prop)*.8 + .1#
	person.screen <- c(.1,.6,0,1)#
	item.screen <- c(.6,.9,0,1)#
	screens <- matrix(c(person.screen,item.screen),ncol = 4,byrow = TRUE)#
	print(screens)#
	split.screen(screens)#
	print(split.screen())#
	screen(2)#
	do.call(item.side,list(thresholds,yRange,...))#
	close.screen(2)#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
	close.screen(all.screens = TRUE)#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	#par(oma = op$oma + c(0, 5, 0, 5))#
	#par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	#par(mgp = c(op$mar[1] - 2.4, 1, 0))#
	close.screen(all.screens = TRUE)#
	person.screen <- c(.1,1 - item.prop,0,1)#
	item.screen <- c(1 - item.prop,.9,0,1)#
	screens <- matrix(c(person.screen,item.screen),ncol = 4,byrow = TRUE)#
	print(screens)#
	split.screen(screens)#
	print(split.screen())#
	screen(2)#
	do.call(item.side,list(thresholds,yRange,...))#
	close.screen(2)#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
	close.screen(all.screens = TRUE)#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
wrightMap <- function(thetas, thresholds = NULL, item.side = itemModern, person.side = personHist, throld = NULL, design.matrix = "normal", make.from = "deltas", alpha = 1, c.params = 0, main.title = "Wright Map", axis.logits = "Logits", axis.persons = "Respondents", min.logit.pad = 0.25, max.logit.pad = 0.25, min.l = NULL, max.l = NULL, item.prop = 0.8, return.thresholds = TRUE, new.quartz = FALSE, ...) {#
#
	## Helper Functions#
	thetas <- personData(thetas)#
	if(is.null(thresholds))#
		thresholds <- thetas#
	thresholds <- itemData(thresholds,...)#
	if (!is.null(throld)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = throld, alpha = alpha, make.from = make.from, c.params = c.params)#
	} else if (any(c.params != 0)) {#
		thresholds <- make.thresholds(thresholds, design.matrix = design.matrix, throld = 0.5, alpha = alpha, make.from = make.from, c.params = c.params)#
	}#
	# Setting plot parameters#
	nD <- ncol(thetas)#
	min.theta <- quantile(thetas, probs = c(0.01), na.rm = TRUE)#
	max.theta <- quantile(thetas, probs = c(0.99), na.rm = TRUE)#
#
	if (is.null(min.l)) {#
		min.l <- min(c(min.theta, thresholds), na.rm = TRUE) - min.logit.pad#
	}#
#
	if (is.null(max.l)) {#
		max.l <- max(c(max.theta, thresholds), na.rm = TRUE) + max.logit.pad#
	}#
#
	yRange <- c(min.l, max.l)#
	# Generating Full Map#
	if (new.quartz) #
		dev.new(width = 9, height = 5)#
	op <- par("oma", "mar", "mgp")#
	#par(oma = op$oma + c(0, 5, 0, 5))#
	#par(mar = c(op$mar[1], 0.2, op$mar[3], 0.1))#
	#par(mgp = c(op$mar[1] - 2.4, 1, 0))#
	close.screen(all.screens = TRUE)#
	person.screen <- c(.1,1 - item.prop,0,1)#
	item.screen <- c(1 - item.prop,.9,0,1)#
	screens <- matrix(c(person.screen,item.screen),ncol = 4,byrow = TRUE)#
	print(screens)#
	split.screen(screens)#
	print(split.screen())#
	screen(2)#
	do.call(item.side,list(thresholds,yRange,...))#
	close.screen(2)#
	do.call(person.side,list(thetas,yRange,...))#
	mtext(axis.logits, side = 4, line = 2.5, outer = TRUE, cex = 0.9, font = 3)#
	mtext(axis.persons, side = 2, line = 1, outer = TRUE, cex = 0.9, font = 3)#
	par(oma = c(0, 0, 3, 0))#
	mtext(main.title, side = 3, line = 1, outer = TRUE, font = 2)#
	par(op)#
	if (return.thresholds) {#
		return(thresholds)#
	}#
	close.screen(all.screens = TRUE)#
#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds)
wrightMap(mdim.sim.thetas, mdim.sim.thresholds,new.quartz = TRUE)
dev.off()
itemModern <- function(thr, yRange = NULL, axis.items = "Items", show.thr.sym = TRUE, thr.sym.cex = 1.2, thr.sym.lwd = 1, thr.sym.pch = 23, thr.sym.col.fg = rgb(0, 0, 0, 0.3), thr.sym.col.bg = rgb(0, 0, 0, 0.3), show.thr.lab = TRUE, thr.lab.pos = c(2, 4), thr.lab.text = NULL, thr.lab.col = "black", thr.lab.cex = 0.85, thr.lab.font = 2,label.items.rows = 1,label.items.srt = 0,label.items = NULL,label.items.cex = 0.9,label.items.ticks = TRUE,...) {#
	thr <- as.matrix(thr)#
#
	nI <- dim(thr)[1]#
	if(is.null(yRange))#
		yRange <- c(min(thr),max(thr))#
	if (is.null(thr.lab.text)) {#
		if (!is.null(colnames(thr))) #
			thr.lab.text <- as.data.frame(matrix(rep(colnames(thr), each = nrow(thr)), nrow = nrow(thr)))#
		else thr.lab.text = col(thr)#
	}#
	if (is.null(label.items)) {#
		if (!is.null(rownames(thr))) #
			label.items <- rownames(thr)#
		else label.items <- c(paste("Item", seq(1:nI)))#
	}#
#
	plot(seq(1:nI), rep(0, nI), type = "n", axes = FALSE, xlab = axis.items, ylab = "", ylim = yRange, xlim = c(0.5, nI + 0.5), #
		cex.lab = 1.3, font.lab = 3)#
#
	box(bty = "o")#
	usr <- par("usr")#
	axis(4, las = 1, cex.axis = 1.2, font.axis = 2)#
	#par(mgp = c(0, 0.2, 0))#
#
	if (show.thr.sym == TRUE) {#
#
		points(row(thr), thr, ylim = yRange, type = "p", cex = thr.sym.cex, lwd = thr.sym.lwd, pch = as.matrix(thr.sym.pch), #
			col = as.matrix(thr.sym.col.fg), bg = as.matrix(thr.sym.col.bg))#
	}#
#
	if (show.thr.lab == TRUE) {#
		if (show.thr.sym == TRUE) {#
			pos <- matrix(rep(rep_len(thr.lab.pos, ncol(thr)), nI), byrow = TRUE, ncol = ncol(thr))#
			pos <- t(sapply(1:nrow(thr), function(x) pos[x, rank(thr[x, ])]))#
			text(row(thr), thr, labels = as.matrix(thr.lab.text), col = as.matrix(thr.lab.col), pos = pos, cex = thr.lab.cex, #
				font = thr.lab.font)#
		} else {#
			text(row(thr), thr, labels = as.matrix(thr.lab.text), col = as.matrix(thr.lab.col), cex = thr.lab.cex, font = thr.lab.font)#
		}#
	}#
#
	#par(mgp = c(3, 1, 0))#
#
	if (label.items.rows == 1) {#
		if (label.items.srt != 0) {#
			text.adj = c(1.1, 1.1)#
		} else {#
			text.adj = c(0.5, 2)#
		}#
		text(seq(1:nrow(thr)), y = par("usr")[3], labels = label.items, srt = label.items.srt, adj = text.adj, xpd = TRUE, cex = label.items.cex)#
#
		if (label.items.ticks == TRUE) {#
#
			axis(1, at = 1:nI, labels = FALSE, line = NA, tcl = -0.35)#
#
		}#
#
	}#
#
	if (label.items.rows == 2) {#
#
		text(seq(from = 1, to = nrow(thr), by = 2), y = par("usr")[3], labels = label.items[seq(from = 1, to = nrow(thr), by = 2)], #
			adj = c(0.5, 1.9), xpd = TRUE, cex = label.items.cex)#
#
		text(seq(from = 2, to = nrow(thr), by = 2), y = par("usr")[3], labels = label.items[seq(from = 2, to = nrow(thr), by = 2)], #
			adj = c(0.5, 3.1), xpd = TRUE, cex = label.items.cex)#
#
		if (label.items.ticks == TRUE) {#
#
			axis(1, at = seq(from = 1, to = nI, by = 2), labels = FALSE, line = NA, tcl = -0.35)#
			axis(1, at = seq(from = 2, to = nI, by = 2), labels = FALSE, line = NA, tcl = -0.9)#
#
		}#
#
	}#
#
	if (label.items.rows == 3) {#
#
		text(seq(from = 1, to = nrow(thr), by = 3), y = par("usr")[3], labels = label.items[seq(from = 1, to = nrow(thr), by = 3)], #
			adj = c(0.5, 1.9), xpd = TRUE, cex = label.items.cex)#
		text(seq(from = 2, to = nrow(thr), by = 3), y = par("usr")[3], labels = label.items[seq(from = 2, to = nrow(thr), by = 3)], #
			adj = c(0.5, 3.1), xpd = TRUE, cex = label.items.cex)#
		text(seq(from = 3, to = nrow(thr), by = 3), y = par("usr")[3], labels = label.items[seq(from = 3, to = nrow(thr), by = 3)], #
			adj = c(0.5, 4.3), xpd = TRUE, cex = label.items.cex)#
#
		if (label.items.ticks == TRUE) {#
#
			axis(1, at = seq(from = 1, to = nI, by = 3), labels = FALSE, line = NA, tcl = -0.35)#
			axis(1, at = seq(from = 2, to = nI, by = 3), labels = FALSE, line = NA, tcl = -0.9)#
			axis(1, at = seq(from = 3, to = nI, by = 3), labels = FALSE, line = NA, tcl = -1.4)#
#
		}#
#
	}#
}
wrightMap(mdim.sim.thetas, mdim.sim.thresholds,new.quartz = TRUE)
